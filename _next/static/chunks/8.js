(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[8],{

/***/ "./components/groupsolve/lobby.tsx":
/*!*****************************************!*\
  !*** ./components/groupsolve/lobby.tsx ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ \"./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\nvar _this = undefined,\n    _jsxFileName = \"/vagrant/client/components/groupsolve/lobby.tsx\";\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement;\n\nvar MAX_PLAYERS = 6;\n\nvar Lobby = function Lobby(_ref) {\n  var playerStarted = _ref.playerStarted,\n      isConnected = _ref.isConnected,\n      title = _ref.title,\n      players = _ref.players,\n      currentPlayer = _ref.currentPlayer,\n      playerSprite = _ref.playerSprite,\n      startButton = _ref.startButton,\n      confirmButton = _ref.confirmButton,\n      rejoinButton = _ref.rejoinButton,\n      className = _ref.className,\n      _ref$requiredPlayers = _ref.requiredPlayers,\n      requiredPlayers = _ref$requiredPlayers === void 0 ? 1 : _ref$requiredPlayers,\n      props = Object(_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref, [\"playerStarted\", \"isConnected\", \"title\", \"players\", \"currentPlayer\", \"playerSprite\", \"startButton\", \"confirmButton\", \"rejoinButton\", \"className\", \"requiredPlayers\"]);\n\n  var allStarted = isConnected && players.every(function (player) {\n    return player.getReady();\n  }) && players.length >= requiredPlayers;\n  var playersNeeded = Math.max(requiredPlayers - 1, players.filter(function (player) {\n    return !player.getReady();\n  }).length);\n  return __jsx(\"div\", Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props, {\n    className: \"jsx-243751013\" + \" \" + (props && props.className != null && props.className || \"abs-center center \".concat(className !== null && className !== void 0 ? className : '')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }), title, allStarted ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, confirmButton, __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"Note: Once you begin a session, others won't be able to join until it ends.\")) : playerStarted && players.length >= requiredPlayers ? \"Waiting for \".concat(playersNeeded, \" other player\").concat(playersNeeded === 1 ? '' : 's', \" to join...\") : playerStarted ? \"(Minimum of \".concat(requiredPlayers, \" players required)\") : isConnected ? startButton : __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, rejoinButton, __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Game in session... \", __jsx(\"br\", {\n    className: \"jsx-243751013\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 32\n    }\n  }), \"Please wait for the current session to complete.\")), players.length > 0 && __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"(\", players.length, \" player\", players.length === 1 ? ' ' : 's ', \"in lobby)\"), playerSprite && __jsx(\"div\", {\n    className: \"jsx-243751013\" + \" \" + \"players flex-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, players.map(function (player, i) {\n    return __jsx(\"div\", {\n      key: i,\n      style: {\n        backgroundPosition: \"\".concat(i * 100 / (MAX_PLAYERS - 1), \"%\"),\n        backgroundImage: \"url(\".concat(playerSprite.url, \")\"),\n        backgroundSize: '600% 100%',\n        transform: \"scale(\".concat(i === currentPlayer ? 1 : 0.7, \")\"),\n        filter: player.getReady() ? 'none' : 'grayscale(1) opacity(80%)',\n        width: playerSprite.width,\n        height: playerSprite.height\n      },\n      className: \"jsx-243751013\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    });\n  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"243751013\",\n    __self: _this\n  }, \".small.jsx-243751013{font-size:1.8vmin;line-height:2.2vmin;margin-top:2.8vmin;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlHa0IsQUFHNkIsa0JBQ0Usb0JBQ0QsbUJBQ3JCIiwiZmlsZSI6Ii92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9nYW1lX3BiJztcbmltcG9ydCB7IGdldEltYWdlT2Zmc2V0IH0gZnJvbSAndXRpbHMvZ2FtZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHBsYXllclN0YXJ0ZWQ6IGJvb2xlYW47XG4gIGlzQ29ubmVjdGVkOiBib29sZWFuO1xuICB0aXRsZT86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcGxheWVyczogUGxheWVyW107XG4gIGN1cnJlbnRQbGF5ZXI6IG51bWJlcjtcbiAgcGxheWVyU3ByaXRlPzoge1xuICAgIHVybDogc3RyaW5nO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gIH07XG4gIHN0YXJ0QnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGNvbmZpcm1CdXR0b246IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcmVqb2luQnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIHJlcXVpcmVkUGxheWVycz86IG51bWJlcjtcbn1cblxuY29uc3QgTUFYX1BMQVlFUlMgPSA2O1xuXG5jb25zdCBMb2JieTogRnVuY3Rpb25Db21wb25lbnQ8XG4gIFByb3BzICYgT21pdDxSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+LCAndGl0bGUnPlxuPiA9ICh7XG4gIHBsYXllclN0YXJ0ZWQsXG4gIGlzQ29ubmVjdGVkLFxuICB0aXRsZSxcbiAgcGxheWVycyxcbiAgY3VycmVudFBsYXllcixcbiAgcGxheWVyU3ByaXRlLFxuICBzdGFydEJ1dHRvbixcbiAgY29uZmlybUJ1dHRvbixcbiAgcmVqb2luQnV0dG9uLFxuICBjbGFzc05hbWUsXG4gIHJlcXVpcmVkUGxheWVycyA9IDEsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGFsbFN0YXJ0ZWQgPVxuICAgIGlzQ29ubmVjdGVkICYmXG4gICAgcGxheWVycy5ldmVyeSgocGxheWVyKSA9PiBwbGF5ZXIuZ2V0UmVhZHkoKSkgJiZcbiAgICBwbGF5ZXJzLmxlbmd0aCA+PSByZXF1aXJlZFBsYXllcnM7XG5cbiAgY29uc3QgcGxheWVyc05lZWRlZCA9IE1hdGgubWF4KFxuICAgIHJlcXVpcmVkUGxheWVycyAtIDEsXG4gICAgcGxheWVycy5maWx0ZXIoKHBsYXllcikgPT4gIXBsYXllci5nZXRSZWFkeSgpKS5sZW5ndGhcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgYWJzLWNlbnRlciBjZW50ZXIgJHtjbGFzc05hbWUgPz8gJyd9YH0gey4uLnByb3BzfT5cbiAgICAgIHt0aXRsZX1cbiAgICAgIHthbGxTdGFydGVkID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtjb25maXJtQnV0dG9ufVxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgICBOb3RlOiBPbmNlIHlvdSBiZWdpbiBhIHNlc3Npb24sIG90aGVycyB3b24ndCBiZSBhYmxlIHRvIGpvaW4gdW50aWxcbiAgICAgICAgICAgIGl0IGVuZHMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiBwbGF5ZXJTdGFydGVkICYmIHBsYXllcnMubGVuZ3RoID49IHJlcXVpcmVkUGxheWVycyA/IChcbiAgICAgICAgYFdhaXRpbmcgZm9yICR7cGxheWVyc05lZWRlZH0gb3RoZXIgcGxheWVyJHtcbiAgICAgICAgICBwbGF5ZXJzTmVlZGVkID09PSAxID8gJycgOiAncydcbiAgICAgICAgfSB0byBqb2luLi4uYFxuICAgICAgKSA6IHBsYXllclN0YXJ0ZWQgPyAoXG4gICAgICAgIGAoTWluaW11bSBvZiAke3JlcXVpcmVkUGxheWVyc30gcGxheWVycyByZXF1aXJlZClgXG4gICAgICApIDogaXNDb25uZWN0ZWQgPyAoXG4gICAgICAgIHN0YXJ0QnV0dG9uXG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZWpvaW5CdXR0b259XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj5cbiAgICAgICAgICAgIEdhbWUgaW4gc2Vzc2lvbi4uLiA8YnIgLz5cbiAgICAgICAgICAgIFBsZWFzZSB3YWl0IGZvciB0aGUgY3VycmVudCBzZXNzaW9uIHRvIGNvbXBsZXRlLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3BsYXllcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgKHtwbGF5ZXJzLmxlbmd0aH0gcGxheWVye3BsYXllcnMubGVuZ3RoID09PSAxID8gJyAnIDogJ3MgJ31cbiAgICAgICAgICBpbiBsb2JieSlcbiAgICAgICAgPC9wPlxuICAgICAgKX1cbiAgICAgIHtwbGF5ZXJTcHJpdGUgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllcnMgZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICB7cGxheWVycy5tYXAoKHBsYXllciwgaSkgPT4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBgJHsoaSAqIDEwMCkgLyAoTUFYX1BMQVlFUlMgLSAxKX0lYCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwbGF5ZXJTcHJpdGUudXJsfSlgLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjAwJSAxMDAlJyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2kgPT09IGN1cnJlbnRQbGF5ZXIgPyAxIDogMC43fSlgLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogcGxheWVyLmdldFJlYWR5KClcbiAgICAgICAgICAgICAgICAgID8gJ25vbmUnXG4gICAgICAgICAgICAgICAgICA6ICdncmF5c2NhbGUoMSkgb3BhY2l0eSg4MCUpJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogcGxheWVyU3ByaXRlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGxheWVyU3ByaXRlLmhlaWdodCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuc21hbGwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS44dm1pbjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMi4ydm1pbjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAyLjh2bWluO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2JieTtcbiJdfQ== */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/lobby.tsx */\"));\n};\n\n_c = Lobby;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Lobby);\n\nvar _c;\n\n$RefreshReg$(_c, \"Lobby\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9ncm91cHNvbHZlL2xvYmJ5LnRzeD85NjdiIl0sIm5hbWVzIjpbIk1BWF9QTEFZRVJTIiwiTG9iYnkiLCJwbGF5ZXJTdGFydGVkIiwiaXNDb25uZWN0ZWQiLCJ0aXRsZSIsInBsYXllcnMiLCJjdXJyZW50UGxheWVyIiwicGxheWVyU3ByaXRlIiwic3RhcnRCdXR0b24iLCJjb25maXJtQnV0dG9uIiwicmVqb2luQnV0dG9uIiwiY2xhc3NOYW1lIiwicmVxdWlyZWRQbGF5ZXJzIiwicHJvcHMiLCJhbGxTdGFydGVkIiwiZXZlcnkiLCJwbGF5ZXIiLCJnZXRSZWFkeSIsImxlbmd0aCIsInBsYXllcnNOZWVkZWQiLCJNYXRoIiwibWF4IiwiZmlsdGVyIiwibWFwIiwiaSIsImJhY2tncm91bmRQb3NpdGlvbiIsImJhY2tncm91bmRJbWFnZSIsInVybCIsImJhY2tncm91bmRTaXplIiwidHJhbnNmb3JtIiwid2lkdGgiLCJoZWlnaHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBc0JBLElBQU1BLFdBQVcsR0FBRyxDQUFwQjs7QUFFQSxJQUFNQyxLQUVMLEdBQUcsU0FGRUEsS0FFRixPQWFFO0FBQUEsTUFaSkMsYUFZSSxRQVpKQSxhQVlJO0FBQUEsTUFYSkMsV0FXSSxRQVhKQSxXQVdJO0FBQUEsTUFWSkMsS0FVSSxRQVZKQSxLQVVJO0FBQUEsTUFUSkMsT0FTSSxRQVRKQSxPQVNJO0FBQUEsTUFSSkMsYUFRSSxRQVJKQSxhQVFJO0FBQUEsTUFQSkMsWUFPSSxRQVBKQSxZQU9JO0FBQUEsTUFOSkMsV0FNSSxRQU5KQSxXQU1JO0FBQUEsTUFMSkMsYUFLSSxRQUxKQSxhQUtJO0FBQUEsTUFKSkMsWUFJSSxRQUpKQSxZQUlJO0FBQUEsTUFISkMsU0FHSSxRQUhKQSxTQUdJO0FBQUEsa0NBRkpDLGVBRUk7QUFBQSxNQUZKQSxlQUVJLHFDQUZjLENBRWQ7QUFBQSxNQUREQyxLQUNDOztBQUNKLE1BQU1DLFVBQVUsR0FDZFgsV0FBVyxJQUNYRSxPQUFPLENBQUNVLEtBQVIsQ0FBYyxVQUFDQyxNQUFEO0FBQUEsV0FBWUEsTUFBTSxDQUFDQyxRQUFQLEVBQVo7QUFBQSxHQUFkLENBREEsSUFFQVosT0FBTyxDQUFDYSxNQUFSLElBQWtCTixlQUhwQjtBQUtBLE1BQU1PLGFBQWEsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQ3BCVCxlQUFlLEdBQUcsQ0FERSxFQUVwQlAsT0FBTyxDQUFDaUIsTUFBUixDQUFlLFVBQUNOLE1BQUQ7QUFBQSxXQUFZLENBQUNBLE1BQU0sQ0FBQ0MsUUFBUCxFQUFiO0FBQUEsR0FBZixFQUErQ0MsTUFGM0IsQ0FBdEI7QUFLQSxTQUNFLG9HQUE0REwsS0FBNUQ7QUFBQSwySEFBcUNGLFNBQXJDLGFBQXFDQSxTQUFyQyxjQUFxQ0EsU0FBckMsR0FBa0QsRUFBbEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUNHUCxLQURILEVBRUdVLFVBQVUsR0FDVCxtRUFDR0wsYUFESCxFQUVFO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1GQUZGLENBRFMsR0FRUFAsYUFBYSxJQUFJRyxPQUFPLENBQUNhLE1BQVIsSUFBa0JOLGVBQW5DLHlCQUNhTyxhQURiLDBCQUVBQSxhQUFhLEtBQUssQ0FBbEIsR0FBc0IsRUFBdEIsR0FBMkIsR0FGM0IsbUJBSUFqQixhQUFhLHlCQUNBVSxlQURBLDBCQUViVCxXQUFXLEdBQ2JLLFdBRGEsR0FHYixtRUFDR0UsWUFESCxFQUVFO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLDRCQUNxQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFEckIscURBRkYsQ0FuQkosRUEyQkdMLE9BQU8sQ0FBQ2EsTUFBUixHQUFpQixDQUFqQixJQUNDO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFVBQ0liLE9BQU8sQ0FBQ2EsTUFEWixhQUMyQmIsT0FBTyxDQUFDYSxNQUFSLEtBQW1CLENBQW5CLEdBQXVCLEdBQXZCLEdBQTZCLElBRHhELGNBNUJKLEVBaUNHWCxZQUFZLElBQ1g7QUFBQSx1Q0FBZSxxQkFBZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0dGLE9BQU8sQ0FBQ2tCLEdBQVIsQ0FBWSxVQUFDUCxNQUFELEVBQVNRLENBQVQ7QUFBQSxXQUNYO0FBQ0UsU0FBRyxFQUFFQSxDQURQO0FBRUUsV0FBSyxFQUFFO0FBQ0xDLDBCQUFrQixZQUFNRCxDQUFDLEdBQUcsR0FBTCxJQUFheEIsV0FBVyxHQUFHLENBQTNCLENBQUwsTUFEYjtBQUVMMEIsdUJBQWUsZ0JBQVNuQixZQUFZLENBQUNvQixHQUF0QixNQUZWO0FBR0xDLHNCQUFjLEVBQUUsV0FIWDtBQUlMQyxpQkFBUyxrQkFBV0wsQ0FBQyxLQUFLbEIsYUFBTixHQUFzQixDQUF0QixHQUEwQixHQUFyQyxNQUpKO0FBS0xnQixjQUFNLEVBQUVOLE1BQU0sQ0FBQ0MsUUFBUCxLQUNKLE1BREksR0FFSiwyQkFQQztBQVFMYSxhQUFLLEVBQUV2QixZQUFZLENBQUN1QixLQVJmO0FBU0xDLGNBQU0sRUFBRXhCLFlBQVksQ0FBQ3dCO0FBVGhCLE9BRlQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BRFc7QUFBQSxHQUFaLENBREgsQ0FsQ0o7QUFBQTtBQUFBO0FBQUEsMmpKQURGO0FBZ0VELENBMUZEOztLQUFNOUIsSztBQTRGU0Esb0VBQWYiLCJmaWxlIjoiLi9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9nYW1lX3BiJztcbmltcG9ydCB7IGdldEltYWdlT2Zmc2V0IH0gZnJvbSAndXRpbHMvZ2FtZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHBsYXllclN0YXJ0ZWQ6IGJvb2xlYW47XG4gIGlzQ29ubmVjdGVkOiBib29sZWFuO1xuICB0aXRsZT86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcGxheWVyczogUGxheWVyW107XG4gIGN1cnJlbnRQbGF5ZXI6IG51bWJlcjtcbiAgcGxheWVyU3ByaXRlPzoge1xuICAgIHVybDogc3RyaW5nO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gIH07XG4gIHN0YXJ0QnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGNvbmZpcm1CdXR0b246IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcmVqb2luQnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIHJlcXVpcmVkUGxheWVycz86IG51bWJlcjtcbn1cblxuY29uc3QgTUFYX1BMQVlFUlMgPSA2O1xuXG5jb25zdCBMb2JieTogRnVuY3Rpb25Db21wb25lbnQ8XG4gIFByb3BzICYgT21pdDxSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+LCAndGl0bGUnPlxuPiA9ICh7XG4gIHBsYXllclN0YXJ0ZWQsXG4gIGlzQ29ubmVjdGVkLFxuICB0aXRsZSxcbiAgcGxheWVycyxcbiAgY3VycmVudFBsYXllcixcbiAgcGxheWVyU3ByaXRlLFxuICBzdGFydEJ1dHRvbixcbiAgY29uZmlybUJ1dHRvbixcbiAgcmVqb2luQnV0dG9uLFxuICBjbGFzc05hbWUsXG4gIHJlcXVpcmVkUGxheWVycyA9IDEsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGFsbFN0YXJ0ZWQgPVxuICAgIGlzQ29ubmVjdGVkICYmXG4gICAgcGxheWVycy5ldmVyeSgocGxheWVyKSA9PiBwbGF5ZXIuZ2V0UmVhZHkoKSkgJiZcbiAgICBwbGF5ZXJzLmxlbmd0aCA+PSByZXF1aXJlZFBsYXllcnM7XG5cbiAgY29uc3QgcGxheWVyc05lZWRlZCA9IE1hdGgubWF4KFxuICAgIHJlcXVpcmVkUGxheWVycyAtIDEsXG4gICAgcGxheWVycy5maWx0ZXIoKHBsYXllcikgPT4gIXBsYXllci5nZXRSZWFkeSgpKS5sZW5ndGhcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgYWJzLWNlbnRlciBjZW50ZXIgJHtjbGFzc05hbWUgPz8gJyd9YH0gey4uLnByb3BzfT5cbiAgICAgIHt0aXRsZX1cbiAgICAgIHthbGxTdGFydGVkID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtjb25maXJtQnV0dG9ufVxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgICBOb3RlOiBPbmNlIHlvdSBiZWdpbiBhIHNlc3Npb24sIG90aGVycyB3b24ndCBiZSBhYmxlIHRvIGpvaW4gdW50aWxcbiAgICAgICAgICAgIGl0IGVuZHMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiBwbGF5ZXJTdGFydGVkICYmIHBsYXllcnMubGVuZ3RoID49IHJlcXVpcmVkUGxheWVycyA/IChcbiAgICAgICAgYFdhaXRpbmcgZm9yICR7cGxheWVyc05lZWRlZH0gb3RoZXIgcGxheWVyJHtcbiAgICAgICAgICBwbGF5ZXJzTmVlZGVkID09PSAxID8gJycgOiAncydcbiAgICAgICAgfSB0byBqb2luLi4uYFxuICAgICAgKSA6IHBsYXllclN0YXJ0ZWQgPyAoXG4gICAgICAgIGAoTWluaW11bSBvZiAke3JlcXVpcmVkUGxheWVyc30gcGxheWVycyByZXF1aXJlZClgXG4gICAgICApIDogaXNDb25uZWN0ZWQgPyAoXG4gICAgICAgIHN0YXJ0QnV0dG9uXG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZWpvaW5CdXR0b259XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj5cbiAgICAgICAgICAgIEdhbWUgaW4gc2Vzc2lvbi4uLiA8YnIgLz5cbiAgICAgICAgICAgIFBsZWFzZSB3YWl0IGZvciB0aGUgY3VycmVudCBzZXNzaW9uIHRvIGNvbXBsZXRlLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3BsYXllcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgKHtwbGF5ZXJzLmxlbmd0aH0gcGxheWVye3BsYXllcnMubGVuZ3RoID09PSAxID8gJyAnIDogJ3MgJ31cbiAgICAgICAgICBpbiBsb2JieSlcbiAgICAgICAgPC9wPlxuICAgICAgKX1cbiAgICAgIHtwbGF5ZXJTcHJpdGUgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllcnMgZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICB7cGxheWVycy5tYXAoKHBsYXllciwgaSkgPT4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBgJHsoaSAqIDEwMCkgLyAoTUFYX1BMQVlFUlMgLSAxKX0lYCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwbGF5ZXJTcHJpdGUudXJsfSlgLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjAwJSAxMDAlJyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2kgPT09IGN1cnJlbnRQbGF5ZXIgPyAxIDogMC43fSlgLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogcGxheWVyLmdldFJlYWR5KClcbiAgICAgICAgICAgICAgICAgID8gJ25vbmUnXG4gICAgICAgICAgICAgICAgICA6ICdncmF5c2NhbGUoMSkgb3BhY2l0eSg4MCUpJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogcGxheWVyU3ByaXRlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGxheWVyU3ByaXRlLmhlaWdodCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuc21hbGwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS44dm1pbjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMi4ydm1pbjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAyLjh2bWluO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2JieTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/groupsolve/lobby.tsx\n");

/***/ }),

/***/ "./components/groupsolve/starfruit.tsx":
/*!*********************************************!*\
  !*** ./components/groupsolve/starfruit.tsx ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var components_groupsolve_lobby__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! components/groupsolve/lobby */ \"./components/groupsolve/lobby.tsx\");\n/* harmony import */ var components_groupsolve_starfruit_rules__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! components/groupsolve/starfruit_rules */ \"./components/groupsolve/starfruit_rules.tsx\");\n/* harmony import */ var schema_protos_starfruit_pb__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! schema/protos/starfruit_pb */ \"./schema/protos/starfruit_pb.js\");\n/* harmony import */ var schema_protos_starfruit_pb__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(schema_protos_starfruit_pb__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! schema/protos/game_pb */ \"./schema/protos/game_pb.js\");\n/* harmony import */ var schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var components_card__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! components/card */ \"./components/card.tsx\");\n/* harmony import */ var components_groupsolve_consts__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! components/groupsolve/consts */ \"./components/groupsolve/consts.tsx\");\n/* harmony import */ var utils_game__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! utils/game */ \"./utils/game.ts\");\n/* harmony import */ var utils_animation__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! utils/animation */ \"./utils/animation.ts\");\n/* harmony import */ var utils_assets__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! utils/assets */ \"./utils/assets.ts\");\n\n\n\nvar _BORDER_COLOR,\n    _this = undefined,\n    _jsxFileName = \"/vagrant/client/components/groupsolve/starfruit.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\nvar StarfruitState = schema_protos_starfruit_pb__WEBPACK_IMPORTED_MODULE_6__[\"StarfruitGameState\"].StarfruitState;\nvar TILE_WIDTH = 108;\nvar TILE_HEIGHT = 136;\nvar TILE_OVERLAP_RATIO = 0.875;\nvar DOMINO_WIDTH = 100;\nvar DOMINO_HEIGHT = 54;\nvar SELECTED_COLOR = ['red', 'blue', 'green', 'yellow', 'orange', 'pink'];\nvar SCORE_THRESHOLD = {\n  2: 2,\n  3: 3,\n  4: 5,\n  5: 5,\n  6: 5\n};\nvar BORDER_COLOR = (_BORDER_COLOR = {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_BORDER_COLOR, schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"PlayerColor\"].RED, 'red'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_BORDER_COLOR, schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"PlayerColor\"].BLUE, 'blue'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_BORDER_COLOR, schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"PlayerColor\"].GREEN, 'green'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_BORDER_COLOR, schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"PlayerColor\"].YELLOW, 'yellow'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_BORDER_COLOR, schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"PlayerColor\"].ORANGE, 'orange'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_BORDER_COLOR, schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"PlayerColor\"].INDIGO, 'pink'), _BORDER_COLOR);\nvar STARFRUIT_SOUND_EFFECTS = [{\n  src: 'puzzle/starfruit/bgm',\n  sprite: {\n    loop: [0, 66038, true]\n  }\n}, {\n  src: 'puzzle/starfruit/sfx',\n  sprite: {\n    selectTile: [0, 64],\n    collectTile: [64, 166],\n    gainPoints: [230, 1137],\n    losePoints: [1367, 2679]\n  }\n}];\n\nvar getBlankTile = function getBlankTile() {\n  var tile = new schema_protos_starfruit_pb__WEBPACK_IMPORTED_MODULE_6__[\"MahjongTile\"]();\n  tile.setType(schema_protos_starfruit_pb__WEBPACK_IMPORTED_MODULE_6__[\"TileType\"].SPECIAL);\n  tile.setValue(8);\n  return tile;\n};\n\nvar getTileSize = function getTileSize(board, screenDimensions) {\n  // Leave a little bit of padding on each side.\n  var width = screenDimensions.width / (board.getCols() / 2);\n  var height = screenDimensions.height / (board.getRows() / 2 + 1);\n  return [Math.min(width, height * TILE_WIDTH / TILE_HEIGHT), Math.min(height, width * TILE_HEIGHT / TILE_WIDTH)];\n};\n\nvar renderScore = function renderScore(score, sprite) {\n  var numDominoes = Math.ceil(score / 12);\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, Array.from(Array(numDominoes).keys()).map(function (i) {\n    var value = i === numDominoes - 1 ? score % 12 === 0 ? 12 : score % 12 : 12;\n    return __jsx(\"div\", {\n      key: \"domino-\".concat(i),\n      style: {\n        backgroundPosition: Object(utils_game__WEBPACK_IMPORTED_MODULE_10__[\"getImageOffset\"])(value - 1, 0, DOMINO_WIDTH, DOMINO_HEIGHT)\n      },\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"388675385\", [sprite, DOMINO_WIDTH, DOMINO_HEIGHT]]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }\n    });\n  }), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"388675385\",\n    dynamic: [sprite, DOMINO_WIDTH, DOMINO_HEIGHT],\n    __self: _this\n  }, \"div.__jsx-style-dynamic-selector{background-image:url(\".concat(sprite, \");display:inline-block;margin-left:4px;width:\").concat(DOMINO_WIDTH, \"px;height:\").concat(DOMINO_HEIGHT, \"px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/starfruit.tsx */\")));\n};\n\nvar getTopLeft = function getTopLeft(position, board, screenDimensions) {\n  var _position$getZ, _position$getX, _position$getY;\n\n  var _getTileSize = getTileSize(board, screenDimensions),\n      _getTileSize2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_getTileSize, 2),\n      width = _getTileSize2[0],\n      height = _getTileSize2[1];\n\n  var tileWidth = width / 2;\n  var tileHeight = height / 2;\n  var z = (_position$getZ = position === null || position === void 0 ? void 0 : position.getZ()) !== null && _position$getZ !== void 0 ? _position$getZ : 0;\n  return [((_position$getX = position === null || position === void 0 ? void 0 : position.getX()) !== null && _position$getX !== void 0 ? _position$getX : 0) * (tileWidth * TILE_OVERLAP_RATIO) + (screenDimensions.width - tileWidth * 0.875 * board.getCols()) / 4 - z * (tileWidth / 6), // Slightly overlap the tiles vertically\n  ((_position$getY = position === null || position === void 0 ? void 0 : position.getY()) !== null && _position$getY !== void 0 ? _position$getY : 0) * (tileHeight * 0.9) + (screenDimensions.height - tileHeight * board.getRows()) / 4 - z * (tileHeight / 3)];\n};\n\nvar getPosIndex = function getPosIndex(board, x, y, z) {\n  return x + y * board.getCols() + z * board.getCols() * board.getRows();\n};\n\nvar getTileOffset = function getTileOffset(tile) {\n  return Object(utils_game__WEBPACK_IMPORTED_MODULE_10__[\"getImageOffset\"])(tile.getValue() - 1, tile.getType() - 1, TILE_WIDTH, TILE_HEIGHT);\n};\n\nvar isSelectable = function isSelectable(board, tileMap, position) {\n  var _position$getX2, _position$getY2, _position$getZ2;\n\n  var cols = board.getCols();\n  var rows = board.getRows();\n\n  var isEmpty = function isEmpty(_ref) {\n    var _ref2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref, 3),\n        x = _ref2[0],\n        y = _ref2[1],\n        z = _ref2[2];\n\n    return y < 0 || y >= rows || x < 0 || x >= cols || tileMap[getPosIndex(board, x, y, z)] == undefined;\n  };\n\n  var x = (_position$getX2 = position === null || position === void 0 ? void 0 : position.getX()) !== null && _position$getX2 !== void 0 ? _position$getX2 : 0,\n      y = (_position$getY2 = position === null || position === void 0 ? void 0 : position.getY()) !== null && _position$getY2 !== void 0 ? _position$getY2 : 0,\n      z = (_position$getZ2 = position === null || position === void 0 ? void 0 : position.getZ()) !== null && _position$getZ2 !== void 0 ? _position$getZ2 : 0;\n  var allMustBeEmpty = [[x - 1, y - 1, z + 1], [x - 1, y, z + 1], [x - 1, y + 1, z + 1], [x, y - 1, z + 1], [x, y, z + 1], [x, y + 1, z + 1], [x + 1, y - 1, z + 1], [x + 1, y, z + 1], [x + 1, y + 1, z + 1]];\n  var leftSpots = [[x - 2, y - 1, z], [x - 2, y, z], [x - 2, y + 1, z]];\n  var rightSpots = [[x + 2, y - 1, z], [x + 2, y, z], [x + 2, y + 1, z]];\n  return allMustBeEmpty.every(isEmpty) && (leftSpots.every(isEmpty) || rightSpots.every(isEmpty));\n};\n\nvar renderBackground = function renderBackground(ctx, screenDimensions) {\n  ctx.fillStyle = '#003d07';\n  ctx.fillRect(0, 0, screenDimensions.width, screenDimensions.height);\n};\n\nvar renderTitle = function renderTitle(ctx, sprite, screenDimensions) {\n  ctx.drawImage(sprite, 0, 0, screenDimensions.width, screenDimensions.height);\n};\n\nvar StarfruitGame = function StarfruitGame(_ref3) {\n  _s();\n\n  var _gameState$getState, _gameState$getBaseSta2, _gameState$getBaseSta3, _gameState$getBaseSta4, _playerHands$currentP, _playerHands$currentP2;\n\n  var canvasRef = _ref3.canvasRef,\n      gameState = _ref3.gameState,\n      isConnected = _ref3.isConnected,\n      setLoading = _ref3.setLoading,\n      currentPlayer = _ref3.currentPlayer,\n      sendMessage = _ref3.sendMessage,\n      restartGame = _ref3.restartGame,\n      screenDimensions = _ref3.screenDimensions;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false),\n      playerStarted = _useState[0],\n      setPlayerStarted = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(null),\n      board = _useState2[0],\n      setBoard = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])({}),\n      tileMap = _useState3[0],\n      setTileMap = _useState3[1];\n\n  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])([]),\n      playerHands = _useState4[0],\n      setPlayerHands = _useState4[1];\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(0),\n      score = _useState5[0],\n      setScore = _useState5[1];\n\n  var _useState6 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(0),\n      scoreDiff = _useState6[0],\n      setScoreDiff = _useState6[1];\n\n  var _useState7 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false),\n      showInstructions = _useState7[0],\n      setShowInstructions = _useState7[1];\n\n  var _useState8 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(0),\n      level = _useState8[0],\n      setLevel = _useState8[1];\n\n  var _useState9 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false),\n      gameOver = _useState9[0],\n      setGameOver = _useState9[1];\n\n  var _useImages = Object(utils_assets__WEBPACK_IMPORTED_MODULE_12__[\"useImages\"])('puzzle/starfruit/', ['title', 'tile', 'dominoes']),\n      isLoading = _useImages.isLoading,\n      images = _useImages.images;\n\n  var _useSounds = Object(utils_assets__WEBPACK_IMPORTED_MODULE_12__[\"useSounds\"])('', [].concat(STARFRUIT_SOUND_EFFECTS, [utils_assets__WEBPACK_IMPORTED_MODULE_12__[\"MAIN_SOUND_EFFECTS\"]])),\n      isSoundLoading = _useSounds.isLoading,\n      sounds = _useSounds.sounds;\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    if (!isLoading && !isSoundLoading) {\n      setLoading(false);\n    }\n  }, [isLoading, isSoundLoading]); // Refs for use in animation frames.\n\n  var gameStateRef = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])(null);\n  var tickRef = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])(0); // Map from position to whether the tile can be selected.\n\n  var selectableMap = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useMemo\"])(function () {\n    var map = {};\n\n    if (!board) {\n      return map;\n    }\n\n    Object.entries(tileMap).forEach(function (_ref4) {\n      var _ref5 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref4, 2),\n          i = _ref5[0],\n          tile = _ref5[1];\n\n      map[i] = isSelectable(board, tileMap, tile.getPosition());\n    });\n    return map;\n  }, [board, tileMap]);\n\n  var cleanup = function cleanup() {\n    setPlayerStarted(false);\n    setScoreDiff(0);\n    setScore(0);\n    setTileMap({});\n    setBoard(null);\n    setPlayerHands([]);\n    setLevel(0);\n    setGameOver(false);\n    gameStateRef.current = null;\n    tickRef.current = 0;\n    canvasRef.current.getContext('2d').clearRect(0, 0, screenDimensions.width, screenDimensions.height);\n  };\n\n  var onSelectTile = function onSelectTile(position, isSelected) {\n    var _gameStateRef$current;\n\n    if (((_gameStateRef$current = gameStateRef.current) === null || _gameStateRef$current === void 0 ? void 0 : _gameStateRef$current.getState()) !== StarfruitState.PLAYING || !board) {\n      return;\n    }\n\n    var action = new schema_protos_starfruit_pb__WEBPACK_IMPORTED_MODULE_6__[\"StarfruitGameAction\"]();\n    action.setSelectTile(position);\n    sendMessage(action);\n  };\n\n  var onStartGame = function onStartGame() {\n    var action = new schema_protos_starfruit_pb__WEBPACK_IMPORTED_MODULE_6__[\"StarfruitGameAction\"]();\n    var baseAction = new schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameAction\"]();\n    baseAction.setAction(schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"Action\"].START_GAME);\n    action.setBaseAction(baseAction);\n    sendMessage(action);\n    setPlayerStarted(true);\n    sounds['public/mainsfx'].play('select');\n  };\n\n  var onRedeal = function onRedeal() {\n    var _gameStateRef$current2;\n\n    if (((_gameStateRef$current2 = gameStateRef.current) === null || _gameStateRef$current2 === void 0 ? void 0 : _gameStateRef$current2.getState()) !== StarfruitState.PLAYING || !board) {\n      return;\n    }\n\n    if (confirm(\"Redealing will cost 1 point and reset the entire board and everyone's hands. Are you sure you wish to redeal?\")) {\n      var action = new schema_protos_starfruit_pb__WEBPACK_IMPORTED_MODULE_6__[\"StarfruitGameAction\"]();\n      action.setRedeal(true);\n      sendMessage(action);\n      sounds['public/mainsfx'].play('select');\n    }\n  };\n\n  var onEndGame = function onEndGame() {\n    var _gameStateRef$current3;\n\n    if (((_gameStateRef$current3 = gameStateRef.current) === null || _gameStateRef$current3 === void 0 ? void 0 : _gameStateRef$current3.getState()) !== StarfruitState.PLAYING || !board) {\n      return;\n    }\n\n    if (confirm('Are you sure you wish to end the game and cash in your points?')) {\n      var action = new schema_protos_starfruit_pb__WEBPACK_IMPORTED_MODULE_6__[\"StarfruitGameAction\"]();\n      action.setEndGame(true);\n      sendMessage(action);\n    }\n  };\n\n  var onRestart = function onRestart() {\n    if (Object(utils_game__WEBPACK_IMPORTED_MODULE_10__[\"isGameOver\"])(gameStateRef.current)) {\n      sounds['public/mainsfx'].play('select');\n      cleanup();\n      restartGame();\n    }\n  }; // Update client state on every websocket message.\n\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    var _gameState$getBaseSta, _gameState$getTilesCh, _gameState$getScoreDi;\n\n    gameStateRef.current = gameState;\n    tickRef.current = (_gameState$getBaseSta = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getTick()) !== null && _gameState$getBaseSta !== void 0 ? _gameState$getBaseSta : 0;\n\n    if (!gameState || !isConnected || isLoading || gameOver) {\n      return;\n    }\n\n    if (Object(utils_game__WEBPACK_IMPORTED_MODULE_10__[\"isGameOver\"])(gameState)) {\n      sounds['public/mainsfx'].play('win');\n      sounds['puzzle/starfruit/bgm'].fade(1, 0, 1000);\n      setGameOver(true);\n      return;\n    }\n\n    switch (gameState.getState()) {\n      case StarfruitState.WAITING_FOR_START:\n        // Wait for players to start\n        break;\n\n      case StarfruitState.LEVEL_TRANSITION:\n        var newBoard = gameState.getBoard();\n\n        if (newBoard && (!board || gameState.getBaseState().getLevel() !== level)) {\n          setBoard(newBoard);\n          setLevel(gameState.getBaseState().getLevel());\n          var _tileMap = {};\n          newBoard.getTilesList().forEach(function (tile) {\n            var _tile$getPosition$get, _tile$getPosition$get2, _tile$getPosition$get3;\n\n            var x = (_tile$getPosition$get = tile.getPosition().getX()) !== null && _tile$getPosition$get !== void 0 ? _tile$getPosition$get : 0,\n                y = (_tile$getPosition$get2 = tile.getPosition().getY()) !== null && _tile$getPosition$get2 !== void 0 ? _tile$getPosition$get2 : 0,\n                z = (_tile$getPosition$get3 = tile.getPosition().getZ()) !== null && _tile$getPosition$get3 !== void 0 ? _tile$getPosition$get3 : 0;\n            _tileMap[getPosIndex(newBoard, x, y, z)] = tile;\n          });\n          setTileMap(_tileMap);\n          setPlayerHands([]);\n          setScoreDiff(0);\n\n          if (!sounds['puzzle/starfruit/bgm'].playing('loop')) {\n            sounds['puzzle/starfruit/bgm'].play('loop');\n          }\n        }\n\n        break;\n\n      case StarfruitState.PLAYING:\n        var tilesChanged = (_gameState$getTilesCh = gameState.getTilesChangedMap()) !== null && _gameState$getTilesCh !== void 0 ? _gameState$getTilesCh : undefined;\n\n        if (tilesChanged === null || tilesChanged === void 0 ? void 0 : tilesChanged.getLength()) {\n          var newTileMap = _objectSpread({}, tileMap);\n\n          tilesChanged.forEach(function (tile, i) {\n            if (tile.getValue()) {\n              newTileMap[i] = tile;\n              sounds['puzzle/starfruit/sfx'].play('selectTile');\n            } else {\n              delete newTileMap[i];\n              sounds['puzzle/starfruit/sfx'].play('collectTile');\n\n              if (document.activeElement instanceof HTMLElement) {\n                document.activeElement.blur();\n              }\n            }\n          });\n          setTileMap(newTileMap);\n        }\n\n        var newScores = (_gameState$getScoreDi = gameState.getScoreDiffMap()) !== null && _gameState$getScoreDi !== void 0 ? _gameState$getScoreDi : undefined;\n\n        if ((newScores === null || newScores === void 0 ? void 0 : newScores.getLength()) && newScores.has(currentPlayer)) {\n          var newScoreDiff = newScores.get(currentPlayer);\n\n          if (newScoreDiff !== scoreDiff) {\n            sounds['puzzle/starfruit/sfx'].play(newScoreDiff > 0 ? 'gainPoints' : 'losePoints');\n            setScoreDiff(newScoreDiff);\n            window.setTimeout(function () {\n              return setScoreDiff(0);\n            }, 3000);\n          }\n        }\n\n        var newPlayerHands = gameState.getPlayerHandsList();\n\n        if (newPlayerHands.length) {\n          setPlayerHands(newPlayerHands);\n        }\n\n        if (gameState.getScore() !== score) {\n          setScore(gameState.getScore());\n        }\n\n        break;\n    }\n  }, [gameState]); // Paint frames on the canvas.\n\n  var render = function render(tick) {\n    var _gameStateRef$current4, _gameStateRef$current5;\n\n    if (isLoading || isSoundLoading) {\n      return;\n    }\n\n    var ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, screenDimensions.width, screenDimensions.height);\n    var state = (_gameStateRef$current4 = (_gameStateRef$current5 = gameStateRef.current) === null || _gameStateRef$current5 === void 0 ? void 0 : _gameStateRef$current5.getState()) !== null && _gameStateRef$current4 !== void 0 ? _gameStateRef$current4 : StarfruitState.WAITING_FOR_START;\n\n    if (state === StarfruitState.WAITING_FOR_START || Object(utils_game__WEBPACK_IMPORTED_MODULE_10__[\"isGameOver\"])(gameStateRef.current)) {\n      renderTitle(ctx, images['title'], screenDimensions);\n    } else {\n      renderBackground(ctx, screenDimensions);\n    }\n  };\n\n  Object(utils_animation__WEBPACK_IMPORTED_MODULE_11__[\"useAnimationFrame\"])(render, tickRef, [screenDimensions]);\n  var state = (_gameState$getState = gameState === null || gameState === void 0 ? void 0 : gameState.getState()) !== null && _gameState$getState !== void 0 ? _gameState$getState : StarfruitState.WAITING_FOR_START;\n  var status = (_gameState$getBaseSta2 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getStatus()) !== null && _gameState$getBaseSta2 !== void 0 ? _gameState$getBaseSta2 : schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].WAITING_FOR_START;\n  var players = (_gameState$getBaseSta3 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getPlayersList()) !== null && _gameState$getBaseSta3 !== void 0 ? _gameState$getBaseSta3 : [];\n  var tick = (_gameState$getBaseSta4 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getTick()) !== null && _gameState$getBaseSta4 !== void 0 ? _gameState$getBaseSta4 : 0;\n\n  if (isLoading || isSoundLoading) {\n    return __jsx(\"div\", {\n      className: \"abs-center white\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 12\n      }\n    }, \"Loading tiles...\");\n  }\n\n  var _ref6 = board ? getTileSize(board, screenDimensions) : [0, 0],\n      _ref7 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref6, 2),\n      tileWidth = _ref7[0],\n      tileHeight = _ref7[1];\n\n  var playerHandTiles = (_playerHands$currentP = (_playerHands$currentP2 = playerHands[currentPlayer]) === null || _playerHands$currentP2 === void 0 ? void 0 : _playerHands$currentP2.getTilesList()) !== null && _playerHands$currentP !== void 0 ? _playerHands$currentP : [];\n  var playerHand = Array.from(Array(14).keys()).map(function (i) {\n    return playerHandTiles[i] || getBlankTile();\n  });\n  var _styles$className = {\n    styles: __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n      id: \"1754449572\"\n    }, \"div.jsx-1754449572{color:#fff;top:75%;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/starfruit.tsx */\"),\n    className: \"jsx-1754449572\"\n  },\n      lobbyClassName = _styles$className.className,\n      lobbyStyles = _styles$className.styles;\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, Object(utils_game__WEBPACK_IMPORTED_MODULE_10__[\"isGameOver\"])(gameState) ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"winLose message center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 13\n    }\n  }, \"GAME \", status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'COMPLETE' : 'OVER')), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"bottom message flex-center center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 11\n    }\n  }, __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 13\n    }\n  }, \"Your Score\"), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 13\n    }\n  }, score > 0 ? renderScore(score, images['dominoes'].src) : score), __jsx(\"button\", {\n    onClick: onRestart,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"menu-button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 13\n    }\n  }, \"Back to lobby\"))) : state === StarfruitState.WAITING_FOR_START && tick === 0 ? __jsx(components_groupsolve_lobby__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n    playerStarted: playerStarted,\n    isConnected: isConnected,\n    players: players,\n    currentPlayer: currentPlayer,\n    startButton: __jsx(\"button\", {\n      onClick: onStartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"menu-button\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 13\n      }\n    }, \"Ready to start\"),\n    confirmButton: __jsx(\"button\", {\n      onClick: onStartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"menu-button\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 13\n      }\n    }, \"Start game\"),\n    rejoinButton: __jsx(\"button\", {\n      onClick: restartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"menu-button\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 13\n      }\n    }, \"Rejoin lobby\"),\n    requiredPlayers: 2,\n    className: lobbyClassName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 9\n    }\n  }) : state === StarfruitState.LEVEL_TRANSITION ? __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"center message\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 13\n    }\n  }, \"Shuffling tiles...\"))) : state === StarfruitState.PLAYING && board ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, Object.entries(tileMap).map(function (_ref8) {\n    var _tile$getPosition$get4, _tile$getPosition, _tile$getPosition$get5, _tile$getPosition2;\n\n    var _ref9 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref8, 2),\n        i = _ref9[0],\n        tile = _ref9[1];\n\n    var _getTopLeft = getTopLeft(tile.getPosition(), board, screenDimensions),\n        _getTopLeft2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_getTopLeft, 2),\n        x = _getTopLeft2[0],\n        y = _getTopLeft2[1];\n\n    return __jsx(\"button\", {\n      key: i,\n      disabled: !selectableMap[i],\n      onClick: function onClick() {\n        return onSelectTile(tile.getPosition(), tile.getSelected());\n      },\n      style: {\n        backgroundPosition: getTileOffset(tile),\n        borderColor: tile.getSelected() ? BORDER_COLOR[tile.getSelectedByPlayer()] : '#000',\n        left: x,\n        top: y,\n        zIndex: ((_tile$getPosition$get4 = (_tile$getPosition = tile.getPosition()) === null || _tile$getPosition === void 0 ? void 0 : _tile$getPosition.getZ()) !== null && _tile$getPosition$get4 !== void 0 ? _tile$getPosition$get4 : 0) * 100 + ((_tile$getPosition$get5 = (_tile$getPosition2 = tile.getPosition()) === null || _tile$getPosition2 === void 0 ? void 0 : _tile$getPosition2.getX()) !== null && _tile$getPosition$get5 !== void 0 ? _tile$getPosition$get5 : 0)\n      },\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"tile ui\".concat(tile.getSelected() ? ' selected' : ''),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 15\n      }\n    }, tile.getSelected() && __jsx(\"div\", {\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"overlay ui \".concat(components_groupsolve_consts__WEBPACK_IMPORTED_MODULE_9__[\"COLOR_MAP\"][tile.getSelectedByPlayer()]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 19\n      }\n    }));\n  }), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"hand ui flex-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 572,\n      columnNumber: 11\n    }\n  }, playerHand.map(function (tile, i) {\n    return __jsx(\"div\", {\n      key: \"hand-\".concat(i),\n      style: {\n        backgroundPosition: getTileOffset(tile)\n      },\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"tile\".concat(i >= playerHandTiles.length ? ' blank' : ''),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 15\n      }\n    });\n  }), scoreDiff !== 0 && __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"score-diff\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 15\n    }\n  }, scoreDiff >= 0 ? \"NICE SCORE! +\".concat(scoreDiff) : \"INVALID HAND! \".concat(scoreDiff))), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"score ui\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 11\n    }\n  }, __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"flex-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 13\n    }\n  }, __jsx(\"span\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 15\n    }\n  }, \"Target: \", SCORE_THRESHOLD[players.length]), \"Score: \", score, ' ', score >= SCORE_THRESHOLD[players.length] ? '(Target met!)' : '')), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"ui instructions\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 11\n    }\n  }, score >= SCORE_THRESHOLD[players.length] && __jsx(\"button\", {\n    onClick: onEndGame,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"menu-button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 15\n    }\n  }, \"Win Game!\"), __jsx(\"button\", {\n    onClick: onRedeal,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"menu-button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 13\n    }\n  }, \"Redeal board\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      return setShowInstructions(true);\n    },\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2770749922\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33']]]) + \" \" + \"menu-button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 13\n    }\n  }, \"Rules\")), __jsx(components_card__WEBPACK_IMPORTED_MODULE_8__[\"CardModal\"], {\n    isOpen: showInstructions,\n    onRequestClose: function onRequestClose() {\n      return setShowInstructions(false);\n    },\n    contentLabel: \"Rules\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 11\n    }\n  }, __jsx(components_groupsolve_starfruit_rules__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n    screenDimensions: screenDimensions,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 620,\n      columnNumber: 13\n    }\n  }))) : null, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"2770749922\",\n    dynamic: [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', images['tile'].src, TILE_WIDTH, TILE_HEIGHT, tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, (1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, (1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, scoreDiff > 0 ? '#fff' : '#c33'],\n    __self: _this\n  }, \".center.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:absolute;left:0;right:0;top:50%;text-align:center;}.bottom.__jsx-style-dynamic-selector{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;top:60%;}.bottom.__jsx-style-dynamic-selector .menu-button.__jsx-style-dynamic-selector{margin-top:12px;}.message.__jsx-style-dynamic-selector{color:#fff;pointer-events:none;font-size:25px;}.winLose.message.__jsx-style-dynamic-selector{color:\".concat(status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? '#ccffcc' : 'red', \";font-size:50px;top:20%;}.ui.__jsx-style-dynamic-selector{position:absolute;}.menu-button.__jsx-style-dynamic-selector{background:transparent;border-radius:4px;border-color:#fff;color:#fff;font-size:24px;height:36px;padding:0 10px;margin-right:4px;}.menu-button.__jsx-style-dynamic-selector:hover{background:rgba(255,255,255,0.1);}.tile.__jsx-style-dynamic-selector{background-color:transparent;background-image:url(\").concat(images['tile'].src, \") !important;border:none;width:\").concat(TILE_WIDTH, \"px;height:\").concat(TILE_HEIGHT, \"px;-webkit-transform:scale( \").concat(tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, \", \").concat(tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, \" );-ms-transform:scale( \").concat(tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, \", \").concat(tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, \" );transform:scale( \").concat(tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO, \", \").concat(tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO, \" );}.tile.blank.__jsx-style-dynamic-selector{opacity:.5;}.tile.__jsx-style-dynamic-selector:not(.selected):hover{-webkit-filter:sepia(50%);filter:sepia(50%);}.tile.__jsx-style-dynamic-selector:disabled{cursor:not-allowed;}.tile.selected.__jsx-style-dynamic-selector{border:3px solid #000;}.tile.selected.__jsx-style-dynamic-selector .overlay.__jsx-style-dynamic-selector{border-radius:16px;top:0;bottom:0;left:0;right:0;opacity:30%;}.hand.__jsx-style-dynamic-selector{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;bottom:0%;left:0;right:0;z-index:1000;-webkit-transform:translateY( \").concat((1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, \"% );-ms-transform:translateY( \").concat((1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, \"% );transform:translateY( \").concat((1 - tileHeight / TILE_HEIGHT / TILE_OVERLAP_RATIO) * 50, \"% );}.hand.__jsx-style-dynamic-selector .tile.__jsx-style-dynamic-selector{margin:0 -\").concat((1 - tileWidth / TILE_WIDTH / TILE_OVERLAP_RATIO) * TILE_WIDTH / 2, \"px;}.score.__jsx-style-dynamic-selector{color:#fff;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;top:0%;left:5%;z-index:1000;}.score.__jsx-style-dynamic-selector h3.__jsx-style-dynamic-selector{margin:8px 16px;}.score.__jsx-style-dynamic-selector span.__jsx-style-dynamic-selector{margin-right:16px;}.score-diff.__jsx-style-dynamic-selector{color:\").concat(scoreDiff > 0 ? '#fff' : '#c33', \";opacity:0;-webkit-transform:rotate(-8deg);-ms-transform:rotate(-8deg);transform:rotate(-8deg);-webkit-animation:3s ease-in-out animate-score-__jsx-style-dynamic-selector;animation:3s ease-in-out animate-score-__jsx-style-dynamic-selector;}.instructions.__jsx-style-dynamic-selector{top:8px;right:10%;z-index:1000;}@-webkit-keyframes animate-score-__jsx-style-dynamic-selector{from{opacity:1;-webkit-transform:translateY(0) rotate(-8deg);-ms-transform:translateY(0) rotate(-8deg);transform:translateY(0) rotate(-8deg);}to{opacity:0.01;-webkit-transform:translateY(-20px) rotate(-8deg);-ms-transform:translateY(-20px) rotate(-8deg);transform:translateY(-20px) rotate(-8deg);}}@keyframes animate-score-__jsx-style-dynamic-selector{from{opacity:1;-webkit-transform:translateY(0) rotate(-8deg);-ms-transform:translateY(0) rotate(-8deg);transform:translateY(0) rotate(-8deg);}to{opacity:0.01;-webkit-transform:translateY(-20px) rotate(-8deg);-ms-transform:translateY(-20px) rotate(-8deg);transform:translateY(-20px) rotate(-8deg);}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvc3RhcmZydWl0LnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnbkJrQixBQUd3QixBQVVTLEFBS1IsQUFJSCxBQU13QixBQU1qQixBQUlLLEFBV2EsQUFJUCxBQVlsQixBQUlPLEFBSUMsQUFJRyxBQUlILEFBU0ksQUFXa0IsQUFJOUIsQUFRSyxBQUlFLEFBSWlCLEFBTzNCLEFBT0ksQUFLRyxRQVhMLEVBTzhCLENBakhwQixBQTJDdEIsQUF3Q2UsRUFtQytCLEdBMUg5QyxBQStGQSxFQS9FQSxBQW1GQSxBQVllLENBeERmLEFBUVEsR0FKUixDQXZDb0IsRUE0Q1QsSUE3QnFELEVBOUIvQyxBQTJHakIsRUFqRkEsQ0FrQ1MsQ0F2RFEsQUE2RkwsTUFsRlEsQUE2Q1YsQUFpQlYsR0FoQ0EsQ0FxRDBCLENBbEcxQixHQTZEYyxDQXhESixRQUNWLENBVWEsRUE4Q2IsU0E3Q2lCLElBdENRLElBVWYsT0E2QkksQUFnRUwsQ0E1RlQsS0F3Q2MsQ0FxREosS0FoRU8sRUErQ0wsQ0FrQkcsR0FyRHdCLE1Bb0M5QixHQS9DVSxDQWlFbkIsR0FqQlUsUUFDSyxLQWhEZixBQThFd0MsT0FhdEMsQ0F4Q0MsR0F4Q3FDLFdBcUZ0QyxzQkF6SWtCLEtBd0RqQixhQXZETSxPQUNDLFFBQ0EsUUFDVSxrQkFDcEIseUNBbUhBLHNDQTNCQSxpSEFwQ0EiLCJmaWxlIjoiL3ZhZ3JhbnQvY2xpZW50L2NvbXBvbmVudHMvZ3JvdXBzb2x2ZS9zdGFyZnJ1aXQudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjc3MgZnJvbSAnc3R5bGVkLWpzeC9jc3MnO1xuXG5pbXBvcnQgTG9iYnkgZnJvbSAnY29tcG9uZW50cy9ncm91cHNvbHZlL2xvYmJ5JztcbmltcG9ydCBSdWxlcyBmcm9tICdjb21wb25lbnRzL2dyb3Vwc29sdmUvc3RhcmZydWl0X3J1bGVzJztcbmltcG9ydCBUd2Vtb2ppIGZyb20gJ2NvbXBvbmVudHMvdHdlbW9qaSc7XG5pbXBvcnQge1xuICBNYWhqb25nQm9hcmQsXG4gIE1haGpvbmdUaWxlLFxuICBQbGF5ZXJIYW5kLFxuICBTdGFyZnJ1aXRHYW1lQWN0aW9uLFxuICBTdGFyZnJ1aXRHYW1lU3RhdGUsXG4gIFRpbGVUeXBlLFxuICBUaWxlVHlwZU1hcCxcbn0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9zdGFyZnJ1aXRfcGInO1xuaW1wb3J0IHtcbiAgQWN0aW9uLFxuICBHYW1lQWN0aW9uLFxuICBHYW1lU3RhdHVzLFxuICBQbGF5ZXJDb2xvcixcbiAgUGxheWVyQ29sb3JNYXAsXG59IGZyb20gJ3NjaGVtYS9wcm90b3MvZ2FtZV9wYic7XG5pbXBvcnQgeyBDYXJkTW9kYWwgfSBmcm9tICdjb21wb25lbnRzL2NhcmQnO1xuaW1wb3J0IHsgQ09MT1JfTUFQIH0gZnJvbSAnY29tcG9uZW50cy9ncm91cHNvbHZlL2NvbnN0cyc7XG5pbXBvcnQgeyBDb29yZGluYXRlLCBEaXJlY3Rpb24sIERpcmVjdGlvbk1hcCB9IGZyb20gJ3NjaGVtYS9wcm90b3MvbWF0aF9wYic7XG5pbXBvcnQgeyBQcm90b0VudW0gfSBmcm9tICd0eXBlcyc7XG5pbXBvcnQge1xuICBjb21wdXRlUG9zaXRpb24sXG4gIGdldEltYWdlT2Zmc2V0LFxuICBpc0dhbWVPdmVyLFxuICBpc1dpdGhpbixcbn0gZnJvbSAndXRpbHMvZ2FtZSc7XG5pbXBvcnQgeyB1c2VBbmltYXRpb25GcmFtZSB9IGZyb20gJ3V0aWxzL2FuaW1hdGlvbic7XG5pbXBvcnQgeyBNQUlOX1NPVU5EX0VGRkVDVFMsIFNwcml0ZSwgdXNlSW1hZ2VzLCB1c2VTb3VuZHMgfSBmcm9tICd1dGlscy9hc3NldHMnO1xuY29uc3QgeyBTdGFyZnJ1aXRTdGF0ZSB9ID0gU3RhcmZydWl0R2FtZVN0YXRlO1xuXG5jb25zdCBUSUxFX1dJRFRIID0gMTA4O1xuY29uc3QgVElMRV9IRUlHSFQgPSAxMzY7XG5jb25zdCBUSUxFX09WRVJMQVBfUkFUSU8gPSAwLjg3NTtcbmNvbnN0IERPTUlOT19XSURUSCA9IDEwMDtcbmNvbnN0IERPTUlOT19IRUlHSFQgPSA1NDtcbmNvbnN0IFNFTEVDVEVEX0NPTE9SID0gWydyZWQnLCAnYmx1ZScsICdncmVlbicsICd5ZWxsb3cnLCAnb3JhbmdlJywgJ3BpbmsnXTtcblxuY29uc3QgU0NPUkVfVEhSRVNIT0xEID0ge1xuICAyOiAyLFxuICAzOiAzLFxuICA0OiA1LFxuICA1OiA1LFxuICA2OiA1LFxufTtcblxuY29uc3QgQk9SREVSX0NPTE9SOiBSZWNvcmQ8UHJvdG9FbnVtPFBsYXllckNvbG9yTWFwPiwgc3RyaW5nPiA9IHtcbiAgW1BsYXllckNvbG9yLlJFRF06ICdyZWQnLFxuICBbUGxheWVyQ29sb3IuQkxVRV06ICdibHVlJyxcbiAgW1BsYXllckNvbG9yLkdSRUVOXTogJ2dyZWVuJyxcbiAgW1BsYXllckNvbG9yLllFTExPV106ICd5ZWxsb3cnLFxuICBbUGxheWVyQ29sb3IuT1JBTkdFXTogJ29yYW5nZScsXG4gIFtQbGF5ZXJDb2xvci5JTkRJR09dOiAncGluaycsXG59O1xuXG5jb25zdCBTVEFSRlJVSVRfU09VTkRfRUZGRUNUUzogU3ByaXRlW10gPSBbXG4gIHtcbiAgICBzcmM6ICdwdXp6bGUvc3RhcmZydWl0L2JnbScsXG4gICAgc3ByaXRlOiB7XG4gICAgICBsb29wOiBbMCwgNjYwMzgsIHRydWVdLFxuICAgIH0sXG4gIH0sXG4gIHtcbiAgICBzcmM6ICdwdXp6bGUvc3RhcmZydWl0L3NmeCcsXG4gICAgc3ByaXRlOiB7XG4gICAgICBzZWxlY3RUaWxlOiBbMCwgNjRdLFxuICAgICAgY29sbGVjdFRpbGU6IFs2NCwgMTY2XSxcbiAgICAgIGdhaW5Qb2ludHM6IFsyMzAsIDExMzddLFxuICAgICAgbG9zZVBvaW50czogWzEzNjcsIDI2NzldLFxuICAgIH0sXG4gIH0sXG5dO1xuXG5jb25zdCBnZXRCbGFua1RpbGUgPSAoKTogTWFoam9uZ1RpbGUgPT4ge1xuICBjb25zdCB0aWxlID0gbmV3IE1haGpvbmdUaWxlKCk7XG4gIHRpbGUuc2V0VHlwZShUaWxlVHlwZS5TUEVDSUFMKTtcbiAgdGlsZS5zZXRWYWx1ZSg4KTtcbiAgcmV0dXJuIHRpbGU7XG59O1xuXG5jb25zdCBnZXRUaWxlU2l6ZSA9IChcbiAgYm9hcmQ6IE1haGpvbmdCb2FyZCxcbiAgc2NyZWVuRGltZW5zaW9uc1xuKTogW251bWJlciwgbnVtYmVyXSA9PiB7XG4gIC8vIExlYXZlIGEgbGl0dGxlIGJpdCBvZiBwYWRkaW5nIG9uIGVhY2ggc2lkZS5cbiAgY29uc3Qgd2lkdGggPSBzY3JlZW5EaW1lbnNpb25zLndpZHRoIC8gKGJvYXJkLmdldENvbHMoKSAvIDIpO1xuICBjb25zdCBoZWlnaHQgPSBzY3JlZW5EaW1lbnNpb25zLmhlaWdodCAvIChib2FyZC5nZXRSb3dzKCkgLyAyICsgMSk7XG4gIHJldHVybiBbXG4gICAgTWF0aC5taW4od2lkdGgsIChoZWlnaHQgKiBUSUxFX1dJRFRIKSAvIFRJTEVfSEVJR0hUKSxcbiAgICBNYXRoLm1pbihoZWlnaHQsICh3aWR0aCAqIFRJTEVfSEVJR0hUKSAvIFRJTEVfV0lEVEgpLFxuICBdO1xufTtcblxuY29uc3QgcmVuZGVyU2NvcmUgPSAoc2NvcmU6IG51bWJlciwgc3ByaXRlOiBzdHJpbmcpID0+IHtcbiAgY29uc3QgbnVtRG9taW5vZXMgPSBNYXRoLmNlaWwoc2NvcmUgLyAxMik7XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtBcnJheS5mcm9tKEFycmF5KG51bURvbWlub2VzKS5rZXlzKCkpLm1hcCgoaSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9XG4gICAgICAgICAgaSA9PT0gbnVtRG9taW5vZXMgLSAxID8gKHNjb3JlICUgMTIgPT09IDAgPyAxMiA6IHNjb3JlICUgMTIpIDogMTI7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAga2V5PXtgZG9taW5vLSR7aX1gfVxuICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBnZXRJbWFnZU9mZnNldChcbiAgICAgICAgICAgICAgICB2YWx1ZSAtIDEsXG4gICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICBET01JTk9fV0lEVEgsXG4gICAgICAgICAgICAgICAgRE9NSU5PX0hFSUdIVFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfSl9XG5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgZGl2IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJHtzcHJpdGV9KTtcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDRweDtcbiAgICAgICAgICB3aWR0aDogJHtET01JTk9fV0lEVEh9cHg7XG4gICAgICAgICAgaGVpZ2h0OiAke0RPTUlOT19IRUlHSFR9cHg7XG4gICAgICAgIH1cbiAgICAgIGB9PC9zdHlsZT5cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmNvbnN0IGdldFRvcExlZnQgPSAoXG4gIHBvc2l0aW9uOiBDb29yZGluYXRlIHwgdW5kZWZpbmVkLFxuICBib2FyZDogTWFoam9uZ0JvYXJkLFxuICBzY3JlZW5EaW1lbnNpb25zXG4pOiBbbnVtYmVyLCBudW1iZXJdID0+IHtcbiAgY29uc3QgW3dpZHRoLCBoZWlnaHRdID0gZ2V0VGlsZVNpemUoYm9hcmQsIHNjcmVlbkRpbWVuc2lvbnMpO1xuICBjb25zdCB0aWxlV2lkdGggPSB3aWR0aCAvIDI7XG4gIGNvbnN0IHRpbGVIZWlnaHQgPSBoZWlnaHQgLyAyO1xuICBjb25zdCB6ID0gcG9zaXRpb24/LmdldFooKSA/PyAwO1xuICByZXR1cm4gW1xuICAgIChwb3NpdGlvbj8uZ2V0WCgpID8/IDApICogKHRpbGVXaWR0aCAqIFRJTEVfT1ZFUkxBUF9SQVRJTykgK1xuICAgICAgKHNjcmVlbkRpbWVuc2lvbnMud2lkdGggLSB0aWxlV2lkdGggKiAwLjg3NSAqIGJvYXJkLmdldENvbHMoKSkgLyA0IC1cbiAgICAgIHogKiAodGlsZVdpZHRoIC8gNiksXG4gICAgLy8gU2xpZ2h0bHkgb3ZlcmxhcCB0aGUgdGlsZXMgdmVydGljYWxseVxuICAgIChwb3NpdGlvbj8uZ2V0WSgpID8/IDApICogKHRpbGVIZWlnaHQgKiAwLjkpICtcbiAgICAgIChzY3JlZW5EaW1lbnNpb25zLmhlaWdodCAtIHRpbGVIZWlnaHQgKiBib2FyZC5nZXRSb3dzKCkpIC8gNCAtXG4gICAgICB6ICogKHRpbGVIZWlnaHQgLyAzKSxcbiAgXTtcbn07XG5cbmNvbnN0IGdldFBvc0luZGV4ID0gKGJvYXJkOiBNYWhqb25nQm9hcmQsIHgsIHksIHopOiBudW1iZXIgPT5cbiAgeCArIHkgKiBib2FyZC5nZXRDb2xzKCkgKyB6ICogYm9hcmQuZ2V0Q29scygpICogYm9hcmQuZ2V0Um93cygpO1xuXG5jb25zdCBnZXRUaWxlT2Zmc2V0ID0gKHRpbGU6IE1haGpvbmdUaWxlKTogc3RyaW5nID0+XG4gIGdldEltYWdlT2Zmc2V0KFxuICAgIHRpbGUuZ2V0VmFsdWUoKSAtIDEsXG4gICAgdGlsZS5nZXRUeXBlKCkgLSAxLFxuICAgIFRJTEVfV0lEVEgsXG4gICAgVElMRV9IRUlHSFRcbiAgKTtcblxuY29uc3QgaXNTZWxlY3RhYmxlID0gKFxuICBib2FyZDogTWFoam9uZ0JvYXJkLFxuICB0aWxlTWFwOiBSZWNvcmQ8bnVtYmVyLCBNYWhqb25nVGlsZT4sXG4gIHBvc2l0aW9uPzogQ29vcmRpbmF0ZVxuKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IGNvbHMgPSBib2FyZC5nZXRDb2xzKCk7XG4gIGNvbnN0IHJvd3MgPSBib2FyZC5nZXRSb3dzKCk7XG4gIGNvbnN0IGlzRW1wdHkgPSAoW3gsIHksIHpdOiBudW1iZXJbXSkgPT5cbiAgICB5IDwgMCB8fFxuICAgIHkgPj0gcm93cyB8fFxuICAgIHggPCAwIHx8XG4gICAgeCA+PSBjb2xzIHx8XG4gICAgdGlsZU1hcFtnZXRQb3NJbmRleChib2FyZCwgeCwgeSwgeildID09IHVuZGVmaW5lZDtcblxuICBjb25zdCBbeCwgeSwgel0gPSBbXG4gICAgcG9zaXRpb24/LmdldFgoKSA/PyAwLFxuICAgIHBvc2l0aW9uPy5nZXRZKCkgPz8gMCxcbiAgICBwb3NpdGlvbj8uZ2V0WigpID8/IDAsXG4gIF07XG4gIGNvbnN0IGFsbE11c3RCZUVtcHR5ID0gW1xuICAgIFt4IC0gMSwgeSAtIDEsIHogKyAxXSxcbiAgICBbeCAtIDEsIHksIHogKyAxXSxcbiAgICBbeCAtIDEsIHkgKyAxLCB6ICsgMV0sXG4gICAgW3gsIHkgLSAxLCB6ICsgMV0sXG4gICAgW3gsIHksIHogKyAxXSxcbiAgICBbeCwgeSArIDEsIHogKyAxXSxcbiAgICBbeCArIDEsIHkgLSAxLCB6ICsgMV0sXG4gICAgW3ggKyAxLCB5LCB6ICsgMV0sXG4gICAgW3ggKyAxLCB5ICsgMSwgeiArIDFdLFxuICBdO1xuICBjb25zdCBsZWZ0U3BvdHMgPSBbXG4gICAgW3ggLSAyLCB5IC0gMSwgel0sXG4gICAgW3ggLSAyLCB5LCB6XSxcbiAgICBbeCAtIDIsIHkgKyAxLCB6XSxcbiAgXTtcbiAgY29uc3QgcmlnaHRTcG90cyA9IFtcbiAgICBbeCArIDIsIHkgLSAxLCB6XSxcbiAgICBbeCArIDIsIHksIHpdLFxuICAgIFt4ICsgMiwgeSArIDEsIHpdLFxuICBdO1xuICByZXR1cm4gKFxuICAgIGFsbE11c3RCZUVtcHR5LmV2ZXJ5KGlzRW1wdHkpICYmXG4gICAgKGxlZnRTcG90cy5ldmVyeShpc0VtcHR5KSB8fCByaWdodFNwb3RzLmV2ZXJ5KGlzRW1wdHkpKVxuICApO1xufTtcblxuY29uc3QgcmVuZGVyQmFja2dyb3VuZCA9IChjdHgsIHNjcmVlbkRpbWVuc2lvbnMpOiB2b2lkID0+IHtcbiAgY3R4LmZpbGxTdHlsZSA9ICcjMDAzZDA3JztcbiAgY3R4LmZpbGxSZWN0KDAsIDAsIHNjcmVlbkRpbWVuc2lvbnMud2lkdGgsIHNjcmVlbkRpbWVuc2lvbnMuaGVpZ2h0KTtcbn07XG5cbmNvbnN0IHJlbmRlclRpdGxlID0gKGN0eCwgc3ByaXRlLCBzY3JlZW5EaW1lbnNpb25zKSA9PiB7XG4gIGN0eC5kcmF3SW1hZ2Uoc3ByaXRlLCAwLCAwLCBzY3JlZW5EaW1lbnNpb25zLndpZHRoLCBzY3JlZW5EaW1lbnNpb25zLmhlaWdodCk7XG59O1xuXG5jb25zdCBTdGFyZnJ1aXRHYW1lID0gKHtcbiAgY2FudmFzUmVmLFxuICBnYW1lU3RhdGUsXG4gIGlzQ29ubmVjdGVkLFxuICBzZXRMb2FkaW5nLFxuICBjdXJyZW50UGxheWVyLFxuICBzZW5kTWVzc2FnZSxcbiAgcmVzdGFydEdhbWUsXG4gIHNjcmVlbkRpbWVuc2lvbnMsXG59KSA9PiB7XG4gIGNvbnN0IFtwbGF5ZXJTdGFydGVkLCBzZXRQbGF5ZXJTdGFydGVkXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgW2JvYXJkLCBzZXRCb2FyZF0gPSB1c2VTdGF0ZTxNYWhqb25nQm9hcmQgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW3RpbGVNYXAsIHNldFRpbGVNYXBdID0gdXNlU3RhdGU8UmVjb3JkPG51bWJlciwgTWFoam9uZ1RpbGU+Pih7fSk7XG4gIGNvbnN0IFtwbGF5ZXJIYW5kcywgc2V0UGxheWVySGFuZHNdID0gdXNlU3RhdGU8UGxheWVySGFuZFtdPihbXSk7XG4gIGNvbnN0IFtzY29yZSwgc2V0U2NvcmVdID0gdXNlU3RhdGU8bnVtYmVyPigwKTtcbiAgY29uc3QgW3Njb3JlRGlmZiwgc2V0U2NvcmVEaWZmXSA9IHVzZVN0YXRlPG51bWJlcj4oMCk7XG4gIGNvbnN0IFtzaG93SW5zdHJ1Y3Rpb25zLCBzZXRTaG93SW5zdHJ1Y3Rpb25zXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgW2xldmVsLCBzZXRMZXZlbF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApO1xuICBjb25zdCBbZ2FtZU92ZXIsIHNldEdhbWVPdmVyXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcblxuICBjb25zdCB7IGlzTG9hZGluZywgaW1hZ2VzIH0gPSB1c2VJbWFnZXMoJ3B1enpsZS9zdGFyZnJ1aXQvJywgW1xuICAgICd0aXRsZScsXG4gICAgJ3RpbGUnLFxuICAgICdkb21pbm9lcycsXG4gIF0pO1xuXG4gIGNvbnN0IHsgaXNMb2FkaW5nOiBpc1NvdW5kTG9hZGluZywgc291bmRzIH0gPSB1c2VTb3VuZHMoJycsIFtcbiAgICAuLi5TVEFSRlJVSVRfU09VTkRfRUZGRUNUUyxcbiAgICBNQUlOX1NPVU5EX0VGRkVDVFMsXG4gIF0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpc0xvYWRpbmcgJiYgIWlzU291bmRMb2FkaW5nKSB7XG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG4gIH0sIFtpc0xvYWRpbmcsIGlzU291bmRMb2FkaW5nXSk7XG5cbiAgLy8gUmVmcyBmb3IgdXNlIGluIGFuaW1hdGlvbiBmcmFtZXMuXG4gIGNvbnN0IGdhbWVTdGF0ZVJlZiA9IHVzZVJlZjxTdGFyZnJ1aXRHYW1lU3RhdGUgfCBudWxsPihudWxsKTtcbiAgY29uc3QgdGlja1JlZiA9IHVzZVJlZjxudW1iZXI+KDApO1xuXG4gIC8vIE1hcCBmcm9tIHBvc2l0aW9uIHRvIHdoZXRoZXIgdGhlIHRpbGUgY2FuIGJlIHNlbGVjdGVkLlxuICBjb25zdCBzZWxlY3RhYmxlTWFwID0gdXNlTWVtbzxSZWNvcmQ8bnVtYmVyLCBib29sZWFuPj4oKCkgPT4ge1xuICAgIGNvbnN0IG1hcDogUmVjb3JkPG51bWJlciwgYm9vbGVhbj4gPSB7fTtcbiAgICBpZiAoIWJvYXJkKSB7XG4gICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgICBPYmplY3QuZW50cmllcyh0aWxlTWFwKS5mb3JFYWNoKChbaSwgdGlsZV0pID0+IHtcbiAgICAgIG1hcFtpXSA9IGlzU2VsZWN0YWJsZShib2FyZCwgdGlsZU1hcCwgdGlsZS5nZXRQb3NpdGlvbigpKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbWFwO1xuICB9LCBbYm9hcmQsIHRpbGVNYXBdKTtcblxuICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xuICAgIHNldFBsYXllclN0YXJ0ZWQoZmFsc2UpO1xuICAgIHNldFNjb3JlRGlmZigwKTtcbiAgICBzZXRTY29yZSgwKTtcbiAgICBzZXRUaWxlTWFwKHt9KTtcbiAgICBzZXRCb2FyZChudWxsKTtcbiAgICBzZXRQbGF5ZXJIYW5kcyhbXSk7XG4gICAgc2V0TGV2ZWwoMCk7XG4gICAgc2V0R2FtZU92ZXIoZmFsc2UpO1xuICAgIGdhbWVTdGF0ZVJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB0aWNrUmVmLmN1cnJlbnQgPSAwO1xuICAgIGNhbnZhc1JlZi5jdXJyZW50XG4gICAgICAuZ2V0Q29udGV4dCgnMmQnKVxuICAgICAgLmNsZWFyUmVjdCgwLCAwLCBzY3JlZW5EaW1lbnNpb25zLndpZHRoLCBzY3JlZW5EaW1lbnNpb25zLmhlaWdodCk7XG4gIH07XG5cbiAgY29uc3Qgb25TZWxlY3RUaWxlID0gKHBvc2l0aW9uOiBDb29yZGluYXRlLCBpc1NlbGVjdGVkOiBib29sZWFuKSA9PiB7XG4gICAgaWYgKGdhbWVTdGF0ZVJlZi5jdXJyZW50Py5nZXRTdGF0ZSgpICE9PSBTdGFyZnJ1aXRTdGF0ZS5QTEFZSU5HIHx8ICFib2FyZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGFjdGlvbiA9IG5ldyBTdGFyZnJ1aXRHYW1lQWN0aW9uKCk7XG4gICAgYWN0aW9uLnNldFNlbGVjdFRpbGUocG9zaXRpb24pO1xuICAgIHNlbmRNZXNzYWdlKGFjdGlvbik7XG4gIH07XG5cbiAgY29uc3Qgb25TdGFydEdhbWUgPSAoKSA9PiB7XG4gICAgY29uc3QgYWN0aW9uID0gbmV3IFN0YXJmcnVpdEdhbWVBY3Rpb24oKTtcbiAgICBjb25zdCBiYXNlQWN0aW9uID0gbmV3IEdhbWVBY3Rpb24oKTtcbiAgICBiYXNlQWN0aW9uLnNldEFjdGlvbihBY3Rpb24uU1RBUlRfR0FNRSk7XG4gICAgYWN0aW9uLnNldEJhc2VBY3Rpb24oYmFzZUFjdGlvbik7XG4gICAgc2VuZE1lc3NhZ2UoYWN0aW9uKTtcbiAgICBzZXRQbGF5ZXJTdGFydGVkKHRydWUpO1xuICAgIHNvdW5kc1sncHVibGljL21haW5zZngnXS5wbGF5KCdzZWxlY3QnKTtcbiAgfTtcblxuICBjb25zdCBvblJlZGVhbCA9ICgpID0+IHtcbiAgICBpZiAoZ2FtZVN0YXRlUmVmLmN1cnJlbnQ/LmdldFN0YXRlKCkgIT09IFN0YXJmcnVpdFN0YXRlLlBMQVlJTkcgfHwgIWJvYXJkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgY29uZmlybShcbiAgICAgICAgXCJSZWRlYWxpbmcgd2lsbCBjb3N0IDEgcG9pbnQgYW5kIHJlc2V0IHRoZSBlbnRpcmUgYm9hcmQgYW5kIGV2ZXJ5b25lJ3MgaGFuZHMuIEFyZSB5b3Ugc3VyZSB5b3Ugd2lzaCB0byByZWRlYWw/XCJcbiAgICAgIClcbiAgICApIHtcbiAgICAgIGNvbnN0IGFjdGlvbiA9IG5ldyBTdGFyZnJ1aXRHYW1lQWN0aW9uKCk7XG4gICAgICBhY3Rpb24uc2V0UmVkZWFsKHRydWUpO1xuICAgICAgc2VuZE1lc3NhZ2UoYWN0aW9uKTtcbiAgICAgIHNvdW5kc1sncHVibGljL21haW5zZngnXS5wbGF5KCdzZWxlY3QnKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgb25FbmRHYW1lID0gKCkgPT4ge1xuICAgIGlmIChnYW1lU3RhdGVSZWYuY3VycmVudD8uZ2V0U3RhdGUoKSAhPT0gU3RhcmZydWl0U3RhdGUuUExBWUlORyB8fCAhYm9hcmQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdpc2ggdG8gZW5kIHRoZSBnYW1lIGFuZCBjYXNoIGluIHlvdXIgcG9pbnRzPycpXG4gICAgKSB7XG4gICAgICBjb25zdCBhY3Rpb24gPSBuZXcgU3RhcmZydWl0R2FtZUFjdGlvbigpO1xuICAgICAgYWN0aW9uLnNldEVuZEdhbWUodHJ1ZSk7XG4gICAgICBzZW5kTWVzc2FnZShhY3Rpb24pO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvblJlc3RhcnQgPSAoKSA9PiB7XG4gICAgaWYgKGlzR2FtZU92ZXIoZ2FtZVN0YXRlUmVmLmN1cnJlbnQpKSB7XG4gICAgICBzb3VuZHNbJ3B1YmxpYy9tYWluc2Z4J10ucGxheSgnc2VsZWN0Jyk7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgICByZXN0YXJ0R2FtZSgpO1xuICAgIH1cbiAgfTtcblxuICAvLyBVcGRhdGUgY2xpZW50IHN0YXRlIG9uIGV2ZXJ5IHdlYnNvY2tldCBtZXNzYWdlLlxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGdhbWVTdGF0ZVJlZi5jdXJyZW50ID0gZ2FtZVN0YXRlO1xuICAgIHRpY2tSZWYuY3VycmVudCA9IGdhbWVTdGF0ZT8uZ2V0QmFzZVN0YXRlKCkuZ2V0VGljaygpID8/IDA7XG4gICAgaWYgKCFnYW1lU3RhdGUgfHwgIWlzQ29ubmVjdGVkIHx8IGlzTG9hZGluZyB8fCBnYW1lT3Zlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNHYW1lT3ZlcihnYW1lU3RhdGUpKSB7XG4gICAgICBzb3VuZHNbJ3B1YmxpYy9tYWluc2Z4J10ucGxheSgnd2luJyk7XG4gICAgICBzb3VuZHNbJ3B1enpsZS9zdGFyZnJ1aXQvYmdtJ10uZmFkZSgxLCAwLCAxMDAwKTtcbiAgICAgIHNldEdhbWVPdmVyKHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN3aXRjaCAoZ2FtZVN0YXRlLmdldFN0YXRlKCkpIHtcbiAgICAgIGNhc2UgU3RhcmZydWl0U3RhdGUuV0FJVElOR19GT1JfU1RBUlQ6XG4gICAgICAgIC8vIFdhaXQgZm9yIHBsYXllcnMgdG8gc3RhcnRcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgU3RhcmZydWl0U3RhdGUuTEVWRUxfVFJBTlNJVElPTjpcbiAgICAgICAgY29uc3QgbmV3Qm9hcmQgPSBnYW1lU3RhdGUuZ2V0Qm9hcmQoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG5ld0JvYXJkICYmXG4gICAgICAgICAgKCFib2FyZCB8fCBnYW1lU3RhdGUuZ2V0QmFzZVN0YXRlKCkuZ2V0TGV2ZWwoKSAhPT0gbGV2ZWwpXG4gICAgICAgICkge1xuICAgICAgICAgIHNldEJvYXJkKG5ld0JvYXJkKTtcbiAgICAgICAgICBzZXRMZXZlbChnYW1lU3RhdGUuZ2V0QmFzZVN0YXRlKCkuZ2V0TGV2ZWwoKSk7XG4gICAgICAgICAgY29uc3QgdGlsZU1hcCA9IHt9O1xuICAgICAgICAgIG5ld0JvYXJkLmdldFRpbGVzTGlzdCgpLmZvckVhY2goKHRpbGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFt4LCB5LCB6XSA9IFtcbiAgICAgICAgICAgICAgdGlsZS5nZXRQb3NpdGlvbigpLmdldFgoKSA/PyAwLFxuICAgICAgICAgICAgICB0aWxlLmdldFBvc2l0aW9uKCkuZ2V0WSgpID8/IDAsXG4gICAgICAgICAgICAgIHRpbGUuZ2V0UG9zaXRpb24oKS5nZXRaKCkgPz8gMCxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICB0aWxlTWFwW2dldFBvc0luZGV4KG5ld0JvYXJkLCB4LCB5LCB6KV0gPSB0aWxlO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNldFRpbGVNYXAodGlsZU1hcCk7XG4gICAgICAgICAgc2V0UGxheWVySGFuZHMoW10pO1xuICAgICAgICAgIHNldFNjb3JlRGlmZigwKTtcbiAgICAgICAgICBpZiAoIXNvdW5kc1sncHV6emxlL3N0YXJmcnVpdC9iZ20nXS5wbGF5aW5nKCdsb29wJykpIHtcbiAgICAgICAgICAgIHNvdW5kc1sncHV6emxlL3N0YXJmcnVpdC9iZ20nXS5wbGF5KCdsb29wJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFN0YXJmcnVpdFN0YXRlLlBMQVlJTkc6XG4gICAgICAgIGNvbnN0IHRpbGVzQ2hhbmdlZCA9IGdhbWVTdGF0ZS5nZXRUaWxlc0NoYW5nZWRNYXAoKSA/PyB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0aWxlc0NoYW5nZWQ/LmdldExlbmd0aCgpKSB7XG4gICAgICAgICAgY29uc3QgbmV3VGlsZU1hcCA9IHsgLi4udGlsZU1hcCB9O1xuICAgICAgICAgIHRpbGVzQ2hhbmdlZC5mb3JFYWNoKCh0aWxlLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAodGlsZS5nZXRWYWx1ZSgpKSB7XG4gICAgICAgICAgICAgIG5ld1RpbGVNYXBbaV0gPSB0aWxlO1xuICAgICAgICAgICAgICBzb3VuZHNbJ3B1enpsZS9zdGFyZnJ1aXQvc2Z4J10ucGxheSgnc2VsZWN0VGlsZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGVsZXRlIG5ld1RpbGVNYXBbaV07XG4gICAgICAgICAgICAgIHNvdW5kc1sncHV6emxlL3N0YXJmcnVpdC9zZngnXS5wbGF5KCdjb2xsZWN0VGlsZScpO1xuICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzZXRUaWxlTWFwKG5ld1RpbGVNYXApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbmV3U2NvcmVzID0gZ2FtZVN0YXRlLmdldFNjb3JlRGlmZk1hcCgpID8/IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKG5ld1Njb3Jlcz8uZ2V0TGVuZ3RoKCkgJiYgbmV3U2NvcmVzLmhhcyhjdXJyZW50UGxheWVyKSkge1xuICAgICAgICAgIGNvbnN0IG5ld1Njb3JlRGlmZiA9IG5ld1Njb3Jlcy5nZXQoY3VycmVudFBsYXllcik7XG4gICAgICAgICAgaWYgKG5ld1Njb3JlRGlmZiAhPT0gc2NvcmVEaWZmKSB7XG4gICAgICAgICAgICBzb3VuZHNbJ3B1enpsZS9zdGFyZnJ1aXQvc2Z4J10ucGxheShcbiAgICAgICAgICAgICAgbmV3U2NvcmVEaWZmID4gMCA/ICdnYWluUG9pbnRzJyA6ICdsb3NlUG9pbnRzJ1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHNldFNjb3JlRGlmZihuZXdTY29yZURpZmYpO1xuICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gc2V0U2NvcmVEaWZmKDApLCAzMDAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdQbGF5ZXJIYW5kcyA9IGdhbWVTdGF0ZS5nZXRQbGF5ZXJIYW5kc0xpc3QoKTtcbiAgICAgICAgaWYgKG5ld1BsYXllckhhbmRzLmxlbmd0aCkge1xuICAgICAgICAgIHNldFBsYXllckhhbmRzKG5ld1BsYXllckhhbmRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnYW1lU3RhdGUuZ2V0U2NvcmUoKSAhPT0gc2NvcmUpIHtcbiAgICAgICAgICBzZXRTY29yZShnYW1lU3RhdGUuZ2V0U2NvcmUoKSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9LCBbZ2FtZVN0YXRlXSk7XG5cbiAgLy8gUGFpbnQgZnJhbWVzIG9uIHRoZSBjYW52YXMuXG4gIGNvbnN0IHJlbmRlciA9ICh0aWNrKSA9PiB7XG4gICAgaWYgKGlzTG9hZGluZyB8fCBpc1NvdW5kTG9hZGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGN0eCA9IGNhbnZhc1JlZi5jdXJyZW50LmdldENvbnRleHQoJzJkJyk7XG5cbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHNjcmVlbkRpbWVuc2lvbnMud2lkdGgsIHNjcmVlbkRpbWVuc2lvbnMuaGVpZ2h0KTtcbiAgICBjb25zdCBzdGF0ZSA9XG4gICAgICBnYW1lU3RhdGVSZWYuY3VycmVudD8uZ2V0U3RhdGUoKSA/PyBTdGFyZnJ1aXRTdGF0ZS5XQUlUSU5HX0ZPUl9TVEFSVDtcblxuICAgIGlmIChcbiAgICAgIHN0YXRlID09PSBTdGFyZnJ1aXRTdGF0ZS5XQUlUSU5HX0ZPUl9TVEFSVCB8fFxuICAgICAgaXNHYW1lT3ZlcihnYW1lU3RhdGVSZWYuY3VycmVudClcbiAgICApIHtcbiAgICAgIHJlbmRlclRpdGxlKGN0eCwgaW1hZ2VzWyd0aXRsZSddLCBzY3JlZW5EaW1lbnNpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVuZGVyQmFja2dyb3VuZChjdHgsIHNjcmVlbkRpbWVuc2lvbnMpO1xuICAgIH1cbiAgfTtcbiAgdXNlQW5pbWF0aW9uRnJhbWUocmVuZGVyLCB0aWNrUmVmLCBbc2NyZWVuRGltZW5zaW9uc10pO1xuXG4gIGNvbnN0IHN0YXRlID0gZ2FtZVN0YXRlPy5nZXRTdGF0ZSgpID8/IFN0YXJmcnVpdFN0YXRlLldBSVRJTkdfRk9SX1NUQVJUO1xuICBjb25zdCBzdGF0dXMgPVxuICAgIGdhbWVTdGF0ZT8uZ2V0QmFzZVN0YXRlKCkuZ2V0U3RhdHVzKCkgPz8gR2FtZVN0YXR1cy5XQUlUSU5HX0ZPUl9TVEFSVDtcbiAgY29uc3QgcGxheWVycyA9IGdhbWVTdGF0ZT8uZ2V0QmFzZVN0YXRlKCkuZ2V0UGxheWVyc0xpc3QoKSA/PyBbXTtcbiAgY29uc3QgdGljayA9IGdhbWVTdGF0ZT8uZ2V0QmFzZVN0YXRlKCkuZ2V0VGljaygpID8/IDA7XG5cbiAgaWYgKGlzTG9hZGluZyB8fCBpc1NvdW5kTG9hZGluZykge1xuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT1cImFicy1jZW50ZXIgd2hpdGVcIj5Mb2FkaW5nIHRpbGVzLi4uPC9kaXY+O1xuICB9XG4gIGNvbnN0IFt0aWxlV2lkdGgsIHRpbGVIZWlnaHRdID0gYm9hcmRcbiAgICA/IGdldFRpbGVTaXplKGJvYXJkLCBzY3JlZW5EaW1lbnNpb25zKVxuICAgIDogWzAsIDBdO1xuXG4gIGNvbnN0IHBsYXllckhhbmRUaWxlcyA9IHBsYXllckhhbmRzW2N1cnJlbnRQbGF5ZXJdPy5nZXRUaWxlc0xpc3QoKSA/PyBbXTtcbiAgY29uc3QgcGxheWVySGFuZCA9IEFycmF5LmZyb20oQXJyYXkoMTQpLmtleXMoKSkubWFwKFxuICAgIChpKSA9PiBwbGF5ZXJIYW5kVGlsZXNbaV0gfHwgZ2V0QmxhbmtUaWxlKClcbiAgKTtcblxuICBjb25zdCB7IGNsYXNzTmFtZTogbG9iYnlDbGFzc05hbWUsIHN0eWxlczogbG9iYnlTdHlsZXMgfSA9IGNzcy5yZXNvbHZlYFxuICAgIGRpdiB7XG4gICAgICBjb2xvcjogI2ZmZjtcbiAgICAgIHRvcDogNzUlO1xuICAgIH1cbiAgYDtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7aXNHYW1lT3ZlcihnYW1lU3RhdGUpID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2luTG9zZSBtZXNzYWdlIGNlbnRlclwiPlxuICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgIEdBTUUge3N0YXR1cyA9PT0gR2FtZVN0YXR1cy5DT01QTEVURV9XSU4gPyAnQ09NUExFVEUnIDogJ09WRVInfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90dG9tIG1lc3NhZ2UgZmxleC1jZW50ZXIgY2VudGVyXCI+XG4gICAgICAgICAgICA8aDM+WW91ciBTY29yZTwvaDM+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICB7c2NvcmUgPiAwID8gcmVuZGVyU2NvcmUoc2NvcmUsIGltYWdlc1snZG9taW5vZXMnXS5zcmMpIDogc2NvcmV9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwibWVudS1idXR0b25cIiBvbkNsaWNrPXtvblJlc3RhcnR9PlxuICAgICAgICAgICAgICBCYWNrIHRvIGxvYmJ5XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC8+XG4gICAgICApIDogc3RhdGUgPT09IFN0YXJmcnVpdFN0YXRlLldBSVRJTkdfRk9SX1NUQVJUICYmIHRpY2sgPT09IDAgPyAoXG4gICAgICAgIDxMb2JieVxuICAgICAgICAgIHBsYXllclN0YXJ0ZWQ9e3BsYXllclN0YXJ0ZWR9XG4gICAgICAgICAgaXNDb25uZWN0ZWQ9e2lzQ29ubmVjdGVkfVxuICAgICAgICAgIHBsYXllcnM9e3BsYXllcnN9XG4gICAgICAgICAgY3VycmVudFBsYXllcj17Y3VycmVudFBsYXllcn1cbiAgICAgICAgICBzdGFydEJ1dHRvbj17XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm1lbnUtYnV0dG9uXCIgb25DbGljaz17b25TdGFydEdhbWV9PlxuICAgICAgICAgICAgICBSZWFkeSB0byBzdGFydFxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbmZpcm1CdXR0b249e1xuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJtZW51LWJ1dHRvblwiIG9uQ2xpY2s9e29uU3RhcnRHYW1lfT5cbiAgICAgICAgICAgICAgU3RhcnQgZ2FtZVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlam9pbkJ1dHRvbj17XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm1lbnUtYnV0dG9uXCIgb25DbGljaz17cmVzdGFydEdhbWV9PlxuICAgICAgICAgICAgICBSZWpvaW4gbG9iYnlcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIH1cbiAgICAgICAgICByZXF1aXJlZFBsYXllcnM9ezJ9XG4gICAgICAgICAgY2xhc3NOYW1lPXtsb2JieUNsYXNzTmFtZX1cbiAgICAgICAgLz5cbiAgICAgICkgOiBzdGF0ZSA9PT0gU3RhcmZydWl0U3RhdGUuTEVWRUxfVFJBTlNJVElPTiA/IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjZW50ZXIgbWVzc2FnZVwiPlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8cD5TaHVmZmxpbmcgdGlsZXMuLi48L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSA6IHN0YXRlID09PSBTdGFyZnJ1aXRTdGF0ZS5QTEFZSU5HICYmIGJvYXJkID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtPYmplY3QuZW50cmllcyh0aWxlTWFwKS5tYXAoKFtpLCB0aWxlXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgW3gsIHldID0gZ2V0VG9wTGVmdChcbiAgICAgICAgICAgICAgdGlsZS5nZXRQb3NpdGlvbigpLFxuICAgICAgICAgICAgICBib2FyZCxcbiAgICAgICAgICAgICAgc2NyZWVuRGltZW5zaW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgdGlsZSB1aSR7dGlsZS5nZXRTZWxlY3RlZCgpID8gJyBzZWxlY3RlZCcgOiAnJ31gfVxuICAgICAgICAgICAgICAgIGRpc2FibGVkPXshc2VsZWN0YWJsZU1hcFtpXX1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PlxuICAgICAgICAgICAgICAgICAgb25TZWxlY3RUaWxlKHRpbGUuZ2V0UG9zaXRpb24oKSEsIHRpbGUuZ2V0U2VsZWN0ZWQoKSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRQb3NpdGlvbjogZ2V0VGlsZU9mZnNldCh0aWxlKSxcbiAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiB0aWxlLmdldFNlbGVjdGVkKClcbiAgICAgICAgICAgICAgICAgICAgPyBCT1JERVJfQ09MT1JbdGlsZS5nZXRTZWxlY3RlZEJ5UGxheWVyKCldXG4gICAgICAgICAgICAgICAgICAgIDogJyMwMDAnLFxuICAgICAgICAgICAgICAgICAgbGVmdDogeCxcbiAgICAgICAgICAgICAgICAgIHRvcDogeSxcbiAgICAgICAgICAgICAgICAgIHpJbmRleDpcbiAgICAgICAgICAgICAgICAgICAgKHRpbGUuZ2V0UG9zaXRpb24oKT8uZ2V0WigpID8/IDApICogMTAwICtcbiAgICAgICAgICAgICAgICAgICAgKHRpbGUuZ2V0UG9zaXRpb24oKT8uZ2V0WCgpID8/IDApLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7dGlsZS5nZXRTZWxlY3RlZCgpICYmIChcbiAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtgb3ZlcmxheSB1aSAke1xuICAgICAgICAgICAgICAgICAgICAgIENPTE9SX01BUFt0aWxlLmdldFNlbGVjdGVkQnlQbGF5ZXIoKV1cbiAgICAgICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KX1cblxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaGFuZCB1aSBmbGV4LWNlbnRlclwiPlxuICAgICAgICAgICAge3BsYXllckhhbmQubWFwKCh0aWxlLCBpKSA9PiAoXG4gICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBrZXk9e2BoYW5kLSR7aX1gfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YHRpbGUke2kgPj0gcGxheWVySGFuZFRpbGVzLmxlbmd0aCA/ICcgYmxhbmsnIDogJyd9YH1cbiAgICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBnZXRUaWxlT2Zmc2V0KHRpbGUpLFxuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICAgIHtzY29yZURpZmYgIT09IDAgJiYgKFxuICAgICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwic2NvcmUtZGlmZlwiPlxuICAgICAgICAgICAgICAgIHtzY29yZURpZmYgPj0gMFxuICAgICAgICAgICAgICAgICAgPyBgTklDRSBTQ09SRSEgKyR7c2NvcmVEaWZmfWBcbiAgICAgICAgICAgICAgICAgIDogYElOVkFMSUQgSEFORCEgJHtzY29yZURpZmZ9YH1cbiAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNjb3JlIHVpXCI+XG4gICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwiZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICAgICAgPHNwYW4+VGFyZ2V0OiB7U0NPUkVfVEhSRVNIT0xEW3BsYXllcnMubGVuZ3RoXX08L3NwYW4+XG4gICAgICAgICAgICAgIFNjb3JlOiB7c2NvcmV9eycgJ31cbiAgICAgICAgICAgICAge3Njb3JlID49IFNDT1JFX1RIUkVTSE9MRFtwbGF5ZXJzLmxlbmd0aF0gPyAnKFRhcmdldCBtZXQhKScgOiAnJ31cbiAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSBpbnN0cnVjdGlvbnNcIj5cbiAgICAgICAgICAgIHtzY29yZSA+PSBTQ09SRV9USFJFU0hPTERbcGxheWVycy5sZW5ndGhdICYmIChcbiAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJtZW51LWJ1dHRvblwiIG9uQ2xpY2s9e29uRW5kR2FtZX0+XG4gICAgICAgICAgICAgICAgV2luIEdhbWUhXG4gICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwibWVudS1idXR0b25cIiBvbkNsaWNrPXtvblJlZGVhbH0+XG4gICAgICAgICAgICAgIFJlZGVhbCBib2FyZFxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1lbnUtYnV0dG9uXCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gc2V0U2hvd0luc3RydWN0aW9ucyh0cnVlKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgUnVsZXNcbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgPENhcmRNb2RhbFxuICAgICAgICAgICAgaXNPcGVuPXtzaG93SW5zdHJ1Y3Rpb25zfVxuICAgICAgICAgICAgb25SZXF1ZXN0Q2xvc2U9eygpID0+IHNldFNob3dJbnN0cnVjdGlvbnMoZmFsc2UpfVxuICAgICAgICAgICAgY29udGVudExhYmVsPVwiUnVsZXNcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxSdWxlcyBzY3JlZW5EaW1lbnNpb25zPXtzY3JlZW5EaW1lbnNpb25zfSAvPlxuICAgICAgICAgIDwvQ2FyZE1vZGFsPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiBudWxsfVxuXG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIC5jZW50ZXIge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgLmJvdHRvbSB7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICB0b3A6IDYwJTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5ib3R0b20gLm1lbnUtYnV0dG9uIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMTJweDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5tZXNzYWdlIHtcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgICBmb250LXNpemU6IDI1cHg7XG4gICAgICAgIH1cblxuICAgICAgICAud2luTG9zZS5tZXNzYWdlIHtcbiAgICAgICAgICBjb2xvcjogJHtzdGF0dXMgPT09IEdhbWVTdGF0dXMuQ09NUExFVEVfV0lOID8gJyNjY2ZmY2MnIDogJ3JlZCd9O1xuICAgICAgICAgIGZvbnQtc2l6ZTogNTBweDtcbiAgICAgICAgICB0b3A6IDIwJTtcbiAgICAgICAgfVxuXG4gICAgICAgIC51aSB7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgLm1lbnUtYnV0dG9uIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiAjZmZmO1xuICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgICBoZWlnaHQ6IDM2cHg7XG4gICAgICAgICAgcGFkZGluZzogMCAxMHB4O1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogNHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLm1lbnUtYnV0dG9uOmhvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7XG4gICAgICAgIH1cblxuICAgICAgICAudGlsZSB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKCR7aW1hZ2VzWyd0aWxlJ10uc3JjfSkgIWltcG9ydGFudDtcbiAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgd2lkdGg6ICR7VElMRV9XSURUSH1weDtcbiAgICAgICAgICBoZWlnaHQ6ICR7VElMRV9IRUlHSFR9cHg7XG4gICAgICAgICAgdHJhbnNmb3JtOiBzY2FsZShcbiAgICAgICAgICAgICR7dGlsZVdpZHRoIC8gVElMRV9XSURUSCAvIFRJTEVfT1ZFUkxBUF9SQVRJT30sXG4gICAgICAgICAgICAke3RpbGVIZWlnaHQgLyBUSUxFX0hFSUdIVCAvIFRJTEVfT1ZFUkxBUF9SQVRJT31cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLnRpbGUuYmxhbmsge1xuICAgICAgICAgIG9wYWNpdHk6IC41O1xuICAgICAgICB9XG5cbiAgICAgICAgLnRpbGU6bm90KC5zZWxlY3RlZCk6aG92ZXIge1xuICAgICAgICAgIGZpbHRlcjogc2VwaWEoNTAlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC50aWxlOmRpc2FibGVkIHtcbiAgICAgICAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICAgICAgICB9XG5cbiAgICAgICAgLnRpbGUuc2VsZWN0ZWQge1xuICAgICAgICAgIGJvcmRlcjogM3B4IHNvbGlkICMwMDA7XG4gICAgICAgIH1cblxuICAgICAgICAudGlsZS5zZWxlY3RlZCAub3ZlcmxheSB7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMTZweDtcbiAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgcmlnaHQ6IDA7XG4gICAgICAgICAgb3BhY2l0eTogMzAlO1xuICAgICAgICB9XG5cbiAgICAgICAgLmhhbmQge1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIGJvdHRvbTogMCU7XG4gICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICByaWdodDogMDtcbiAgICAgICAgICB6LWluZGV4OiAxMDAwO1xuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWShcbiAgICAgICAgICAgICR7KDEgLSB0aWxlSGVpZ2h0IC8gVElMRV9IRUlHSFQgLyBUSUxFX09WRVJMQVBfUkFUSU8pICogNTB9JVxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAuaGFuZCAudGlsZSB7XG4gICAgICAgICAgbWFyZ2luOiAwIC0ke1xuICAgICAgICAgICAgKCgxIC0gdGlsZVdpZHRoIC8gVElMRV9XSURUSCAvIFRJTEVfT1ZFUkxBUF9SQVRJTykgKiBUSUxFX1dJRFRIKSAvIDJcbiAgICAgICAgICB9cHg7XG4gICAgICAgIH1cblxuICAgICAgICAuc2NvcmUge1xuICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgdG9wOiAwJTtcbiAgICAgICAgICBsZWZ0OiA1JTtcbiAgICAgICAgICB6LWluZGV4OiAxMDAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLnNjb3JlIGgzIHtcbiAgICAgICAgICBtYXJnaW46IDhweCAxNnB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLnNjb3JlIHNwYW4ge1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5zY29yZS1kaWZmIHtcbiAgICAgICAgICBjb2xvcjogJHtzY29yZURpZmYgPiAwID8gJyNmZmYnIDogJyNjMzMnfTtcbiAgICAgICAgICBvcGFjaXR5OiAwO1xuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC04ZGVnKTtcbiAgICAgICAgICBhbmltYXRpb24gM3MgZWFzZS1pbi1vdXQgYW5pbWF0ZS1zY29yZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5pbnN0cnVjdGlvbnMge1xuICAgICAgICAgIHRvcDogOHB4O1xuICAgICAgICAgIHJpZ2h0OiAxMCU7XG4gICAgICAgICAgei1pbmRleDogMTAwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIEBrZXlmcmFtZXMgYW5pbWF0ZS1zY29yZSB7XG4gICAgICAgICAgZnJvbSB7XG4gICAgICAgICAgICBvcGFjaXR5OiAxO1xuICAgICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApIHJvdGF0ZSgtOGRlZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdG8ge1xuICAgICAgICAgICAgb3BhY2l0eTogMC4wMTtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMjBweCkgcm90YXRlKC04ZGVnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIGB9PC9zdHlsZT5cbiAgICAgIHtsb2JieVN0eWxlc31cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgR2FtZTogU3RhcmZydWl0R2FtZSxcbiAgU3RhdGU6IFN0YXJmcnVpdEdhbWVTdGF0ZSxcbn07XG4iXX0= */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/starfruit.tsx */\")), lobbyStyles);\n};\n\n_s(StarfruitGame, \"dzOpH3a804Di90nJ3BrXaBW1s2Y=\", false, function () {\n  return [utils_assets__WEBPACK_IMPORTED_MODULE_12__[\"useImages\"], utils_assets__WEBPACK_IMPORTED_MODULE_12__[\"useSounds\"], utils_animation__WEBPACK_IMPORTED_MODULE_11__[\"useAnimationFrame\"]];\n});\n\n_c = StarfruitGame;\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  Game: StarfruitGame,\n  State: schema_protos_starfruit_pb__WEBPACK_IMPORTED_MODULE_6__[\"StarfruitGameState\"]\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"StarfruitGame\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/groupsolve/starfruit.tsx\n");

/***/ }),

/***/ "./components/groupsolve/starfruit_rules.tsx":
/*!***************************************************!*\
  !*** ./components/groupsolve/starfruit_rules.tsx ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_responsive_carousel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-responsive-carousel */ \"./node_modules/react-responsive-carousel/lib/es/index.js\");\n/* harmony import */ var react_responsive_carousel__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_responsive_carousel__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var assets_puzzle_starfruit_tile_png__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! assets/puzzle/starfruit/tile.png */ \"./assets/puzzle/starfruit/tile.png\");\n/* harmony import */ var assets_puzzle_starfruit_tile_png__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(assets_puzzle_starfruit_tile_png__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var assets_puzzle_starfruit_sequence_png__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! assets/puzzle/starfruit/sequence.png */ \"./assets/puzzle/starfruit/sequence.png\");\n/* harmony import */ var assets_puzzle_starfruit_sequence_png__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(assets_puzzle_starfruit_sequence_png__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var assets_puzzle_starfruit_triple_png__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! assets/puzzle/starfruit/triple.png */ \"./assets/puzzle/starfruit/triple.png\");\n/* harmony import */ var assets_puzzle_starfruit_triple_png__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(assets_puzzle_starfruit_triple_png__WEBPACK_IMPORTED_MODULE_5__);\nvar _this = undefined,\n    _jsxFileName = \"/vagrant/client/components/groupsolve/starfruit_rules.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement;\n\n\n\n\n\n\n\nvar Rules = function Rules(_ref) {\n  _s();\n\n  var screenDimensions = _ref.screenDimensions;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_1__[\"useState\"])(0),\n      page = _useState[0],\n      setPage = _useState[1];\n\n  var _styles$className = {\n    styles: __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {\n      id: \"2705139624\",\n      dynamic: [screenDimensions.width - 16, screenDimensions.height - 16, screenDimensions.height * 0.9]\n    }, \".ReactModal__Content{background:rgb(255,255,240) !important;margin-top:16px;max-width:\".concat(screenDimensions.width - 16, \"px !important;max-height:\").concat(screenDimensions.height - 16, \"px !important;}.carousel .control-dots{bottom:12px;}.carousel .control-next.control-arrow{background:rgba(0,0,0,0.2);right:12px;}.carousel .control-prev.control-arrow{background:rgba(0,0,0,0.2);}div.__jsx-style-dynamic-selector{height:\").concat(screenDimensions.height * 0.9, \"px;padding:20px;width:100%;}.carousel-slider,.carousel .slider-wrapper,.carousel .slider,.carousel .slide{height:100%;width:100%;}.carousel .slide{background:none;overflow-y:auto;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/starfruit_rules.tsx */\")),\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a.dynamic([[\"2705139624\", [screenDimensions.width - 16, screenDimensions.height - 16, screenDimensions.height * 0.9]]])\n  },\n      className = _styles$className.className,\n      carouselStyles = _styles$className.styles;\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_1___default.a.Fragment, null, __jsx(react_responsive_carousel__WEBPACK_IMPORTED_MODULE_2__[\"Carousel\"], {\n    className: className,\n    showStatus: false,\n    selectedItem: page,\n    onChange: function onChange(value) {\n      return void setPage(value);\n    },\n    renderThumbs: function renderThumbs() {\n      return [];\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    key: \"rules\",\n    className: \"jsx-2997570792\" + \" \" + \"page\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, \"Basic Rules\"), \"This game combines Japanese Mahjong and Mahjong Solitaire. Your goal is to match tiles of the same suit and value. You can click on any tile that is open on the left or right, and not beneath another tile. For each pair of tiles you match, one tile of that type will appear in your hand. Each player's hand will be scored when it reaches 14 tiles.\", __jsx(\"p\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, \"For scoring purposes, each valid hand you make in this game will be worth 1 point. If your hand satifies an advanced constraint, it will be worth 2 points. Any invalid hand will score -1 point.\"), __jsx(\"h2\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, \"Rules of Japanese Mahjong\"), __jsx(\"p\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, \"The tiles of Mahjong are divided into the following:\"), __jsx(\"ul\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, __jsx(\"li\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, \"Three suits of tiles, as follows:\", __jsx(\"ul\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  }, __jsx(\"li\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, \"So (\\u7D22\\u5B50): Bamboo tiles, numbered from 1 to 9\"), __jsx(\"li\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, \"Man (\\u842C\\u5B50): Kanji tiles, numbered 1 to 9\"), __jsx(\"li\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  }, \"Pin (\\u7B52\\u5B50): Circle tiles, numbered from 1 to 9\"))), __jsx(\"li\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Honor tiles, divided into two categories:\", __jsx(\"ul\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }, __jsx(\"li\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }\n  }, \"Winds: four cardinal directions\"), __jsx(\"li\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, \"Dragons: white, green, and red\")))), __jsx(\"img\", {\n    src: assets_puzzle_starfruit_tile_png__WEBPACK_IMPORTED_MODULE_3___default.a,\n    alt: \"list of tiles as described above, respectively\",\n    className: \"jsx-2997570792\" + \" \" + \"tiles\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }), __jsx(\"p\", {\n    className: \"jsx-2997570792\" + \" \" + \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, __jsx(\"i\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }, \"List of tiles as described above, respectively\")), __jsx(\"h3\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }, \"Important Definitions\"), __jsx(\"p\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, \"A valid hand consists of 14 tiles. With few exceptions, all valid hands must have 4 sets of three and a pair, with each tile contributing to exactly one of the sets or a pair:\"), __jsx(\"p\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }, \"These sets of three can come in two forms:\"), __jsx(\"ul\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, __jsx(\"li\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, \"A \", __jsx(\"em\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 17\n    }\n  }, \"sequence\"), \" is a set of consecutive numbers of the same suit.\", __jsx(\"div\", {\n    className: \"jsx-2997570792\" + \" \" + \"flex-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 15\n    }\n  }, __jsx(\"img\", {\n    alt: \"Sequence of Bamboo tiles 2, 3, 4\",\n    src: assets_puzzle_starfruit_sequence_png__WEBPACK_IMPORTED_MODULE_4___default.a,\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }))), __jsx(\"li\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, \"A \", __jsx(\"em\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 17\n    }\n  }, \"triple\"), \" is a set of 3 identical tiles (same number and same suit).\", __jsx(\"div\", {\n    className: \"jsx-2997570792\" + \" \" + \"flex-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 15\n    }\n  }, __jsx(\"img\", {\n    alt: \"Triple of Kanji 2 tiles\",\n    src: assets_puzzle_starfruit_triple_png__WEBPACK_IMPORTED_MODULE_5___default.a,\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  })))), __jsx(\"p\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, \"(There is 1 exception to this rule, described in the list of advanced hands. It is not needed to succeed in the game but is just a variant that also represents a valid hand.)\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      return void setPage(1);\n    },\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }\n  }, \"Next page\")), __jsx(\"div\", {\n    key: \"table-advanced\",\n    className: \"jsx-2997570792\" + \" \" + \"page\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 9\n    }\n  }, __jsx(\"h3\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, \"Advanced Hands\"), __jsx(\"table\", {\n    className: \"jsx-2997570792\" + \" \" + \"bordered table\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }, __jsx(\"thead\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, __jsx(\"tr\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, __jsx(\"th\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, \"Japanese name\"), __jsx(\"th\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  }, \"English name\"), __jsx(\"th\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 17\n    }\n  }, \"English description\"))), __jsx(\"tbody\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, __jsx(\"tr\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, \"Kokushi Musou\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 17\n    }\n  }, \"Thirteen Orphans\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, \"One of two \\\"special\\\" hands in that it does not require 4 sets and a pair. Hand consists of the 1 and 9 of each suit, plus 1 of each wind and one of each dragon, plus one more terminal or honor\")), __jsx(\"tr\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }, \"Suuankou\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 17\n    }\n  }, \"Four triplets\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 17\n    }\n  }, \"Hand contains four triples\")), __jsx(\"tr\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 17\n    }\n  }, \"Daisangen\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 17\n    }\n  }, \"Big Three Dragons\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }, \"Hand contains triples of each dragon\")), __jsx(\"tr\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 17\n    }\n  }, \"Tsuuiisou\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 17\n    }\n  }, \"All Honors\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, \"Hand contains only honor tiles\")), __jsx(\"tr\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 17\n    }\n  }, \"Shousuushii\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 17\n    }\n  }, \"Small 4 winds\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }, \"Hand contains a triple of three winds, and a pair of the last wind\")), __jsx(\"tr\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 17\n    }\n  }, \"Daisuushii\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }, \"Large 4 winds\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }\n  }, \"Hand contains a triple each of the four winds\")), __jsx(\"tr\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 17\n    }\n  }, \"Chinroutou\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }\n  }, \"All terminals\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }, \"Hand contains only 1s and 9s\")), __jsx(\"tr\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  }, \"Ryuuiisou\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }\n  }, \"All green\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 17\n    }\n  }, \"Hand contains only green tiles. The tiles considered green are the 2,3,4,6, and 8 of bamboo, and the green dragon.\")), __jsx(\"tr\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 15\n    }\n  }, __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 17\n    }\n  }, \"Chuuren Poutou\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  }, \"Nine Gates\"), __jsx(\"td\", {\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 17\n    }\n  }, \"Hand contains the numbers 1112345678999 of any suit, plus one more number in that suit. So named because any added tile can make a valid hand.\")))), __jsx(\"button\", {\n    onClick: function onClick() {\n      return void setPage(0);\n    },\n    className: \"jsx-2997570792\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }, \"Previous page\"))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_0___default.a, {\n    id: \"2997570792\",\n    __self: _this\n  }, \".page.jsx-2997570792{padding:0 20px 20px;}button.jsx-2997570792{font-size:20px;margin:20px 12px;}p.jsx-2997570792:not(.center),ul.jsx-2997570792:not(.center){text-align:left;}.flex-center.jsx-2997570792{margin:8px 0;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}img.jsx-2997570792{max-height:80px;width:initial !important;}img.tiles.jsx-2997570792{max-height:320px;padding:8px 0;}td.jsx-2997570792 img.jsx-2997570792{max-height:60px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/starfruit_rules.tsx */\"), carouselStyles);\n};\n\n_s(Rules, \"54dVtaqv/8WouJ+rx2t67oLHEmc=\");\n\n_c = Rules;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Rules);\n\nvar _c;\n\n$RefreshReg$(_c, \"Rules\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/groupsolve/starfruit_rules.tsx\n");

/***/ }),

/***/ "./schema/protos/starfruit_pb.js":
/*!***************************************!*\
  !*** ./schema/protos/starfruit_pb.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {// source: starfruit.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = __webpack_require__(/*! google-protobuf */ \"./node_modules/google-protobuf/google-protobuf.js\");\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar game_pb = __webpack_require__(/*! ./game_pb.js */ \"./schema/protos/game_pb.js\");\n\ngoog.object.extend(proto, game_pb);\n\nvar math_pb = __webpack_require__(/*! ./math_pb.js */ \"./schema/protos/math_pb.js\");\n\ngoog.object.extend(proto, math_pb);\ngoog.exportSymbol('proto.MahjongBoard', null, global);\ngoog.exportSymbol('proto.MahjongTile', null, global);\ngoog.exportSymbol('proto.PlayerHand', null, global);\ngoog.exportSymbol('proto.StarfruitGameAction', null, global);\ngoog.exportSymbol('proto.StarfruitGameAction.ActionCase', null, global);\ngoog.exportSymbol('proto.StarfruitGameState', null, global);\ngoog.exportSymbol('proto.StarfruitGameState.StarfruitState', null, global);\ngoog.exportSymbol('proto.TileType', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.MahjongTile = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.MahjongTile, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.MahjongTile.displayName = 'proto.MahjongTile';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.MahjongBoard = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.MahjongBoard.repeatedFields_, null);\n};\n\ngoog.inherits(proto.MahjongBoard, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.MahjongBoard.displayName = 'proto.MahjongBoard';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.PlayerHand = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.PlayerHand.repeatedFields_, null);\n};\n\ngoog.inherits(proto.PlayerHand, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.PlayerHand.displayName = 'proto.PlayerHand';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.StarfruitGameState = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.StarfruitGameState.repeatedFields_, null);\n};\n\ngoog.inherits(proto.StarfruitGameState, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.StarfruitGameState.displayName = 'proto.StarfruitGameState';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.StarfruitGameAction = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.StarfruitGameAction.oneofGroups_);\n};\n\ngoog.inherits(proto.StarfruitGameAction, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.StarfruitGameAction.displayName = 'proto.StarfruitGameAction';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.MahjongTile.prototype.toObject = function (opt_includeInstance) {\n    return proto.MahjongTile.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.MahjongTile} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.MahjongTile.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      value: jspb.Message.getFieldWithDefault(msg, 1, 0),\n      type: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      position: (f = msg.getPosition()) && math_pb.Coordinate.toObject(includeInstance, f),\n      selected: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),\n      selectedByPlayer: jspb.Message.getFieldWithDefault(msg, 5, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.MahjongTile}\n */\n\n\nproto.MahjongTile.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.MahjongTile();\n  return proto.MahjongTile.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.MahjongTile} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.MahjongTile}\n */\n\n\nproto.MahjongTile.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setValue(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.TileType} */\n        reader.readEnum();\n        msg.setType(value);\n        break;\n\n      case 3:\n        var value = new math_pb.Coordinate();\n        reader.readMessage(value, math_pb.Coordinate.deserializeBinaryFromReader);\n        msg.setPosition(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setSelected(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {!proto.PlayerColor} */\n        reader.readEnum();\n        msg.setSelectedByPlayer(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.MahjongTile.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.MahjongTile.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.MahjongTile} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.MahjongTile.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getValue();\n\n  if (f !== 0) {\n    writer.writeInt32(1, f);\n  }\n\n  f = message.getType();\n\n  if (f !== 0.0) {\n    writer.writeEnum(2, f);\n  }\n\n  f = message.getPosition();\n\n  if (f != null) {\n    writer.writeMessage(3, f, math_pb.Coordinate.serializeBinaryToWriter);\n  }\n\n  f = message.getSelected();\n\n  if (f) {\n    writer.writeBool(4, f);\n  }\n\n  f = message.getSelectedByPlayer();\n\n  if (f !== 0.0) {\n    writer.writeEnum(5, f);\n  }\n};\n/**\n * optional int32 value = 1;\n * @return {number}\n */\n\n\nproto.MahjongTile.prototype.getValue = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.MahjongTile} returns this\n */\n\n\nproto.MahjongTile.prototype.setValue = function (value) {\n  return jspb.Message.setProto3IntField(this, 1, value);\n};\n/**\n * optional TileType type = 2;\n * @return {!proto.TileType}\n */\n\n\nproto.MahjongTile.prototype.getType = function () {\n  return (\n    /** @type {!proto.TileType} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {!proto.TileType} value\n * @return {!proto.MahjongTile} returns this\n */\n\n\nproto.MahjongTile.prototype.setType = function (value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n/**\n * optional Coordinate position = 3;\n * @return {?proto.Coordinate}\n */\n\n\nproto.MahjongTile.prototype.getPosition = function () {\n  return (\n    /** @type{?proto.Coordinate} */\n    jspb.Message.getWrapperField(this, math_pb.Coordinate, 3)\n  );\n};\n/**\n * @param {?proto.Coordinate|undefined} value\n * @return {!proto.MahjongTile} returns this\n*/\n\n\nproto.MahjongTile.prototype.setPosition = function (value) {\n  return jspb.Message.setWrapperField(this, 3, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.MahjongTile} returns this\n */\n\n\nproto.MahjongTile.prototype.clearPosition = function () {\n  return this.setPosition(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.MahjongTile.prototype.hasPosition = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * optional bool selected = 4;\n * @return {boolean}\n */\n\n\nproto.MahjongTile.prototype.getSelected = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 4, false)\n  );\n};\n/**\n * @param {boolean} value\n * @return {!proto.MahjongTile} returns this\n */\n\n\nproto.MahjongTile.prototype.setSelected = function (value) {\n  return jspb.Message.setProto3BooleanField(this, 4, value);\n};\n/**\n * optional PlayerColor selected_by_player = 5;\n * @return {!proto.PlayerColor}\n */\n\n\nproto.MahjongTile.prototype.getSelectedByPlayer = function () {\n  return (\n    /** @type {!proto.PlayerColor} */\n    jspb.Message.getFieldWithDefault(this, 5, 0)\n  );\n};\n/**\n * @param {!proto.PlayerColor} value\n * @return {!proto.MahjongTile} returns this\n */\n\n\nproto.MahjongTile.prototype.setSelectedByPlayer = function (value) {\n  return jspb.Message.setProto3EnumField(this, 5, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.MahjongBoard.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.MahjongBoard.prototype.toObject = function (opt_includeInstance) {\n    return proto.MahjongBoard.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.MahjongBoard} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.MahjongBoard.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      tilesList: jspb.Message.toObjectList(msg.getTilesList(), proto.MahjongTile.toObject, includeInstance),\n      rows: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      cols: jspb.Message.getFieldWithDefault(msg, 3, 0),\n      layers: jspb.Message.getFieldWithDefault(msg, 4, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.MahjongBoard}\n */\n\n\nproto.MahjongBoard.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.MahjongBoard();\n  return proto.MahjongBoard.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.MahjongBoard} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.MahjongBoard}\n */\n\n\nproto.MahjongBoard.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.MahjongTile();\n        reader.readMessage(value, proto.MahjongTile.deserializeBinaryFromReader);\n        msg.addTiles(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setRows(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setCols(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setLayers(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.MahjongBoard.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.MahjongBoard.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.MahjongBoard} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.MahjongBoard.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getTilesList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(1, f, proto.MahjongTile.serializeBinaryToWriter);\n  }\n\n  f = message.getRows();\n\n  if (f !== 0) {\n    writer.writeInt32(2, f);\n  }\n\n  f = message.getCols();\n\n  if (f !== 0) {\n    writer.writeInt32(3, f);\n  }\n\n  f = message.getLayers();\n\n  if (f !== 0) {\n    writer.writeInt32(4, f);\n  }\n};\n/**\n * repeated MahjongTile tiles = 1;\n * @return {!Array<!proto.MahjongTile>}\n */\n\n\nproto.MahjongBoard.prototype.getTilesList = function () {\n  return (\n    /** @type{!Array<!proto.MahjongTile>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.MahjongTile, 1)\n  );\n};\n/**\n * @param {!Array<!proto.MahjongTile>} value\n * @return {!proto.MahjongBoard} returns this\n*/\n\n\nproto.MahjongBoard.prototype.setTilesList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n/**\n * @param {!proto.MahjongTile=} opt_value\n * @param {number=} opt_index\n * @return {!proto.MahjongTile}\n */\n\n\nproto.MahjongBoard.prototype.addTiles = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MahjongTile, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.MahjongBoard} returns this\n */\n\n\nproto.MahjongBoard.prototype.clearTilesList = function () {\n  return this.setTilesList([]);\n};\n/**\n * optional int32 rows = 2;\n * @return {number}\n */\n\n\nproto.MahjongBoard.prototype.getRows = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.MahjongBoard} returns this\n */\n\n\nproto.MahjongBoard.prototype.setRows = function (value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n/**\n * optional int32 cols = 3;\n * @return {number}\n */\n\n\nproto.MahjongBoard.prototype.getCols = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.MahjongBoard} returns this\n */\n\n\nproto.MahjongBoard.prototype.setCols = function (value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n/**\n * optional int32 layers = 4;\n * @return {number}\n */\n\n\nproto.MahjongBoard.prototype.getLayers = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 4, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.MahjongBoard} returns this\n */\n\n\nproto.MahjongBoard.prototype.setLayers = function (value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.PlayerHand.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.PlayerHand.prototype.toObject = function (opt_includeInstance) {\n    return proto.PlayerHand.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.PlayerHand} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.PlayerHand.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      tilesList: jspb.Message.toObjectList(msg.getTilesList(), proto.MahjongTile.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.PlayerHand}\n */\n\n\nproto.PlayerHand.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.PlayerHand();\n  return proto.PlayerHand.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.PlayerHand} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.PlayerHand}\n */\n\n\nproto.PlayerHand.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.MahjongTile();\n        reader.readMessage(value, proto.MahjongTile.deserializeBinaryFromReader);\n        msg.addTiles(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.PlayerHand.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.PlayerHand.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.PlayerHand} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.PlayerHand.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getTilesList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(1, f, proto.MahjongTile.serializeBinaryToWriter);\n  }\n};\n/**\n * repeated MahjongTile tiles = 1;\n * @return {!Array<!proto.MahjongTile>}\n */\n\n\nproto.PlayerHand.prototype.getTilesList = function () {\n  return (\n    /** @type{!Array<!proto.MahjongTile>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.MahjongTile, 1)\n  );\n};\n/**\n * @param {!Array<!proto.MahjongTile>} value\n * @return {!proto.PlayerHand} returns this\n*/\n\n\nproto.PlayerHand.prototype.setTilesList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n/**\n * @param {!proto.MahjongTile=} opt_value\n * @param {number=} opt_index\n * @return {!proto.MahjongTile}\n */\n\n\nproto.PlayerHand.prototype.addTiles = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.MahjongTile, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.PlayerHand} returns this\n */\n\n\nproto.PlayerHand.prototype.clearTilesList = function () {\n  return this.setTilesList([]);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.StarfruitGameState.repeatedFields_ = [5];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.StarfruitGameState.prototype.toObject = function (opt_includeInstance) {\n    return proto.StarfruitGameState.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.StarfruitGameState} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.StarfruitGameState.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      baseState: (f = msg.getBaseState()) && game_pb.GameState.toObject(includeInstance, f),\n      state: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      board: (f = msg.getBoard()) && proto.MahjongBoard.toObject(includeInstance, f),\n      tilesChangedMap: (f = msg.getTilesChangedMap()) ? f.toObject(includeInstance, proto.MahjongTile.toObject) : [],\n      playerHandsList: jspb.Message.toObjectList(msg.getPlayerHandsList(), proto.PlayerHand.toObject, includeInstance),\n      scoreDiffMap: (f = msg.getScoreDiffMap()) ? f.toObject(includeInstance, undefined) : [],\n      score: jspb.Message.getFieldWithDefault(msg, 7, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.StarfruitGameState}\n */\n\n\nproto.StarfruitGameState.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.StarfruitGameState();\n  return proto.StarfruitGameState.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.StarfruitGameState} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.StarfruitGameState}\n */\n\n\nproto.StarfruitGameState.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new game_pb.GameState();\n        reader.readMessage(value, game_pb.GameState.deserializeBinaryFromReader);\n        msg.setBaseState(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.StarfruitGameState.StarfruitState} */\n        reader.readEnum();\n        msg.setState(value);\n        break;\n\n      case 3:\n        var value = new proto.MahjongBoard();\n        reader.readMessage(value, proto.MahjongBoard.deserializeBinaryFromReader);\n        msg.setBoard(value);\n        break;\n\n      case 4:\n        var value = msg.getTilesChangedMap();\n        reader.readMessage(value, function (message, reader) {\n          jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readMessage, proto.MahjongTile.deserializeBinaryFromReader, 0, new proto.MahjongTile());\n        });\n        break;\n\n      case 5:\n        var value = new proto.PlayerHand();\n        reader.readMessage(value, proto.PlayerHand.deserializeBinaryFromReader);\n        msg.addPlayerHands(value);\n        break;\n\n      case 6:\n        var value = msg.getScoreDiffMap();\n        reader.readMessage(value, function (message, reader) {\n          jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readInt32, jspb.BinaryReader.prototype.readInt32, null, 0, 0);\n        });\n        break;\n\n      case 7:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setScore(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.StarfruitGameState.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.StarfruitGameState.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.StarfruitGameState} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.StarfruitGameState.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getBaseState();\n\n  if (f != null) {\n    writer.writeMessage(1, f, game_pb.GameState.serializeBinaryToWriter);\n  }\n\n  f = message.getState();\n\n  if (f !== 0.0) {\n    writer.writeEnum(2, f);\n  }\n\n  f = message.getBoard();\n\n  if (f != null) {\n    writer.writeMessage(3, f, proto.MahjongBoard.serializeBinaryToWriter);\n  }\n\n  f = message.getTilesChangedMap(true);\n\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeMessage, proto.MahjongTile.serializeBinaryToWriter);\n  }\n\n  f = message.getPlayerHandsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(5, f, proto.PlayerHand.serializeBinaryToWriter);\n  }\n\n  f = message.getScoreDiffMap(true);\n\n  if (f && f.getLength() > 0) {\n    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeInt32, jspb.BinaryWriter.prototype.writeInt32);\n  }\n\n  f = message.getScore();\n\n  if (f !== 0) {\n    writer.writeInt32(7, f);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.StarfruitGameState.StarfruitState = {\n  WAITING_FOR_START: 0,\n  PLAYING: 1,\n  LEVEL_TRANSITION: 2\n};\n/**\n * optional GameState base_state = 1;\n * @return {?proto.GameState}\n */\n\nproto.StarfruitGameState.prototype.getBaseState = function () {\n  return (\n    /** @type{?proto.GameState} */\n    jspb.Message.getWrapperField(this, game_pb.GameState, 1)\n  );\n};\n/**\n * @param {?proto.GameState|undefined} value\n * @return {!proto.StarfruitGameState} returns this\n*/\n\n\nproto.StarfruitGameState.prototype.setBaseState = function (value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.StarfruitGameState} returns this\n */\n\n\nproto.StarfruitGameState.prototype.clearBaseState = function () {\n  return this.setBaseState(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.StarfruitGameState.prototype.hasBaseState = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional StarfruitState state = 2;\n * @return {!proto.StarfruitGameState.StarfruitState}\n */\n\n\nproto.StarfruitGameState.prototype.getState = function () {\n  return (\n    /** @type {!proto.StarfruitGameState.StarfruitState} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {!proto.StarfruitGameState.StarfruitState} value\n * @return {!proto.StarfruitGameState} returns this\n */\n\n\nproto.StarfruitGameState.prototype.setState = function (value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n/**\n * optional MahjongBoard board = 3;\n * @return {?proto.MahjongBoard}\n */\n\n\nproto.StarfruitGameState.prototype.getBoard = function () {\n  return (\n    /** @type{?proto.MahjongBoard} */\n    jspb.Message.getWrapperField(this, proto.MahjongBoard, 3)\n  );\n};\n/**\n * @param {?proto.MahjongBoard|undefined} value\n * @return {!proto.StarfruitGameState} returns this\n*/\n\n\nproto.StarfruitGameState.prototype.setBoard = function (value) {\n  return jspb.Message.setWrapperField(this, 3, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.StarfruitGameState} returns this\n */\n\n\nproto.StarfruitGameState.prototype.clearBoard = function () {\n  return this.setBoard(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.StarfruitGameState.prototype.hasBoard = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * map<int32, MahjongTile> tiles_changed = 4;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<number,!proto.MahjongTile>}\n */\n\n\nproto.StarfruitGameState.prototype.getTilesChangedMap = function (opt_noLazyCreate) {\n  return (\n    /** @type {!jspb.Map<number,!proto.MahjongTile>} */\n    jspb.Message.getMapField(this, 4, opt_noLazyCreate, proto.MahjongTile)\n  );\n};\n/**\n * Clears values from the map. The map will be non-null.\n * @return {!proto.StarfruitGameState} returns this\n */\n\n\nproto.StarfruitGameState.prototype.clearTilesChangedMap = function () {\n  this.getTilesChangedMap().clear();\n  return this;\n};\n/**\n * repeated PlayerHand player_hands = 5;\n * @return {!Array<!proto.PlayerHand>}\n */\n\n\nproto.StarfruitGameState.prototype.getPlayerHandsList = function () {\n  return (\n    /** @type{!Array<!proto.PlayerHand>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.PlayerHand, 5)\n  );\n};\n/**\n * @param {!Array<!proto.PlayerHand>} value\n * @return {!proto.StarfruitGameState} returns this\n*/\n\n\nproto.StarfruitGameState.prototype.setPlayerHandsList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n/**\n * @param {!proto.PlayerHand=} opt_value\n * @param {number=} opt_index\n * @return {!proto.PlayerHand}\n */\n\n\nproto.StarfruitGameState.prototype.addPlayerHands = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.PlayerHand, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.StarfruitGameState} returns this\n */\n\n\nproto.StarfruitGameState.prototype.clearPlayerHandsList = function () {\n  return this.setPlayerHandsList([]);\n};\n/**\n * map<int32, int32> score_diff = 6;\n * @param {boolean=} opt_noLazyCreate Do not create the map if\n * empty, instead returning `undefined`\n * @return {!jspb.Map<number,number>}\n */\n\n\nproto.StarfruitGameState.prototype.getScoreDiffMap = function (opt_noLazyCreate) {\n  return (\n    /** @type {!jspb.Map<number,number>} */\n    jspb.Message.getMapField(this, 6, opt_noLazyCreate, null)\n  );\n};\n/**\n * Clears values from the map. The map will be non-null.\n * @return {!proto.StarfruitGameState} returns this\n */\n\n\nproto.StarfruitGameState.prototype.clearScoreDiffMap = function () {\n  this.getScoreDiffMap().clear();\n  return this;\n};\n/**\n * optional int32 score = 7;\n * @return {number}\n */\n\n\nproto.StarfruitGameState.prototype.getScore = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 7, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.StarfruitGameState} returns this\n */\n\n\nproto.StarfruitGameState.prototype.setScore = function (value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\n\n\nproto.StarfruitGameAction.oneofGroups_ = [[2, 3, 4]];\n/**\n * @enum {number}\n */\n\nproto.StarfruitGameAction.ActionCase = {\n  ACTION_NOT_SET: 0,\n  SELECT_TILE: 2,\n  REDEAL: 3,\n  END_GAME: 4\n};\n/**\n * @return {proto.StarfruitGameAction.ActionCase}\n */\n\nproto.StarfruitGameAction.prototype.getActionCase = function () {\n  return (\n    /** @type {proto.StarfruitGameAction.ActionCase} */\n    jspb.Message.computeOneofCase(this, proto.StarfruitGameAction.oneofGroups_[0])\n  );\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.StarfruitGameAction.prototype.toObject = function (opt_includeInstance) {\n    return proto.StarfruitGameAction.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.StarfruitGameAction} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.StarfruitGameAction.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      baseAction: (f = msg.getBaseAction()) && game_pb.GameAction.toObject(includeInstance, f),\n      selectTile: (f = msg.getSelectTile()) && math_pb.Coordinate.toObject(includeInstance, f),\n      redeal: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),\n      endGame: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.StarfruitGameAction}\n */\n\n\nproto.StarfruitGameAction.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.StarfruitGameAction();\n  return proto.StarfruitGameAction.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.StarfruitGameAction} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.StarfruitGameAction}\n */\n\n\nproto.StarfruitGameAction.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new game_pb.GameAction();\n        reader.readMessage(value, game_pb.GameAction.deserializeBinaryFromReader);\n        msg.setBaseAction(value);\n        break;\n\n      case 2:\n        var value = new math_pb.Coordinate();\n        reader.readMessage(value, math_pb.Coordinate.deserializeBinaryFromReader);\n        msg.setSelectTile(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setRedeal(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setEndGame(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.StarfruitGameAction.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.StarfruitGameAction.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.StarfruitGameAction} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.StarfruitGameAction.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getBaseAction();\n\n  if (f != null) {\n    writer.writeMessage(1, f, game_pb.GameAction.serializeBinaryToWriter);\n  }\n\n  f = message.getSelectTile();\n\n  if (f != null) {\n    writer.writeMessage(2, f, math_pb.Coordinate.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {boolean} */\n  jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeBool(3, f);\n  }\n\n  f =\n  /** @type {boolean} */\n  jspb.Message.getField(message, 4);\n\n  if (f != null) {\n    writer.writeBool(4, f);\n  }\n};\n/**\n * optional GameAction base_action = 1;\n * @return {?proto.GameAction}\n */\n\n\nproto.StarfruitGameAction.prototype.getBaseAction = function () {\n  return (\n    /** @type{?proto.GameAction} */\n    jspb.Message.getWrapperField(this, game_pb.GameAction, 1)\n  );\n};\n/**\n * @param {?proto.GameAction|undefined} value\n * @return {!proto.StarfruitGameAction} returns this\n*/\n\n\nproto.StarfruitGameAction.prototype.setBaseAction = function (value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.StarfruitGameAction} returns this\n */\n\n\nproto.StarfruitGameAction.prototype.clearBaseAction = function () {\n  return this.setBaseAction(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.StarfruitGameAction.prototype.hasBaseAction = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional Coordinate select_tile = 2;\n * @return {?proto.Coordinate}\n */\n\n\nproto.StarfruitGameAction.prototype.getSelectTile = function () {\n  return (\n    /** @type{?proto.Coordinate} */\n    jspb.Message.getWrapperField(this, math_pb.Coordinate, 2)\n  );\n};\n/**\n * @param {?proto.Coordinate|undefined} value\n * @return {!proto.StarfruitGameAction} returns this\n*/\n\n\nproto.StarfruitGameAction.prototype.setSelectTile = function (value) {\n  return jspb.Message.setOneofWrapperField(this, 2, proto.StarfruitGameAction.oneofGroups_[0], value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.StarfruitGameAction} returns this\n */\n\n\nproto.StarfruitGameAction.prototype.clearSelectTile = function () {\n  return this.setSelectTile(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.StarfruitGameAction.prototype.hasSelectTile = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional bool redeal = 3;\n * @return {boolean}\n */\n\n\nproto.StarfruitGameAction.prototype.getRedeal = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 3, false)\n  );\n};\n/**\n * @param {boolean} value\n * @return {!proto.StarfruitGameAction} returns this\n */\n\n\nproto.StarfruitGameAction.prototype.setRedeal = function (value) {\n  return jspb.Message.setOneofField(this, 3, proto.StarfruitGameAction.oneofGroups_[0], value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.StarfruitGameAction} returns this\n */\n\n\nproto.StarfruitGameAction.prototype.clearRedeal = function () {\n  return jspb.Message.setOneofField(this, 3, proto.StarfruitGameAction.oneofGroups_[0], undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.StarfruitGameAction.prototype.hasRedeal = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * optional bool end_game = 4;\n * @return {boolean}\n */\n\n\nproto.StarfruitGameAction.prototype.getEndGame = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 4, false)\n  );\n};\n/**\n * @param {boolean} value\n * @return {!proto.StarfruitGameAction} returns this\n */\n\n\nproto.StarfruitGameAction.prototype.setEndGame = function (value) {\n  return jspb.Message.setOneofField(this, 4, proto.StarfruitGameAction.oneofGroups_[0], value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.StarfruitGameAction} returns this\n */\n\n\nproto.StarfruitGameAction.prototype.clearEndGame = function () {\n  return jspb.Message.setOneofField(this, 4, proto.StarfruitGameAction.oneofGroups_[0], undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.StarfruitGameAction.prototype.hasEndGame = function () {\n  return jspb.Message.getField(this, 4) != null;\n};\n/**\n * @enum {number}\n */\n\n\nproto.TileType = {\n  TILE_NONE: 0,\n  BAMBOO: 1,\n  KANJI: 2,\n  CIRCLE: 3,\n  SPECIAL: 4\n};\ngoog.object.extend(exports, proto);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./schema/protos/starfruit_pb.js\n");

/***/ }),

/***/ "./utils/animation.ts":
/*!****************************!*\
  !*** ./utils/animation.ts ***!
  \****************************/
/*! exports provided: useAnimationFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useAnimationFrame\", function() { return useAnimationFrame; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\n\n/**\n * Sets up a callback to run every animation frame.\n * Must provide a tick ref which will be passed into the callback.\n */\n\nvar useAnimationFrame = function useAnimationFrame(callback, tickRef, deps) {\n  _s();\n\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  var requestRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n  var previousTimeRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n\n  var animate = function animate(time) {\n    if (previousTimeRef.current !== undefined) {\n      var deltaTime = time - previousTimeRef.current;\n      tickRef.current += deltaTime / 100;\n      callback(tickRef.current);\n    }\n\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n    requestRef.current = requestAnimationFrame(animate);\n    return function () {\n      return cancelAnimationFrame(requestRef.current);\n    };\n  }, [deps]);\n};\n\n_s(useAnimationFrame, \"z8M7fn6QAiYOb97lWpO8m/pmXa0=\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvYW5pbWF0aW9uLnRzP2ExMTUiXSwibmFtZXMiOlsidXNlQW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsInRpY2tSZWYiLCJkZXBzIiwicmVxdWVzdFJlZiIsInVzZVJlZiIsInByZXZpb3VzVGltZVJlZiIsImFuaW1hdGUiLCJ0aW1lIiwiY3VycmVudCIsInVuZGVmaW5lZCIsImRlbHRhVGltZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVzZUVmZmVjdCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUVBOzs7OztBQUlPLElBQU1BLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FDL0JDLFFBRCtCLEVBRS9CQyxPQUYrQixFQUcvQkMsSUFIK0IsRUFJNUI7QUFBQTs7QUFDSDtBQUNBO0FBQ0EsTUFBTUMsVUFBVSxHQUFHQyxvREFBTSxFQUF6QjtBQUNBLE1BQU1DLGVBQWUsR0FBR0Qsb0RBQU0sRUFBOUI7O0FBRUEsTUFBTUUsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBQ0MsSUFBRCxFQUFVO0FBQ3hCLFFBQUlGLGVBQWUsQ0FBQ0csT0FBaEIsS0FBNEJDLFNBQWhDLEVBQTJDO0FBQ3pDLFVBQU1DLFNBQVMsR0FBR0gsSUFBSSxHQUFHRixlQUFlLENBQUNHLE9BQXpDO0FBQ0FQLGFBQU8sQ0FBQ08sT0FBUixJQUFtQkUsU0FBUyxHQUFHLEdBQS9CO0FBQ0FWLGNBQVEsQ0FBQ0MsT0FBTyxDQUFDTyxPQUFULENBQVI7QUFDRDs7QUFDREgsbUJBQWUsQ0FBQ0csT0FBaEIsR0FBMEJELElBQTFCO0FBQ0FKLGNBQVUsQ0FBQ0ssT0FBWCxHQUFxQkcscUJBQXFCLENBQUNMLE9BQUQsQ0FBMUM7QUFDRCxHQVJEOztBQVVBTSx5REFBUyxDQUFDLFlBQU07QUFDZFQsY0FBVSxDQUFDSyxPQUFYLEdBQXFCRyxxQkFBcUIsQ0FBQ0wsT0FBRCxDQUExQztBQUNBLFdBQU87QUFBQSxhQUFNTyxvQkFBb0IsQ0FBQ1YsVUFBVSxDQUFDSyxPQUFaLENBQTFCO0FBQUEsS0FBUDtBQUNELEdBSFEsRUFHTixDQUFDTixJQUFELENBSE0sQ0FBVDtBQUlELENBeEJNOztHQUFNSCxpQiIsImZpbGUiOiIuL3V0aWxzL2FuaW1hdGlvbi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIFNldHMgdXAgYSBjYWxsYmFjayB0byBydW4gZXZlcnkgYW5pbWF0aW9uIGZyYW1lLlxuICogTXVzdCBwcm92aWRlIGEgdGljayByZWYgd2hpY2ggd2lsbCBiZSBwYXNzZWQgaW50byB0aGUgY2FsbGJhY2suXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VBbmltYXRpb25GcmFtZSA9IChcbiAgY2FsbGJhY2s6ICh0aWNrOiBudW1iZXIpID0+IHZvaWQsXG4gIHRpY2tSZWY6IFJlYWN0Lk11dGFibGVSZWZPYmplY3Q8bnVtYmVyPixcbiAgZGVwczogUmVhY3QuRGVwZW5kZW5jeUxpc3RcbikgPT4ge1xuICAvLyBVc2UgdXNlUmVmIGZvciBtdXRhYmxlIHZhcmlhYmxlcyB0aGF0IHdlIHdhbnQgdG8gcGVyc2lzdFxuICAvLyB3aXRob3V0IHRyaWdnZXJpbmcgYSByZS1yZW5kZXIgb24gdGhlaXIgY2hhbmdlXG4gIGNvbnN0IHJlcXVlc3RSZWYgPSB1c2VSZWY8bnVtYmVyIHwgdW5kZWZpbmVkPigpO1xuICBjb25zdCBwcmV2aW91c1RpbWVSZWYgPSB1c2VSZWY8bnVtYmVyIHwgdW5kZWZpbmVkPigpO1xuXG4gIGNvbnN0IGFuaW1hdGUgPSAodGltZSkgPT4ge1xuICAgIGlmIChwcmV2aW91c1RpbWVSZWYuY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBkZWx0YVRpbWUgPSB0aW1lIC0gcHJldmlvdXNUaW1lUmVmLmN1cnJlbnQ7XG4gICAgICB0aWNrUmVmLmN1cnJlbnQgKz0gZGVsdGFUaW1lIC8gMTAwO1xuICAgICAgY2FsbGJhY2sodGlja1JlZi5jdXJyZW50KTtcbiAgICB9XG4gICAgcHJldmlvdXNUaW1lUmVmLmN1cnJlbnQgPSB0aW1lO1xuICAgIHJlcXVlc3RSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlcXVlc3RSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgICByZXR1cm4gKCkgPT4gY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVxdWVzdFJlZi5jdXJyZW50ISk7XG4gIH0sIFtkZXBzXSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./utils/animation.ts\n");

/***/ })

}]);