(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[5],{

/***/ "./assets/puzzle/fig/humming.otf":
/*!***************************************!*\
  !*** ./assets/puzzle/fig/humming.otf ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"static/assets/puzzle/fig/humming.otf\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXNzZXRzL3B1enpsZS9maWcvaHVtbWluZy5vdGY/Yzk4NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFlLG9GQUF1Qix5Q0FBeUMiLCJmaWxlIjoiLi9hc3NldHMvcHV6emxlL2ZpZy9odW1taW5nLm90Zi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzdGF0aWMvYXNzZXRzL3B1enpsZS9maWcvaHVtbWluZy5vdGZcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/puzzle/fig/humming.otf\n");

/***/ }),

/***/ "./components/groupsolve/fig.tsx":
/*!***************************************!*\
  !*** ./components/groupsolve/fig.tsx ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react_feather__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-feather */ \"./node_modules/react-feather/dist/index.js\");\n/* harmony import */ var components_groupsolve_lobby__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! components/groupsolve/lobby */ \"./components/groupsolve/lobby.tsx\");\n/* harmony import */ var assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! assets/puzzle/fig/humming.otf */ \"./assets/puzzle/fig/humming.otf\");\n/* harmony import */ var schema_protos_fig_pb__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! schema/protos/fig_pb */ \"./schema/protos/fig_pb.js\");\n/* harmony import */ var schema_protos_fig_pb__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(schema_protos_fig_pb__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! schema/protos/game_pb */ \"./schema/protos/game_pb.js\");\n/* harmony import */ var schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var schema_protos_math_pb__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! schema/protos/math_pb */ \"./schema/protos/math_pb.js\");\n/* harmony import */ var schema_protos_math_pb__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(schema_protos_math_pb__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var utils_assets__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! utils/assets */ \"./utils/assets.ts\");\n/* harmony import */ var utils_timer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! utils/timer */ \"./utils/timer.tsx\");\n/* harmony import */ var utils_game__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! utils/game */ \"./utils/game.ts\");\n/* harmony import */ var utils_animation__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! utils/animation */ \"./utils/animation.ts\");\n\n\n\nvar _this = undefined,\n    _jsxFileName = \"/vagrant/client/components/groupsolve/fig.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement;\n\n\n\n\n\n\n\n\n\n\n\n\nvar FigState = schema_protos_fig_pb__WEBPACK_IMPORTED_MODULE_7__[\"FigGameState\"].FigState;\nvar TWO_PI = Math.PI * 2;\nvar GUESS_TIME = 450;\nvar ANIMATION_SPEED = 10;\nvar SEARCH_TIMES = [200, 300, 300, 350, 400];\nvar NUM_DIFFS = [3, 4, 5, 6, 7];\nvar LEVEL_FISH_SCALE = [14, 14, 15, 15, 15];\nvar BACKGROUND_IMAGES = ['bg1', 'bg2', 'bg3', 'bg4', 'bg5']; // Location of text, in left/top%\n\nvar TEXT_POSITIONS = [[12, 32], [12, 32], [12, 24], [12, 24], [12, 72]];\nvar DUCK_NAMES = ['Ketchup', 'Molly', 'Weber', 'Molly', 'Ketchup', 'Weber'];\n\nvar FISH_IMAGES = function () {\n  var images = {};\n  Object.entries(schema_protos_fig_pb__WEBPACK_IMPORTED_MODULE_7__[\"FishType\"]).forEach(function (_ref) {\n    var _ref2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref, 2),\n        fishName = _ref2[0],\n        fishType = _ref2[1];\n\n    if (fishType !== schema_protos_fig_pb__WEBPACK_IMPORTED_MODULE_7__[\"FishType\"].FISH_TYPE_UNKNOWN) {\n      images[fishType] = fishName.toLowerCase();\n    }\n  });\n  return images;\n}(); // Used for animation so that fish don't all move at the same time.\n\n\nvar RANDOM_OFFSETS = new Array(100).fill(0).map(_c = function _c(num) {\n  return num + Math.random() * 100;\n});\n_c2 = RANDOM_OFFSETS;\nvar FIG_SOUND_EFFECTS = [{\n  src: 'puzzle/fig/sfx',\n  sprite: {\n    correct1: [0, 1200],\n    correct2: [1200, 1200],\n    correct3: [2400, 1200],\n    correct4: [3600, 1200],\n    correct5: [4800, 1200],\n    correct6: [6000, 1200],\n    correct7: [7200, 1500],\n    wrong: [8800, 300]\n  }\n}, {\n  src: 'puzzle/fig/fishing',\n  sprite: {\n    full: [0, 114406],\n    loop: [57263, 57143]\n  },\n  onend: function onend() {\n    this.play('loop');\n  }\n}]; // prettier-ignore\n\nvar CORRECT_SOUNDS = ['correct7', 'correct6', 'correct5', 'correct4', 'correct3', 'correct2', 'correct1'];\n\nvar getCanvasPosition = function getCanvasPosition(position, width, height) {\n  return [// The position of the fish should be limited to the left/right half.\n  (position.getX() || 0) / 100 * width / 2, (position.getY() || 0) / 100 * height];\n};\n\nvar getAnimationOffset = function getAnimationOffset(tick) {\n  return tick % 2 === 0 ? 0 : 2 - tick % 4;\n};\n\nvar renderBackground = function renderBackground(ctx, width, height, image) {\n  var mirror = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  ctx.clearRect(0, 0, width, height); // Draw two images, one for each side.\n\n  if (mirror) {\n    ctx.drawImage(image, 0, 0, width / 2, height);\n    ctx.drawImage(image, width / 2, 0, width / 2, height);\n  } else {\n    ctx.drawImage(image, 0, 0, width, height);\n  }\n};\n\nvar renderCursors = function renderCursors(ctx, width, height, position, image) {\n  // Draw two cursors, one on each side.\n  ctx.drawImage(image, position[0] % 100 / 100 * width / 2 - 10, position[1] / 100 * height - 8, 20, 20);\n  ctx.drawImage(image, (position[0] % 100 + 100) / 100 * width / 2 - 10, position[1] / 100 * height - 8, 20, 20);\n};\n\nvar renderFish = function renderFish(i, ctx, width, height, fish, offsets, tick, image, level) {\n  var _fish$getSize;\n\n  // Don't draw anything if the fish is not there.\n  if (!fish.getSize()) {\n    return;\n  }\n\n  ctx.save();\n  var position = getCanvasPosition(fish.getCoordinate(), width, height);\n  position[0] += offsets[0];\n  position[1] += offsets[1];\n\n  if (!fish.getFacingLeft()) {\n    // Mirror the entire canvas and position\n    ctx.scale(-1, 1);\n    position[0] *= -1;\n  }\n\n  if (fish.getInvertColors()) {\n    ctx.filter = 'hue-rotate(180deg)';\n  } // Scale fish by size and screen width (later levels with more fish are smaller).\n\n\n  var scale = (0.5 + ((_fish$getSize = fish.getSize()) !== null && _fish$getSize !== void 0 ? _fish$getSize : 0) / 6) * (width / LEVEL_FISH_SCALE[level]);\n  ctx.drawImage(image, position[0] - scale / 2, position[1] - scale / 2 + getAnimationOffset(Math.round(tick / ANIMATION_SPEED + RANDOM_OFFSETS[i])), scale, scale);\n  ctx.restore();\n};\n\nvar renderFishies = function renderFishies(ctx, width, height, tick, leftFish, rightFish, images, level) {\n  var renderFishFn = function renderFishFn(offset) {\n    return function (fish, i) {\n      renderFish(i, ctx, width, height, fish, offset, tick, images[FISH_IMAGES[fish.getFishType()]], level);\n    };\n  };\n\n  leftFish.forEach(renderFishFn([0, 0]));\n  rightFish.forEach(renderFishFn([width / 2, 0]));\n};\n\nvar renderO = function renderO(ctx, x, y, radius, color) {\n  ctx.save();\n  ctx.translate(x - radius, y - radius);\n  ctx.beginPath();\n  ctx.fillStyle = color;\n  ctx.arc(radius, radius, radius, 0, TWO_PI, false); // outer circle\n\n  ctx.arc(radius, radius, radius * 3 / 4, 0, TWO_PI, true); // inner circle\n\n  ctx.fill();\n  ctx.restore();\n};\n\nvar renderX = function renderX(ctx, x, y, radius) {\n  ctx.save();\n  ctx.beginPath();\n  ctx.strokeStyle = 'red';\n  ctx.lineWidth = radius / 4;\n  ctx.moveTo(x - radius / 2, y - radius / 2);\n  ctx.lineTo(x + radius / 2, y + radius / 2);\n  ctx.moveTo(x + radius / 2, y - radius / 2);\n  ctx.lineTo(x - radius / 2, y + radius / 2);\n  ctx.stroke();\n  ctx.restore();\n};\n\nvar renderGuesses = function renderGuesses(ctx, width, height, wrongGuesses, correctGuesses, missedGuesses) {\n  var size = Math.max(20 * width / 1128, 5);\n  wrongGuesses.forEach(function (guessCoordinate) {\n    var position = getCanvasPosition(guessCoordinate, width, height);\n    renderX(ctx, position[0], position[1], size);\n    renderX(ctx, position[0] + width / 2, position[1], size);\n  });\n\n  var renderGuess = function renderGuess(color) {\n    return function (guessCoordinate) {\n      var position = getCanvasPosition(guessCoordinate, width, height);\n      renderO(ctx, position[0], position[1], size, color);\n      renderO(ctx, position[0] + width / 2, position[1], size, color);\n    };\n  };\n\n  correctGuesses.forEach(renderGuess('lightgreen'));\n  missedGuesses.forEach(renderGuess('red'));\n};\n\nvar CardMessage = function CardMessage(_ref3) {\n  var duckName = _ref3.duckName,\n      position = _ref3.position,\n      speech = _ref3.speech,\n      className = _ref3.className,\n      screenDimensions = _ref3.screenDimensions,\n      children = _ref3.children;\n  return __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2266284587\", [speech.src, position[0], position[1], screenDimensions.width * 0.28, screenDimensions.width * 0.085]]]) + \" \" + \"\".concat(className, \" container\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 3\n    }\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2266284587\", [speech.src, position[0], position[1], screenDimensions.width * 0.28, screenDimensions.width * 0.085]]]) + \" \" + \"inner\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2266284587\", [speech.src, position[0], position[1], screenDimensions.width * 0.28, screenDimensions.width * 0.085]]]) + \" \" + \"duckName\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }\n  }, duckName), __jsx(\"p\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"2266284587\", [speech.src, position[0], position[1], screenDimensions.width * 0.28, screenDimensions.width * 0.085]]]) + \" \" + \"abs-center center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }\n  }, children)), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"2266284587\",\n    dynamic: [speech.src, position[0], position[1], screenDimensions.width * 0.28, screenDimensions.width * 0.085],\n    __self: _this\n  }, \".container.__jsx-style-dynamic-selector{background:url(\".concat(speech.src, \");background-size:cover;font-family:'Humming';pointer-events:none;position:absolute;left:\").concat(position[0], \"%;top:\").concat(position[1], \"%;width:\").concat(screenDimensions.width * 0.28, \"px;height:\").concat(screenDimensions.width * 0.085, \"px;}.inner.__jsx-style-dynamic-selector{position:relative;height:100%;width:100%;}.duckName.__jsx-style-dynamic-selector{font-size:10px;margin:2px 10px;}p.__jsx-style-dynamic-selector{margin-top:4px;font-size:1.5vmin;line-height:1.6vmin;width:100%;}@media (max-width:1000px){p.__jsx-style-dynamic-selector{font-size:1.2vmin;line-height:1.5vmin;}}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/fig.tsx */\")));\n};\n\n_c3 = CardMessage;\n\nvar FigGame = function FigGame(_ref4) {\n  _s();\n\n  var _gameStateRef$current, _gameState$getState, _gameState$getBaseSta5, _gameState$getBaseSta6, _gameState$getBaseSta7, _gameState$getBaseSta8;\n\n  var canvasRef = _ref4.canvasRef,\n      gameState = _ref4.gameState,\n      isConnected = _ref4.isConnected,\n      setLoading = _ref4.setLoading,\n      currentPlayer = _ref4.currentPlayer,\n      sendMessage = _ref4.sendMessage,\n      restartGame = _ref4.restartGame,\n      screenDimensions = _ref4.screenDimensions;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false),\n      playerStarted = _useState[0],\n      setPlayerStarted = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])([]),\n      leftFishies = _useState2[0],\n      setLeftFishies = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])([]),\n      rightFishies = _useState3[0],\n      setRightFishies = _useState3[1];\n\n  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])([]),\n      wrongGuesses = _useState4[0],\n      setWrongGuesses = _useState4[1];\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])([]),\n      correctGuesses = _useState5[0],\n      setCorrectGuesses = _useState5[1];\n\n  var _useState6 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])([]),\n      missedGuesses = _useState6[0],\n      setMissedGuesses = _useState6[1];\n\n  var _useState7 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(3),\n      numLives = _useState7[0],\n      setNumLives = _useState7[1];\n\n  var _useState8 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(0),\n      level = _useState8[0],\n      setLevel = _useState8[1];\n\n  var _useState9 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(null),\n      timeGuessStarted = _useState9[0],\n      setTimeGuessStarted = _useState9[1];\n\n  var _useState10 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(null),\n      timeLevelStarted = _useState10[0],\n      setTimeLevelStarted = _useState10[1];\n\n  var _useState11 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(null),\n      timeCorrectGuess = _useState11[0],\n      setTimeCorrectGuess = _useState11[1];\n\n  var _useState12 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(''),\n      inputGuess = _useState12[0],\n      setInputGuess = _useState12[1];\n\n  var _useState13 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(true),\n      showMouse = _useState13[0],\n      setShowMouse = _useState13[1];\n\n  var _useImages = Object(utils_assets__WEBPACK_IMPORTED_MODULE_10__[\"useImages\"])('puzzle/fig/', ['banner', 'cursor', 'speech', 'title'].concat(BACKGROUND_IMAGES, Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(Object.values(FISH_IMAGES)))),\n      isLoading = _useImages.isLoading,\n      images = _useImages.images;\n\n  var _useSounds = Object(utils_assets__WEBPACK_IMPORTED_MODULE_10__[\"useSounds\"])('', [].concat(FIG_SOUND_EFFECTS, [utils_timer__WEBPACK_IMPORTED_MODULE_11__[\"TICK_SOUND_EFFECTS\"], utils_assets__WEBPACK_IMPORTED_MODULE_10__[\"MAIN_SOUND_EFFECTS\"]])),\n      isSoundLoading = _useSounds.isLoading,\n      sounds = _useSounds.sounds;\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    if (!isLoading && !isSoundLoading) {\n      setLoading(false);\n    }\n  }, [isLoading, isSoundLoading]); // Refs for use in animation frames.\n\n  var gameStateRef = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])(null);\n  var tickRef = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])(0);\n  var mousePositionRef = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])([0, 0]);\n  var timer = Object(utils_timer__WEBPACK_IMPORTED_MODULE_11__[\"useTimer\"])(timeLevelStarted !== null ? timeCorrectGuess !== null && timeCorrectGuess !== void 0 ? timeCorrectGuess : SEARCH_TIMES[level] - (tickRef.current - timeLevelStarted) : 0, ANIMATION_SPEED, !isLoading && !isSoundLoading && ((_gameStateRef$current = gameStateRef.current) === null || _gameStateRef$current === void 0 ? void 0 : _gameStateRef$current.getState()) === FigState.LOOKING_FOR_DIFFS, {\n    tickSfx: sounds['public/tick']\n  });\n\n  var cleanup = function cleanup() {\n    setPlayerStarted(false);\n    setLeftFishies([]);\n    setRightFishies([]);\n    setWrongGuesses([]);\n    setCorrectGuesses([]);\n    setMissedGuesses([]);\n    gameStateRef.current = null;\n    tickRef.current = 0;\n    canvasRef.current.getContext('2d').clearRect(0, 0, screenDimensions.width, screenDimensions.height);\n  };\n\n  var onClick = function onClick(e) {\n    var _gameStateRef$current2;\n\n    if (((_gameStateRef$current2 = gameStateRef.current) === null || _gameStateRef$current2 === void 0 ? void 0 : _gameStateRef$current2.getState()) !== FigState.LOOKING_FOR_DIFFS) {\n      return;\n    }\n\n    var action = new schema_protos_fig_pb__WEBPACK_IMPORTED_MODULE_7__[\"FigGameAction\"]();\n    var coordinate = new schema_protos_math_pb__WEBPACK_IMPORTED_MODULE_9__[\"Coordinate\"]();\n    coordinate.setX(mousePositionRef.current[0] % 100);\n    coordinate.setY(mousePositionRef.current[1]);\n    action.setClick(coordinate);\n    sendMessage(action);\n  };\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    var offset = canvasRef.current.getBoundingClientRect();\n\n    canvasRef.current.onmousemove = function (e) {\n      mousePositionRef.current = [Math.floor((e.clientX - offset.x) / screenDimensions.width * 200), Math.floor((e.clientY - offset.y) / screenDimensions.height * 100)];\n    };\n\n    canvasRef.current.onclick = onClick;\n    return function cleanup() {\n      canvasRef.current.onclick = undefined;\n      canvasRef.current.onmousemove = undefined;\n    };\n  }, [canvasRef.current, sendMessage]);\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    // Hide the cursor when in game.\n    canvasRef.current.style.cursor = showMouse ? 'auto' : 'none';\n    return function () {\n      canvasRef.current.style.cursor = 'auto';\n    };\n  }, [canvasRef.current, showMouse]);\n\n  var onStartGame = function onStartGame() {\n    var action = new schema_protos_fig_pb__WEBPACK_IMPORTED_MODULE_7__[\"FigGameAction\"]();\n    var baseAction = new schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameAction\"]();\n    baseAction.setAction(schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"Action\"].START_GAME);\n    action.setBaseAction(baseAction);\n    sendMessage(action);\n    setPlayerStarted(true);\n    sounds['public/mainsfx'].play('select');\n  };\n\n  var onRestart = function onRestart() {\n    if (Object(utils_game__WEBPACK_IMPORTED_MODULE_12__[\"isGameOver\"])(gameStateRef.current)) {\n      sounds['public/mainsfx'].play('select');\n      cleanup();\n      restartGame();\n    }\n  }; // Update client state on every websocket message.\n\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    var _gameState$getBaseSta, _gameState$getNumLive;\n\n    gameStateRef.current = gameState;\n    tickRef.current = (_gameState$getBaseSta = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getTick()) !== null && _gameState$getBaseSta !== void 0 ? _gameState$getBaseSta : 0;\n\n    if (!gameState || !isConnected || isLoading) {\n      return;\n    }\n\n    var gameOver = Object(utils_game__WEBPACK_IMPORTED_MODULE_12__[\"isGameOver\"])(gameState); // Update guess positions\n\n    var newGuesses = gameState.getCorrectGuessesList();\n\n    if (newGuesses.length && newGuesses.length !== correctGuesses.length) {\n      setCorrectGuesses(newGuesses);\n\n      if (!timeCorrectGuess) {\n        if (!gameOver) {\n          // Find the nth-to-last correct sound effect.\n          var sfx = CORRECT_SOUNDS[NUM_DIFFS[level] - newGuesses.length];\n          sounds['puzzle/fig/sfx'].play(sfx);\n        }\n\n        if (newGuesses.length === NUM_DIFFS[level]) {\n          setTimeCorrectGuess(SEARCH_TIMES[level] - (tickRef.current - timeLevelStarted));\n        }\n      }\n    }\n\n    var wrongGuessesList = gameState.getWrongGuessesList();\n\n    if (wrongGuessesList.length && wrongGuessesList.length !== wrongGuesses.length) {\n      if (!gameOver) {\n        sounds['puzzle/fig/sfx'].play('wrong');\n      }\n\n      setWrongGuesses(wrongGuessesList);\n    }\n\n    var newNumLives = (_gameState$getNumLive = gameState.getNumLives()) !== null && _gameState$getNumLive !== void 0 ? _gameState$getNumLive : 0;\n\n    if (newNumLives !== numLives) {\n      setNumLives(newNumLives);\n    }\n\n    if (gameOver) {\n      var newMissedGuesses = gameState.getMissedGuessesList();\n\n      if (!missedGuesses.length) {\n        setMissedGuesses(newMissedGuesses);\n      }\n\n      if (!showMouse) {\n        var _gameState$getBaseSta2;\n\n        setShowMouse(true);\n        sounds['puzzle/fig/fishing'].fade(1, 0, 1000);\n        sounds['public/mainsfx'].play((gameState === null || gameState === void 0 ? void 0 : (_gameState$getBaseSta2 = gameState.getBaseState()) === null || _gameState$getBaseSta2 === void 0 ? void 0 : _gameState$getBaseSta2.getStatus()) === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'win' : 'loss');\n      }\n\n      return;\n    }\n\n    switch (gameState.getState()) {\n      case FigState.WAITING_FOR_START:\n        // Wait for players to start\n        break;\n\n      case FigState.LOOKING_FOR_DIFFS:\n        if (showMouse) {\n          setShowMouse(false);\n        }\n\n        var leftFish = gameState.getLeftPictureList();\n        var rightFish = gameState.getRightPictureList();\n\n        var _wrongGuessesList = gameState.getWrongGuessesList();\n\n        if (leftFish.length && rightFish.length) {\n          var _gameState$getBaseSta3;\n\n          // New level, reset all\n          var newLevel = (_gameState$getBaseSta3 = gameState.getBaseState().getLevel()) !== null && _gameState$getBaseSta3 !== void 0 ? _gameState$getBaseSta3 : 0;\n\n          if (newLevel === 0) {\n            sounds['puzzle/fig/fishing'].play('full');\n          }\n\n          setLevel(newLevel);\n          setLeftFishies(leftFish);\n          setRightFishies(rightFish);\n          setWrongGuesses([]);\n          setCorrectGuesses([]);\n          setMissedGuesses([]);\n          setTimeLevelStarted(tickRef.current);\n          setTimeCorrectGuess(null);\n        }\n\n        break;\n    }\n  }, [gameState]); // Paint frames on the canvas.\n\n  var render = function render(tick) {\n    var _gameState$getBaseSta4, _gameStateRef$current3;\n\n    if (isLoading || isSoundLoading) {\n      return;\n    }\n\n    var ctx = canvasRef.current.getContext('2d');\n    var status = (_gameState$getBaseSta4 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getStatus()) !== null && _gameState$getBaseSta4 !== void 0 ? _gameState$getBaseSta4 : schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].WAITING_FOR_START;\n\n    if (status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].WAITING_FOR_START) {\n      renderBackground(ctx, screenDimensions.width, screenDimensions.height, images['title'], false);\n    } else if (((_gameStateRef$current3 = gameStateRef.current) === null || _gameStateRef$current3 === void 0 ? void 0 : _gameStateRef$current3.getState()) === FigState.LOOKING_FOR_DIFFS || status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_LOSS) {\n      renderBackground(ctx, screenDimensions.width, screenDimensions.height, images[BACKGROUND_IMAGES[level]]);\n      renderFishies(ctx, screenDimensions.width, screenDimensions.height, tick, leftFishies, rightFishies, images, level);\n      renderGuesses(ctx, screenDimensions.width, screenDimensions.height, wrongGuesses, correctGuesses, missedGuesses);\n\n      if (!showMouse) {\n        renderCursors(ctx, screenDimensions.width, screenDimensions.height, mousePositionRef.current, images['cursor']);\n      }\n    }\n  };\n\n  Object(utils_animation__WEBPACK_IMPORTED_MODULE_13__[\"useAnimationFrame\"])(render, tickRef, [level, leftFishies, rightFishies, wrongGuesses, correctGuesses]);\n  var state = (_gameState$getState = gameState === null || gameState === void 0 ? void 0 : gameState.getState()) !== null && _gameState$getState !== void 0 ? _gameState$getState : FigState.WAITING_FOR_START;\n  var status = (_gameState$getBaseSta5 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getStatus()) !== null && _gameState$getBaseSta5 !== void 0 ? _gameState$getBaseSta5 : schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].WAITING_FOR_START;\n  var players = (_gameState$getBaseSta6 = gameState === null || gameState === void 0 ? void 0 : (_gameState$getBaseSta7 = gameState.getBaseState()) === null || _gameState$getBaseSta7 === void 0 ? void 0 : _gameState$getBaseSta7.getPlayersList()) !== null && _gameState$getBaseSta6 !== void 0 ? _gameState$getBaseSta6 : [];\n  var tick = (_gameState$getBaseSta8 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getTick()) !== null && _gameState$getBaseSta8 !== void 0 ? _gameState$getBaseSta8 : 0;\n\n  if (isLoading || isSoundLoading) {\n    return __jsx(\"div\", {\n      className: \"message abs-center center\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 12\n      }\n    }, \"Loading fishies...\");\n  }\n\n  var textPosition = TEXT_POSITIONS[level];\n  var showFinalMessage = Object(utils_game__WEBPACK_IMPORTED_MODULE_12__[\"isGameOver\"])(gameState);\n  var _styles$className = {\n    styles: __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n      id: \"3914844381\"\n    }, \"div.jsx-3914844381{font-family:'Humming';top:85%;width:75%;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/fig.tsx */\"),\n    className: \"jsx-3914844381\"\n  },\n      lobbyClassName = _styles$className.className,\n      lobbyStyles = _styles$className.styles;\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, Object(utils_game__WEBPACK_IMPORTED_MODULE_12__[\"isGameOver\"])(gameState) ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]) + \" \" + \"winLose message center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 628,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 13\n    }\n  }, \"GAME \", status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'COMPLETE' : 'OVER')), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]) + \" \" + \"bottom message center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    onClick: onRestart,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 634,\n      columnNumber: 13\n    }\n  }, \"Return to lobby\"))) : state === FigState.WAITING_FOR_START && tick === 0 ? // If the game hasn't started yet, show a message.\n  __jsx(components_groupsolve_lobby__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n    playerStarted: playerStarted,\n    isConnected: isConnected,\n    players: players,\n    currentPlayer: currentPlayer,\n    startButton: __jsx(\"button\", {\n      onClick: onStartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 24\n      }\n    }, \"Ready to start\"),\n    confirmButton: __jsx(\"button\", {\n      onClick: onStartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 26\n      }\n    }, \"Start game\"),\n    rejoinButton: __jsx(\"button\", {\n      onClick: restartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 25\n      }\n    }, \"Rejoin lobby\"),\n    className: lobbyClassName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 9\n    }\n  }) : state === FigState.LOOKING_FOR_DIFFS && timeLevelStarted !== null && __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]) + \" \" + \"message center top\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 652,\n      columnNumber: 11\n    }\n  }, timer), state > FigState.WAITING_FOR_START && __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, [0, 50].map(function (offsetX) {\n    return __jsx(CardMessage, {\n      key: \"card-\".concat(offsetX),\n      className: \"message\",\n      duckName: DUCK_NAMES[timeCorrectGuess ? level + 1 : level],\n      position: [textPosition[0] + offsetX, textPosition[1]],\n      speech: images['speech'],\n      screenDimensions: screenDimensions,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 13\n      }\n    }, showFinalMessage ? __jsx(\"span\", {\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 17\n      }\n    }, \"That was fun!\", __jsx(\"br\", {\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 19\n      }\n    }), \"Let's play again!\") : timeCorrectGuess ? __jsx(\"span\", {\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 17\n      }\n    }, \"Nope! Go fish!\") : __jsx(\"span\", {\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677,\n        columnNumber: 17\n      }\n    }, \"Do you have any \", __jsx(\"strong\", {\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 35\n      }\n    }, gameState.getCard()), \"s?\"));\n  }), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]) + \" \" + \"lives\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 684,\n      columnNumber: 11\n    }\n  }, [0, 1, 2].map(function (i) {\n    return __jsx(\"span\", {\n      key: i,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"889389641\", [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]) + \" \" + \"heart\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 15\n      }\n    }, __jsx(react_feather__WEBPACK_IMPORTED_MODULE_4__[\"Heart\"], {\n      size: 24,\n      fill: i < numLives ? '#c33' : 'lightgrey',\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 17\n      }\n    }));\n  }))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"889389641\",\n    dynamic: [assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred'],\n    __self: _this\n  }, \"@font-face{font-family:'Humming';src:url(\".concat(assets_puzzle_fig_humming_otf__WEBPACK_IMPORTED_MODULE_6__[\"default\"], \");}.center.__jsx-style-dynamic-selector{position:absolute;left:50%;top:50%;text-align:center;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);}.bottom.__jsx-style-dynamic-selector{top:85%;}.message.__jsx-style-dynamic-selector{color:#000;pointer-events:none;font-family:'Humming';font-size:25px;position:absolute;}.lives.__jsx-style-dynamic-selector{right:20px;margin:20px;pointer-events:none;z-index:1;}.heart.__jsx-style-dynamic-selector{margin-right:4px;}.winLose.message.__jsx-style-dynamic-selector{color:\").concat(status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred', \";font-size:50px;padding:16px 24px;text-shadow:2px 2px 2px #fff;top:20%;width:80%;}.message.top.__jsx-style-dynamic-selector{-webkit-text-stroke:1px #fff;font-weight:bold;top:20px;}input.__jsx-style-dynamic-selector{font-size:20px;text-align:center;}.submit.__jsx-style-dynamic-selector{bottom:15%;}button.__jsx-style-dynamic-selector{background:transparent;border:none;color:#fff;font-family:'Humming';font-size:20px;height:40px;padding:0 12px;}button.__jsx-style-dynamic-selector:hover{background:transparent;font-size:22px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/fig.tsx */\")), lobbyStyles);\n};\n\n_s(FigGame, \"88xLVDQinaFoyjZ0U41+5+i17A0=\", false, function () {\n  return [utils_assets__WEBPACK_IMPORTED_MODULE_10__[\"useImages\"], utils_assets__WEBPACK_IMPORTED_MODULE_10__[\"useSounds\"], utils_timer__WEBPACK_IMPORTED_MODULE_11__[\"useTimer\"], utils_animation__WEBPACK_IMPORTED_MODULE_13__[\"useAnimationFrame\"]];\n});\n\n_c4 = FigGame;\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  Game: FigGame,\n  State: schema_protos_fig_pb__WEBPACK_IMPORTED_MODULE_7__[\"FigGameState\"]\n});\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"RANDOM_OFFSETS$new Array(100)\\n  .fill(0)\\n  .map\");\n$RefreshReg$(_c2, \"RANDOM_OFFSETS\");\n$RefreshReg$(_c3, \"CardMessage\");\n$RefreshReg$(_c4, \"FigGame\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/groupsolve/fig.tsx\n");

/***/ }),

/***/ "./components/groupsolve/lobby.tsx":
/*!*****************************************!*\
  !*** ./components/groupsolve/lobby.tsx ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ \"./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\nvar _this = undefined,\n    _jsxFileName = \"/vagrant/client/components/groupsolve/lobby.tsx\";\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement;\n\nvar MAX_PLAYERS = 6;\n\nvar Lobby = function Lobby(_ref) {\n  var playerStarted = _ref.playerStarted,\n      isConnected = _ref.isConnected,\n      title = _ref.title,\n      players = _ref.players,\n      currentPlayer = _ref.currentPlayer,\n      playerSprite = _ref.playerSprite,\n      startButton = _ref.startButton,\n      confirmButton = _ref.confirmButton,\n      rejoinButton = _ref.rejoinButton,\n      className = _ref.className,\n      _ref$requiredPlayers = _ref.requiredPlayers,\n      requiredPlayers = _ref$requiredPlayers === void 0 ? 1 : _ref$requiredPlayers,\n      props = Object(_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref, [\"playerStarted\", \"isConnected\", \"title\", \"players\", \"currentPlayer\", \"playerSprite\", \"startButton\", \"confirmButton\", \"rejoinButton\", \"className\", \"requiredPlayers\"]);\n\n  var allStarted = isConnected && players.every(function (player) {\n    return player.getReady();\n  }) && players.length >= requiredPlayers;\n  var playersNeeded = Math.max(requiredPlayers - 1, players.filter(function (player) {\n    return !player.getReady();\n  }).length);\n  return __jsx(\"div\", Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props, {\n    className: \"jsx-243751013\" + \" \" + (props && props.className != null && props.className || \"abs-center center \".concat(className !== null && className !== void 0 ? className : '')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }), title, allStarted ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, confirmButton, __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"Note: Once you begin a session, others won't be able to join until it ends.\")) : playerStarted && players.length >= requiredPlayers ? \"Waiting for \".concat(playersNeeded, \" other player\").concat(playersNeeded === 1 ? '' : 's', \" to join...\") : playerStarted ? \"(Minimum of \".concat(requiredPlayers, \" players required)\") : isConnected ? startButton : __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, rejoinButton, __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Game in session... \", __jsx(\"br\", {\n    className: \"jsx-243751013\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 32\n    }\n  }), \"Please wait for the current session to complete.\")), players.length > 0 && __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"(\", players.length, \" player\", players.length === 1 ? ' ' : 's ', \"in lobby)\"), playerSprite && __jsx(\"div\", {\n    className: \"jsx-243751013\" + \" \" + \"players flex-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, players.map(function (player, i) {\n    return __jsx(\"div\", {\n      key: i,\n      style: {\n        backgroundPosition: \"\".concat(i * 100 / (MAX_PLAYERS - 1), \"%\"),\n        backgroundImage: \"url(\".concat(playerSprite.url, \")\"),\n        backgroundSize: '600% 100%',\n        transform: \"scale(\".concat(i === currentPlayer ? 1 : 0.7, \")\"),\n        filter: player.getReady() ? 'none' : 'grayscale(1) opacity(80%)',\n        width: playerSprite.width,\n        height: playerSprite.height\n      },\n      className: \"jsx-243751013\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    });\n  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"243751013\",\n    __self: _this\n  }, \".small.jsx-243751013{font-size:1.8vmin;line-height:2.2vmin;margin-top:2.8vmin;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlHa0IsQUFHNkIsa0JBQ0Usb0JBQ0QsbUJBQ3JCIiwiZmlsZSI6Ii92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9nYW1lX3BiJztcbmltcG9ydCB7IGdldEltYWdlT2Zmc2V0IH0gZnJvbSAndXRpbHMvZ2FtZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHBsYXllclN0YXJ0ZWQ6IGJvb2xlYW47XG4gIGlzQ29ubmVjdGVkOiBib29sZWFuO1xuICB0aXRsZT86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcGxheWVyczogUGxheWVyW107XG4gIGN1cnJlbnRQbGF5ZXI6IG51bWJlcjtcbiAgcGxheWVyU3ByaXRlPzoge1xuICAgIHVybDogc3RyaW5nO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gIH07XG4gIHN0YXJ0QnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGNvbmZpcm1CdXR0b246IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcmVqb2luQnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIHJlcXVpcmVkUGxheWVycz86IG51bWJlcjtcbn1cblxuY29uc3QgTUFYX1BMQVlFUlMgPSA2O1xuXG5jb25zdCBMb2JieTogRnVuY3Rpb25Db21wb25lbnQ8XG4gIFByb3BzICYgT21pdDxSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+LCAndGl0bGUnPlxuPiA9ICh7XG4gIHBsYXllclN0YXJ0ZWQsXG4gIGlzQ29ubmVjdGVkLFxuICB0aXRsZSxcbiAgcGxheWVycyxcbiAgY3VycmVudFBsYXllcixcbiAgcGxheWVyU3ByaXRlLFxuICBzdGFydEJ1dHRvbixcbiAgY29uZmlybUJ1dHRvbixcbiAgcmVqb2luQnV0dG9uLFxuICBjbGFzc05hbWUsXG4gIHJlcXVpcmVkUGxheWVycyA9IDEsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGFsbFN0YXJ0ZWQgPVxuICAgIGlzQ29ubmVjdGVkICYmXG4gICAgcGxheWVycy5ldmVyeSgocGxheWVyKSA9PiBwbGF5ZXIuZ2V0UmVhZHkoKSkgJiZcbiAgICBwbGF5ZXJzLmxlbmd0aCA+PSByZXF1aXJlZFBsYXllcnM7XG5cbiAgY29uc3QgcGxheWVyc05lZWRlZCA9IE1hdGgubWF4KFxuICAgIHJlcXVpcmVkUGxheWVycyAtIDEsXG4gICAgcGxheWVycy5maWx0ZXIoKHBsYXllcikgPT4gIXBsYXllci5nZXRSZWFkeSgpKS5sZW5ndGhcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgYWJzLWNlbnRlciBjZW50ZXIgJHtjbGFzc05hbWUgPz8gJyd9YH0gey4uLnByb3BzfT5cbiAgICAgIHt0aXRsZX1cbiAgICAgIHthbGxTdGFydGVkID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtjb25maXJtQnV0dG9ufVxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgICBOb3RlOiBPbmNlIHlvdSBiZWdpbiBhIHNlc3Npb24sIG90aGVycyB3b24ndCBiZSBhYmxlIHRvIGpvaW4gdW50aWxcbiAgICAgICAgICAgIGl0IGVuZHMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiBwbGF5ZXJTdGFydGVkICYmIHBsYXllcnMubGVuZ3RoID49IHJlcXVpcmVkUGxheWVycyA/IChcbiAgICAgICAgYFdhaXRpbmcgZm9yICR7cGxheWVyc05lZWRlZH0gb3RoZXIgcGxheWVyJHtcbiAgICAgICAgICBwbGF5ZXJzTmVlZGVkID09PSAxID8gJycgOiAncydcbiAgICAgICAgfSB0byBqb2luLi4uYFxuICAgICAgKSA6IHBsYXllclN0YXJ0ZWQgPyAoXG4gICAgICAgIGAoTWluaW11bSBvZiAke3JlcXVpcmVkUGxheWVyc30gcGxheWVycyByZXF1aXJlZClgXG4gICAgICApIDogaXNDb25uZWN0ZWQgPyAoXG4gICAgICAgIHN0YXJ0QnV0dG9uXG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZWpvaW5CdXR0b259XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj5cbiAgICAgICAgICAgIEdhbWUgaW4gc2Vzc2lvbi4uLiA8YnIgLz5cbiAgICAgICAgICAgIFBsZWFzZSB3YWl0IGZvciB0aGUgY3VycmVudCBzZXNzaW9uIHRvIGNvbXBsZXRlLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3BsYXllcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgKHtwbGF5ZXJzLmxlbmd0aH0gcGxheWVye3BsYXllcnMubGVuZ3RoID09PSAxID8gJyAnIDogJ3MgJ31cbiAgICAgICAgICBpbiBsb2JieSlcbiAgICAgICAgPC9wPlxuICAgICAgKX1cbiAgICAgIHtwbGF5ZXJTcHJpdGUgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllcnMgZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICB7cGxheWVycy5tYXAoKHBsYXllciwgaSkgPT4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBgJHsoaSAqIDEwMCkgLyAoTUFYX1BMQVlFUlMgLSAxKX0lYCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwbGF5ZXJTcHJpdGUudXJsfSlgLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjAwJSAxMDAlJyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2kgPT09IGN1cnJlbnRQbGF5ZXIgPyAxIDogMC43fSlgLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogcGxheWVyLmdldFJlYWR5KClcbiAgICAgICAgICAgICAgICAgID8gJ25vbmUnXG4gICAgICAgICAgICAgICAgICA6ICdncmF5c2NhbGUoMSkgb3BhY2l0eSg4MCUpJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogcGxheWVyU3ByaXRlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGxheWVyU3ByaXRlLmhlaWdodCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuc21hbGwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS44dm1pbjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMi4ydm1pbjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAyLjh2bWluO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2JieTtcbiJdfQ== */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/lobby.tsx */\"));\n};\n\n_c = Lobby;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Lobby);\n\nvar _c;\n\n$RefreshReg$(_c, \"Lobby\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9ncm91cHNvbHZlL2xvYmJ5LnRzeD85NjdiIl0sIm5hbWVzIjpbIk1BWF9QTEFZRVJTIiwiTG9iYnkiLCJwbGF5ZXJTdGFydGVkIiwiaXNDb25uZWN0ZWQiLCJ0aXRsZSIsInBsYXllcnMiLCJjdXJyZW50UGxheWVyIiwicGxheWVyU3ByaXRlIiwic3RhcnRCdXR0b24iLCJjb25maXJtQnV0dG9uIiwicmVqb2luQnV0dG9uIiwiY2xhc3NOYW1lIiwicmVxdWlyZWRQbGF5ZXJzIiwicHJvcHMiLCJhbGxTdGFydGVkIiwiZXZlcnkiLCJwbGF5ZXIiLCJnZXRSZWFkeSIsImxlbmd0aCIsInBsYXllcnNOZWVkZWQiLCJNYXRoIiwibWF4IiwiZmlsdGVyIiwibWFwIiwiaSIsImJhY2tncm91bmRQb3NpdGlvbiIsImJhY2tncm91bmRJbWFnZSIsInVybCIsImJhY2tncm91bmRTaXplIiwidHJhbnNmb3JtIiwid2lkdGgiLCJoZWlnaHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBc0JBLElBQU1BLFdBQVcsR0FBRyxDQUFwQjs7QUFFQSxJQUFNQyxLQUVMLEdBQUcsU0FGRUEsS0FFRixPQWFFO0FBQUEsTUFaSkMsYUFZSSxRQVpKQSxhQVlJO0FBQUEsTUFYSkMsV0FXSSxRQVhKQSxXQVdJO0FBQUEsTUFWSkMsS0FVSSxRQVZKQSxLQVVJO0FBQUEsTUFUSkMsT0FTSSxRQVRKQSxPQVNJO0FBQUEsTUFSSkMsYUFRSSxRQVJKQSxhQVFJO0FBQUEsTUFQSkMsWUFPSSxRQVBKQSxZQU9JO0FBQUEsTUFOSkMsV0FNSSxRQU5KQSxXQU1JO0FBQUEsTUFMSkMsYUFLSSxRQUxKQSxhQUtJO0FBQUEsTUFKSkMsWUFJSSxRQUpKQSxZQUlJO0FBQUEsTUFISkMsU0FHSSxRQUhKQSxTQUdJO0FBQUEsa0NBRkpDLGVBRUk7QUFBQSxNQUZKQSxlQUVJLHFDQUZjLENBRWQ7QUFBQSxNQUREQyxLQUNDOztBQUNKLE1BQU1DLFVBQVUsR0FDZFgsV0FBVyxJQUNYRSxPQUFPLENBQUNVLEtBQVIsQ0FBYyxVQUFDQyxNQUFEO0FBQUEsV0FBWUEsTUFBTSxDQUFDQyxRQUFQLEVBQVo7QUFBQSxHQUFkLENBREEsSUFFQVosT0FBTyxDQUFDYSxNQUFSLElBQWtCTixlQUhwQjtBQUtBLE1BQU1PLGFBQWEsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQ3BCVCxlQUFlLEdBQUcsQ0FERSxFQUVwQlAsT0FBTyxDQUFDaUIsTUFBUixDQUFlLFVBQUNOLE1BQUQ7QUFBQSxXQUFZLENBQUNBLE1BQU0sQ0FBQ0MsUUFBUCxFQUFiO0FBQUEsR0FBZixFQUErQ0MsTUFGM0IsQ0FBdEI7QUFLQSxTQUNFLG9HQUE0REwsS0FBNUQ7QUFBQSwySEFBcUNGLFNBQXJDLGFBQXFDQSxTQUFyQyxjQUFxQ0EsU0FBckMsR0FBa0QsRUFBbEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUNHUCxLQURILEVBRUdVLFVBQVUsR0FDVCxtRUFDR0wsYUFESCxFQUVFO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1GQUZGLENBRFMsR0FRUFAsYUFBYSxJQUFJRyxPQUFPLENBQUNhLE1BQVIsSUFBa0JOLGVBQW5DLHlCQUNhTyxhQURiLDBCQUVBQSxhQUFhLEtBQUssQ0FBbEIsR0FBc0IsRUFBdEIsR0FBMkIsR0FGM0IsbUJBSUFqQixhQUFhLHlCQUNBVSxlQURBLDBCQUViVCxXQUFXLEdBQ2JLLFdBRGEsR0FHYixtRUFDR0UsWUFESCxFQUVFO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLDRCQUNxQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFEckIscURBRkYsQ0FuQkosRUEyQkdMLE9BQU8sQ0FBQ2EsTUFBUixHQUFpQixDQUFqQixJQUNDO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFVBQ0liLE9BQU8sQ0FBQ2EsTUFEWixhQUMyQmIsT0FBTyxDQUFDYSxNQUFSLEtBQW1CLENBQW5CLEdBQXVCLEdBQXZCLEdBQTZCLElBRHhELGNBNUJKLEVBaUNHWCxZQUFZLElBQ1g7QUFBQSx1Q0FBZSxxQkFBZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0dGLE9BQU8sQ0FBQ2tCLEdBQVIsQ0FBWSxVQUFDUCxNQUFELEVBQVNRLENBQVQ7QUFBQSxXQUNYO0FBQ0UsU0FBRyxFQUFFQSxDQURQO0FBRUUsV0FBSyxFQUFFO0FBQ0xDLDBCQUFrQixZQUFNRCxDQUFDLEdBQUcsR0FBTCxJQUFheEIsV0FBVyxHQUFHLENBQTNCLENBQUwsTUFEYjtBQUVMMEIsdUJBQWUsZ0JBQVNuQixZQUFZLENBQUNvQixHQUF0QixNQUZWO0FBR0xDLHNCQUFjLEVBQUUsV0FIWDtBQUlMQyxpQkFBUyxrQkFBV0wsQ0FBQyxLQUFLbEIsYUFBTixHQUFzQixDQUF0QixHQUEwQixHQUFyQyxNQUpKO0FBS0xnQixjQUFNLEVBQUVOLE1BQU0sQ0FBQ0MsUUFBUCxLQUNKLE1BREksR0FFSiwyQkFQQztBQVFMYSxhQUFLLEVBQUV2QixZQUFZLENBQUN1QixLQVJmO0FBU0xDLGNBQU0sRUFBRXhCLFlBQVksQ0FBQ3dCO0FBVGhCLE9BRlQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BRFc7QUFBQSxHQUFaLENBREgsQ0FsQ0o7QUFBQTtBQUFBO0FBQUEsMmpKQURGO0FBZ0VELENBMUZEOztLQUFNOUIsSztBQTRGU0Esb0VBQWYiLCJmaWxlIjoiLi9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9nYW1lX3BiJztcbmltcG9ydCB7IGdldEltYWdlT2Zmc2V0IH0gZnJvbSAndXRpbHMvZ2FtZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHBsYXllclN0YXJ0ZWQ6IGJvb2xlYW47XG4gIGlzQ29ubmVjdGVkOiBib29sZWFuO1xuICB0aXRsZT86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcGxheWVyczogUGxheWVyW107XG4gIGN1cnJlbnRQbGF5ZXI6IG51bWJlcjtcbiAgcGxheWVyU3ByaXRlPzoge1xuICAgIHVybDogc3RyaW5nO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gIH07XG4gIHN0YXJ0QnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGNvbmZpcm1CdXR0b246IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcmVqb2luQnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIHJlcXVpcmVkUGxheWVycz86IG51bWJlcjtcbn1cblxuY29uc3QgTUFYX1BMQVlFUlMgPSA2O1xuXG5jb25zdCBMb2JieTogRnVuY3Rpb25Db21wb25lbnQ8XG4gIFByb3BzICYgT21pdDxSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+LCAndGl0bGUnPlxuPiA9ICh7XG4gIHBsYXllclN0YXJ0ZWQsXG4gIGlzQ29ubmVjdGVkLFxuICB0aXRsZSxcbiAgcGxheWVycyxcbiAgY3VycmVudFBsYXllcixcbiAgcGxheWVyU3ByaXRlLFxuICBzdGFydEJ1dHRvbixcbiAgY29uZmlybUJ1dHRvbixcbiAgcmVqb2luQnV0dG9uLFxuICBjbGFzc05hbWUsXG4gIHJlcXVpcmVkUGxheWVycyA9IDEsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGFsbFN0YXJ0ZWQgPVxuICAgIGlzQ29ubmVjdGVkICYmXG4gICAgcGxheWVycy5ldmVyeSgocGxheWVyKSA9PiBwbGF5ZXIuZ2V0UmVhZHkoKSkgJiZcbiAgICBwbGF5ZXJzLmxlbmd0aCA+PSByZXF1aXJlZFBsYXllcnM7XG5cbiAgY29uc3QgcGxheWVyc05lZWRlZCA9IE1hdGgubWF4KFxuICAgIHJlcXVpcmVkUGxheWVycyAtIDEsXG4gICAgcGxheWVycy5maWx0ZXIoKHBsYXllcikgPT4gIXBsYXllci5nZXRSZWFkeSgpKS5sZW5ndGhcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgYWJzLWNlbnRlciBjZW50ZXIgJHtjbGFzc05hbWUgPz8gJyd9YH0gey4uLnByb3BzfT5cbiAgICAgIHt0aXRsZX1cbiAgICAgIHthbGxTdGFydGVkID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtjb25maXJtQnV0dG9ufVxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgICBOb3RlOiBPbmNlIHlvdSBiZWdpbiBhIHNlc3Npb24sIG90aGVycyB3b24ndCBiZSBhYmxlIHRvIGpvaW4gdW50aWxcbiAgICAgICAgICAgIGl0IGVuZHMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiBwbGF5ZXJTdGFydGVkICYmIHBsYXllcnMubGVuZ3RoID49IHJlcXVpcmVkUGxheWVycyA/IChcbiAgICAgICAgYFdhaXRpbmcgZm9yICR7cGxheWVyc05lZWRlZH0gb3RoZXIgcGxheWVyJHtcbiAgICAgICAgICBwbGF5ZXJzTmVlZGVkID09PSAxID8gJycgOiAncydcbiAgICAgICAgfSB0byBqb2luLi4uYFxuICAgICAgKSA6IHBsYXllclN0YXJ0ZWQgPyAoXG4gICAgICAgIGAoTWluaW11bSBvZiAke3JlcXVpcmVkUGxheWVyc30gcGxheWVycyByZXF1aXJlZClgXG4gICAgICApIDogaXNDb25uZWN0ZWQgPyAoXG4gICAgICAgIHN0YXJ0QnV0dG9uXG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZWpvaW5CdXR0b259XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj5cbiAgICAgICAgICAgIEdhbWUgaW4gc2Vzc2lvbi4uLiA8YnIgLz5cbiAgICAgICAgICAgIFBsZWFzZSB3YWl0IGZvciB0aGUgY3VycmVudCBzZXNzaW9uIHRvIGNvbXBsZXRlLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3BsYXllcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgKHtwbGF5ZXJzLmxlbmd0aH0gcGxheWVye3BsYXllcnMubGVuZ3RoID09PSAxID8gJyAnIDogJ3MgJ31cbiAgICAgICAgICBpbiBsb2JieSlcbiAgICAgICAgPC9wPlxuICAgICAgKX1cbiAgICAgIHtwbGF5ZXJTcHJpdGUgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllcnMgZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICB7cGxheWVycy5tYXAoKHBsYXllciwgaSkgPT4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBgJHsoaSAqIDEwMCkgLyAoTUFYX1BMQVlFUlMgLSAxKX0lYCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwbGF5ZXJTcHJpdGUudXJsfSlgLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjAwJSAxMDAlJyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2kgPT09IGN1cnJlbnRQbGF5ZXIgPyAxIDogMC43fSlgLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogcGxheWVyLmdldFJlYWR5KClcbiAgICAgICAgICAgICAgICAgID8gJ25vbmUnXG4gICAgICAgICAgICAgICAgICA6ICdncmF5c2NhbGUoMSkgb3BhY2l0eSg4MCUpJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogcGxheWVyU3ByaXRlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGxheWVyU3ByaXRlLmhlaWdodCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuc21hbGwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS44dm1pbjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMi4ydm1pbjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAyLjh2bWluO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2JieTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/groupsolve/lobby.tsx\n");

/***/ }),

/***/ "./schema/protos/fig_pb.js":
/*!*********************************!*\
  !*** ./schema/protos/fig_pb.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {// source: fig.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = __webpack_require__(/*! google-protobuf */ \"./node_modules/google-protobuf/google-protobuf.js\");\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar game_pb = __webpack_require__(/*! ./game_pb.js */ \"./schema/protos/game_pb.js\");\n\ngoog.object.extend(proto, game_pb);\n\nvar math_pb = __webpack_require__(/*! ./math_pb.js */ \"./schema/protos/math_pb.js\");\n\ngoog.object.extend(proto, math_pb);\ngoog.exportSymbol('proto.FigGameAction', null, global);\ngoog.exportSymbol('proto.FigGameState', null, global);\ngoog.exportSymbol('proto.FigGameState.FigState', null, global);\ngoog.exportSymbol('proto.Fish', null, global);\ngoog.exportSymbol('proto.FishType', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.Fish = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Fish, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Fish.displayName = 'proto.Fish';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.FigGameState = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.FigGameState.repeatedFields_, null);\n};\n\ngoog.inherits(proto.FigGameState, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.FigGameState.displayName = 'proto.FigGameState';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.FigGameAction = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.FigGameAction, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.FigGameAction.displayName = 'proto.FigGameAction';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Fish.prototype.toObject = function (opt_includeInstance) {\n    return proto.Fish.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Fish} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Fish.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      fishType: jspb.Message.getFieldWithDefault(msg, 1, 0),\n      coordinate: (f = msg.getCoordinate()) && math_pb.Coordinate.toObject(includeInstance, f),\n      size: jspb.Message.getFieldWithDefault(msg, 3, 0),\n      facingLeft: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),\n      invertColors: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Fish}\n */\n\n\nproto.Fish.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Fish();\n  return proto.Fish.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Fish} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Fish}\n */\n\n\nproto.Fish.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!proto.FishType} */\n        reader.readEnum();\n        msg.setFishType(value);\n        break;\n\n      case 2:\n        var value = new math_pb.Coordinate();\n        reader.readMessage(value, math_pb.Coordinate.deserializeBinaryFromReader);\n        msg.setCoordinate(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setSize(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setFacingLeft(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setInvertColors(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Fish.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Fish.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Fish} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Fish.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getFishType();\n\n  if (f !== 0.0) {\n    writer.writeEnum(1, f);\n  }\n\n  f = message.getCoordinate();\n\n  if (f != null) {\n    writer.writeMessage(2, f, math_pb.Coordinate.serializeBinaryToWriter);\n  }\n\n  f = message.getSize();\n\n  if (f !== 0) {\n    writer.writeInt32(3, f);\n  }\n\n  f = message.getFacingLeft();\n\n  if (f) {\n    writer.writeBool(4, f);\n  }\n\n  f = message.getInvertColors();\n\n  if (f) {\n    writer.writeBool(5, f);\n  }\n};\n/**\n * optional FishType fish_type = 1;\n * @return {!proto.FishType}\n */\n\n\nproto.Fish.prototype.getFishType = function () {\n  return (\n    /** @type {!proto.FishType} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/**\n * @param {!proto.FishType} value\n * @return {!proto.Fish} returns this\n */\n\n\nproto.Fish.prototype.setFishType = function (value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n/**\n * optional Coordinate coordinate = 2;\n * @return {?proto.Coordinate}\n */\n\n\nproto.Fish.prototype.getCoordinate = function () {\n  return (\n    /** @type{?proto.Coordinate} */\n    jspb.Message.getWrapperField(this, math_pb.Coordinate, 2)\n  );\n};\n/**\n * @param {?proto.Coordinate|undefined} value\n * @return {!proto.Fish} returns this\n*/\n\n\nproto.Fish.prototype.setCoordinate = function (value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.Fish} returns this\n */\n\n\nproto.Fish.prototype.clearCoordinate = function () {\n  return this.setCoordinate(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.Fish.prototype.hasCoordinate = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional int32 size = 3;\n * @return {number}\n */\n\n\nproto.Fish.prototype.getSize = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.Fish} returns this\n */\n\n\nproto.Fish.prototype.setSize = function (value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n/**\n * optional bool facing_left = 4;\n * @return {boolean}\n */\n\n\nproto.Fish.prototype.getFacingLeft = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 4, false)\n  );\n};\n/**\n * @param {boolean} value\n * @return {!proto.Fish} returns this\n */\n\n\nproto.Fish.prototype.setFacingLeft = function (value) {\n  return jspb.Message.setProto3BooleanField(this, 4, value);\n};\n/**\n * optional bool invert_colors = 5;\n * @return {boolean}\n */\n\n\nproto.Fish.prototype.getInvertColors = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 5, false)\n  );\n};\n/**\n * @param {boolean} value\n * @return {!proto.Fish} returns this\n */\n\n\nproto.Fish.prototype.setInvertColors = function (value) {\n  return jspb.Message.setProto3BooleanField(this, 5, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.FigGameState.repeatedFields_ = [3, 4, 5, 6, 9];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.FigGameState.prototype.toObject = function (opt_includeInstance) {\n    return proto.FigGameState.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.FigGameState} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.FigGameState.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      baseState: (f = msg.getBaseState()) && game_pb.GameState.toObject(includeInstance, f),\n      state: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      leftPictureList: jspb.Message.toObjectList(msg.getLeftPictureList(), proto.Fish.toObject, includeInstance),\n      rightPictureList: jspb.Message.toObjectList(msg.getRightPictureList(), proto.Fish.toObject, includeInstance),\n      wrongGuessesList: jspb.Message.toObjectList(msg.getWrongGuessesList(), math_pb.Coordinate.toObject, includeInstance),\n      correctGuessesList: jspb.Message.toObjectList(msg.getCorrectGuessesList(), math_pb.Coordinate.toObject, includeInstance),\n      numLives: jspb.Message.getFieldWithDefault(msg, 7, 0),\n      card: jspb.Message.getFieldWithDefault(msg, 8, 0),\n      missedGuessesList: jspb.Message.toObjectList(msg.getMissedGuessesList(), math_pb.Coordinate.toObject, includeInstance)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.FigGameState}\n */\n\n\nproto.FigGameState.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.FigGameState();\n  return proto.FigGameState.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.FigGameState} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.FigGameState}\n */\n\n\nproto.FigGameState.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new game_pb.GameState();\n        reader.readMessage(value, game_pb.GameState.deserializeBinaryFromReader);\n        msg.setBaseState(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.FigGameState.FigState} */\n        reader.readEnum();\n        msg.setState(value);\n        break;\n\n      case 3:\n        var value = new proto.Fish();\n        reader.readMessage(value, proto.Fish.deserializeBinaryFromReader);\n        msg.addLeftPicture(value);\n        break;\n\n      case 4:\n        var value = new proto.Fish();\n        reader.readMessage(value, proto.Fish.deserializeBinaryFromReader);\n        msg.addRightPicture(value);\n        break;\n\n      case 5:\n        var value = new math_pb.Coordinate();\n        reader.readMessage(value, math_pb.Coordinate.deserializeBinaryFromReader);\n        msg.addWrongGuesses(value);\n        break;\n\n      case 6:\n        var value = new math_pb.Coordinate();\n        reader.readMessage(value, math_pb.Coordinate.deserializeBinaryFromReader);\n        msg.addCorrectGuesses(value);\n        break;\n\n      case 7:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setNumLives(value);\n        break;\n\n      case 8:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setCard(value);\n        break;\n\n      case 9:\n        var value = new math_pb.Coordinate();\n        reader.readMessage(value, math_pb.Coordinate.deserializeBinaryFromReader);\n        msg.addMissedGuesses(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.FigGameState.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.FigGameState.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.FigGameState} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.FigGameState.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getBaseState();\n\n  if (f != null) {\n    writer.writeMessage(1, f, game_pb.GameState.serializeBinaryToWriter);\n  }\n\n  f = message.getState();\n\n  if (f !== 0.0) {\n    writer.writeEnum(2, f);\n  }\n\n  f = message.getLeftPictureList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(3, f, proto.Fish.serializeBinaryToWriter);\n  }\n\n  f = message.getRightPictureList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(4, f, proto.Fish.serializeBinaryToWriter);\n  }\n\n  f = message.getWrongGuessesList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(5, f, math_pb.Coordinate.serializeBinaryToWriter);\n  }\n\n  f = message.getCorrectGuessesList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(6, f, math_pb.Coordinate.serializeBinaryToWriter);\n  }\n\n  f = message.getNumLives();\n\n  if (f !== 0) {\n    writer.writeInt32(7, f);\n  }\n\n  f = message.getCard();\n\n  if (f !== 0) {\n    writer.writeInt32(8, f);\n  }\n\n  f = message.getMissedGuessesList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(9, f, math_pb.Coordinate.serializeBinaryToWriter);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.FigGameState.FigState = {\n  WAITING_FOR_START: 0,\n  LOOKING_FOR_DIFFS: 1\n};\n/**\n * optional GameState base_state = 1;\n * @return {?proto.GameState}\n */\n\nproto.FigGameState.prototype.getBaseState = function () {\n  return (\n    /** @type{?proto.GameState} */\n    jspb.Message.getWrapperField(this, game_pb.GameState, 1)\n  );\n};\n/**\n * @param {?proto.GameState|undefined} value\n * @return {!proto.FigGameState} returns this\n*/\n\n\nproto.FigGameState.prototype.setBaseState = function (value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.FigGameState} returns this\n */\n\n\nproto.FigGameState.prototype.clearBaseState = function () {\n  return this.setBaseState(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.FigGameState.prototype.hasBaseState = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional FigState state = 2;\n * @return {!proto.FigGameState.FigState}\n */\n\n\nproto.FigGameState.prototype.getState = function () {\n  return (\n    /** @type {!proto.FigGameState.FigState} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {!proto.FigGameState.FigState} value\n * @return {!proto.FigGameState} returns this\n */\n\n\nproto.FigGameState.prototype.setState = function (value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n/**\n * repeated Fish left_picture = 3;\n * @return {!Array<!proto.Fish>}\n */\n\n\nproto.FigGameState.prototype.getLeftPictureList = function () {\n  return (\n    /** @type{!Array<!proto.Fish>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.Fish, 3)\n  );\n};\n/**\n * @param {!Array<!proto.Fish>} value\n * @return {!proto.FigGameState} returns this\n*/\n\n\nproto.FigGameState.prototype.setLeftPictureList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n/**\n * @param {!proto.Fish=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Fish}\n */\n\n\nproto.FigGameState.prototype.addLeftPicture = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Fish, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.FigGameState} returns this\n */\n\n\nproto.FigGameState.prototype.clearLeftPictureList = function () {\n  return this.setLeftPictureList([]);\n};\n/**\n * repeated Fish right_picture = 4;\n * @return {!Array<!proto.Fish>}\n */\n\n\nproto.FigGameState.prototype.getRightPictureList = function () {\n  return (\n    /** @type{!Array<!proto.Fish>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.Fish, 4)\n  );\n};\n/**\n * @param {!Array<!proto.Fish>} value\n * @return {!proto.FigGameState} returns this\n*/\n\n\nproto.FigGameState.prototype.setRightPictureList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 4, value);\n};\n/**\n * @param {!proto.Fish=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Fish}\n */\n\n\nproto.FigGameState.prototype.addRightPicture = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Fish, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.FigGameState} returns this\n */\n\n\nproto.FigGameState.prototype.clearRightPictureList = function () {\n  return this.setRightPictureList([]);\n};\n/**\n * repeated Coordinate wrong_guesses = 5;\n * @return {!Array<!proto.Coordinate>}\n */\n\n\nproto.FigGameState.prototype.getWrongGuessesList = function () {\n  return (\n    /** @type{!Array<!proto.Coordinate>} */\n    jspb.Message.getRepeatedWrapperField(this, math_pb.Coordinate, 5)\n  );\n};\n/**\n * @param {!Array<!proto.Coordinate>} value\n * @return {!proto.FigGameState} returns this\n*/\n\n\nproto.FigGameState.prototype.setWrongGuessesList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n/**\n * @param {!proto.Coordinate=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Coordinate}\n */\n\n\nproto.FigGameState.prototype.addWrongGuesses = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Coordinate, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.FigGameState} returns this\n */\n\n\nproto.FigGameState.prototype.clearWrongGuessesList = function () {\n  return this.setWrongGuessesList([]);\n};\n/**\n * repeated Coordinate correct_guesses = 6;\n * @return {!Array<!proto.Coordinate>}\n */\n\n\nproto.FigGameState.prototype.getCorrectGuessesList = function () {\n  return (\n    /** @type{!Array<!proto.Coordinate>} */\n    jspb.Message.getRepeatedWrapperField(this, math_pb.Coordinate, 6)\n  );\n};\n/**\n * @param {!Array<!proto.Coordinate>} value\n * @return {!proto.FigGameState} returns this\n*/\n\n\nproto.FigGameState.prototype.setCorrectGuessesList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 6, value);\n};\n/**\n * @param {!proto.Coordinate=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Coordinate}\n */\n\n\nproto.FigGameState.prototype.addCorrectGuesses = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Coordinate, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.FigGameState} returns this\n */\n\n\nproto.FigGameState.prototype.clearCorrectGuessesList = function () {\n  return this.setCorrectGuessesList([]);\n};\n/**\n * optional int32 num_lives = 7;\n * @return {number}\n */\n\n\nproto.FigGameState.prototype.getNumLives = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 7, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.FigGameState} returns this\n */\n\n\nproto.FigGameState.prototype.setNumLives = function (value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n/**\n * optional int32 card = 8;\n * @return {number}\n */\n\n\nproto.FigGameState.prototype.getCard = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 8, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.FigGameState} returns this\n */\n\n\nproto.FigGameState.prototype.setCard = function (value) {\n  return jspb.Message.setProto3IntField(this, 8, value);\n};\n/**\n * repeated Coordinate missed_guesses = 9;\n * @return {!Array<!proto.Coordinate>}\n */\n\n\nproto.FigGameState.prototype.getMissedGuessesList = function () {\n  return (\n    /** @type{!Array<!proto.Coordinate>} */\n    jspb.Message.getRepeatedWrapperField(this, math_pb.Coordinate, 9)\n  );\n};\n/**\n * @param {!Array<!proto.Coordinate>} value\n * @return {!proto.FigGameState} returns this\n*/\n\n\nproto.FigGameState.prototype.setMissedGuessesList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 9, value);\n};\n/**\n * @param {!proto.Coordinate=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Coordinate}\n */\n\n\nproto.FigGameState.prototype.addMissedGuesses = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.Coordinate, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.FigGameState} returns this\n */\n\n\nproto.FigGameState.prototype.clearMissedGuessesList = function () {\n  return this.setMissedGuessesList([]);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.FigGameAction.prototype.toObject = function (opt_includeInstance) {\n    return proto.FigGameAction.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.FigGameAction} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.FigGameAction.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      baseAction: (f = msg.getBaseAction()) && game_pb.GameAction.toObject(includeInstance, f),\n      click: (f = msg.getClick()) && math_pb.Coordinate.toObject(includeInstance, f)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.FigGameAction}\n */\n\n\nproto.FigGameAction.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.FigGameAction();\n  return proto.FigGameAction.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.FigGameAction} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.FigGameAction}\n */\n\n\nproto.FigGameAction.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new game_pb.GameAction();\n        reader.readMessage(value, game_pb.GameAction.deserializeBinaryFromReader);\n        msg.setBaseAction(value);\n        break;\n\n      case 2:\n        var value = new math_pb.Coordinate();\n        reader.readMessage(value, math_pb.Coordinate.deserializeBinaryFromReader);\n        msg.setClick(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.FigGameAction.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.FigGameAction.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.FigGameAction} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.FigGameAction.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getBaseAction();\n\n  if (f != null) {\n    writer.writeMessage(1, f, game_pb.GameAction.serializeBinaryToWriter);\n  }\n\n  f = message.getClick();\n\n  if (f != null) {\n    writer.writeMessage(2, f, math_pb.Coordinate.serializeBinaryToWriter);\n  }\n};\n/**\n * optional GameAction base_action = 1;\n * @return {?proto.GameAction}\n */\n\n\nproto.FigGameAction.prototype.getBaseAction = function () {\n  return (\n    /** @type{?proto.GameAction} */\n    jspb.Message.getWrapperField(this, game_pb.GameAction, 1)\n  );\n};\n/**\n * @param {?proto.GameAction|undefined} value\n * @return {!proto.FigGameAction} returns this\n*/\n\n\nproto.FigGameAction.prototype.setBaseAction = function (value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.FigGameAction} returns this\n */\n\n\nproto.FigGameAction.prototype.clearBaseAction = function () {\n  return this.setBaseAction(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.FigGameAction.prototype.hasBaseAction = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional Coordinate click = 2;\n * @return {?proto.Coordinate}\n */\n\n\nproto.FigGameAction.prototype.getClick = function () {\n  return (\n    /** @type{?proto.Coordinate} */\n    jspb.Message.getWrapperField(this, math_pb.Coordinate, 2)\n  );\n};\n/**\n * @param {?proto.Coordinate|undefined} value\n * @return {!proto.FigGameAction} returns this\n*/\n\n\nproto.FigGameAction.prototype.setClick = function (value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.FigGameAction} returns this\n */\n\n\nproto.FigGameAction.prototype.clearClick = function () {\n  return this.setClick(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.FigGameAction.prototype.hasClick = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * @enum {number}\n */\n\n\nproto.FishType = {\n  FISH_TYPE_UNKNOWN: 0,\n  BITTERLING: 1,\n  PALE_CHUB: 2,\n  CRUCIAN_CARP: 3,\n  DACE: 4,\n  CARP: 5,\n  KOI: 6,\n  GOLDFISH: 7,\n  POP_EYED_GOLDFISH: 8,\n  RANCHU_GOLDFISH: 9,\n  KILLIFISH: 10,\n  CRAWFISH: 11,\n  SOFT_SHELLED_TURTLE: 12,\n  SNAPPING_TURTLE: 13,\n  TADPOLE: 14,\n  FROG: 15,\n  FRESHWATER_GOBY: 16,\n  LOACH: 17,\n  CATFISH: 18,\n  GIANT_SNAKEHEAD: 19,\n  BLUEGILL: 20,\n  YELLOW_PERCH: 21,\n  BLACK_BASS: 22,\n  TILAPIA: 23,\n  PIKE: 24,\n  POND_SMELT: 25,\n  SWEETFISH: 26,\n  CHERRY_SALMON: 27,\n  CHAR: 28,\n  GOLDEN_TROUT: 29,\n  STRINGFISH: 30,\n  SALMON: 31,\n  KING_SALMON: 32,\n  MITTEN_CRAB: 33,\n  GUPPY: 34,\n  NIBBLE_FISH: 35,\n  ANGELFISH: 36,\n  BETTA: 37,\n  NEON_TETRA: 38,\n  RAINBOWFISH: 39,\n  PIRANHA: 40\n};\ngoog.object.extend(exports, proto);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc2NoZW1hL3Byb3Rvcy9maWdfcGIuanM/ZDAwZCJdLCJuYW1lcyI6WyJqc3BiIiwicmVxdWlyZSIsImdvb2ciLCJnbG9iYWwiLCJGdW5jdGlvbiIsImdhbWVfcGIiLCJvYmplY3QiLCJleHRlbmQiLCJwcm90byIsIm1hdGhfcGIiLCJleHBvcnRTeW1ib2wiLCJGaXNoIiwib3B0X2RhdGEiLCJNZXNzYWdlIiwiaW5pdGlhbGl6ZSIsImluaGVyaXRzIiwiREVCVUciLCJDT01QSUxFRCIsImRpc3BsYXlOYW1lIiwiRmlnR2FtZVN0YXRlIiwicmVwZWF0ZWRGaWVsZHNfIiwiRmlnR2FtZUFjdGlvbiIsIkdFTkVSQVRFX1RPX09CSkVDVCIsInByb3RvdHlwZSIsInRvT2JqZWN0Iiwib3B0X2luY2x1ZGVJbnN0YW5jZSIsImluY2x1ZGVJbnN0YW5jZSIsIm1zZyIsImYiLCJvYmoiLCJmaXNoVHlwZSIsImdldEZpZWxkV2l0aERlZmF1bHQiLCJjb29yZGluYXRlIiwiZ2V0Q29vcmRpbmF0ZSIsIkNvb3JkaW5hdGUiLCJzaXplIiwiZmFjaW5nTGVmdCIsImdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0IiwiaW52ZXJ0Q29sb3JzIiwiJGpzcGJNZXNzYWdlSW5zdGFuY2UiLCJkZXNlcmlhbGl6ZUJpbmFyeSIsImJ5dGVzIiwicmVhZGVyIiwiQmluYXJ5UmVhZGVyIiwiZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyIiwibmV4dEZpZWxkIiwiaXNFbmRHcm91cCIsImZpZWxkIiwiZ2V0RmllbGROdW1iZXIiLCJ2YWx1ZSIsInJlYWRFbnVtIiwic2V0RmlzaFR5cGUiLCJyZWFkTWVzc2FnZSIsInNldENvb3JkaW5hdGUiLCJyZWFkSW50MzIiLCJzZXRTaXplIiwicmVhZEJvb2wiLCJzZXRGYWNpbmdMZWZ0Iiwic2V0SW52ZXJ0Q29sb3JzIiwic2tpcEZpZWxkIiwic2VyaWFsaXplQmluYXJ5Iiwid3JpdGVyIiwiQmluYXJ5V3JpdGVyIiwic2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIiLCJnZXRSZXN1bHRCdWZmZXIiLCJtZXNzYWdlIiwidW5kZWZpbmVkIiwiZ2V0RmlzaFR5cGUiLCJ3cml0ZUVudW0iLCJ3cml0ZU1lc3NhZ2UiLCJnZXRTaXplIiwid3JpdGVJbnQzMiIsImdldEZhY2luZ0xlZnQiLCJ3cml0ZUJvb2wiLCJnZXRJbnZlcnRDb2xvcnMiLCJzZXRQcm90bzNFbnVtRmllbGQiLCJnZXRXcmFwcGVyRmllbGQiLCJzZXRXcmFwcGVyRmllbGQiLCJjbGVhckNvb3JkaW5hdGUiLCJoYXNDb29yZGluYXRlIiwiZ2V0RmllbGQiLCJzZXRQcm90bzNJbnRGaWVsZCIsInNldFByb3RvM0Jvb2xlYW5GaWVsZCIsImJhc2VTdGF0ZSIsImdldEJhc2VTdGF0ZSIsIkdhbWVTdGF0ZSIsInN0YXRlIiwibGVmdFBpY3R1cmVMaXN0IiwidG9PYmplY3RMaXN0IiwiZ2V0TGVmdFBpY3R1cmVMaXN0IiwicmlnaHRQaWN0dXJlTGlzdCIsImdldFJpZ2h0UGljdHVyZUxpc3QiLCJ3cm9uZ0d1ZXNzZXNMaXN0IiwiZ2V0V3JvbmdHdWVzc2VzTGlzdCIsImNvcnJlY3RHdWVzc2VzTGlzdCIsImdldENvcnJlY3RHdWVzc2VzTGlzdCIsIm51bUxpdmVzIiwiY2FyZCIsIm1pc3NlZEd1ZXNzZXNMaXN0IiwiZ2V0TWlzc2VkR3Vlc3Nlc0xpc3QiLCJzZXRCYXNlU3RhdGUiLCJzZXRTdGF0ZSIsImFkZExlZnRQaWN0dXJlIiwiYWRkUmlnaHRQaWN0dXJlIiwiYWRkV3JvbmdHdWVzc2VzIiwiYWRkQ29ycmVjdEd1ZXNzZXMiLCJzZXROdW1MaXZlcyIsInNldENhcmQiLCJhZGRNaXNzZWRHdWVzc2VzIiwiZ2V0U3RhdGUiLCJsZW5ndGgiLCJ3cml0ZVJlcGVhdGVkTWVzc2FnZSIsImdldE51bUxpdmVzIiwiZ2V0Q2FyZCIsIkZpZ1N0YXRlIiwiV0FJVElOR19GT1JfU1RBUlQiLCJMT09LSU5HX0ZPUl9ESUZGUyIsImNsZWFyQmFzZVN0YXRlIiwiaGFzQmFzZVN0YXRlIiwiZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQiLCJzZXRMZWZ0UGljdHVyZUxpc3QiLCJzZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCIsIm9wdF92YWx1ZSIsIm9wdF9pbmRleCIsImFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQiLCJjbGVhckxlZnRQaWN0dXJlTGlzdCIsInNldFJpZ2h0UGljdHVyZUxpc3QiLCJjbGVhclJpZ2h0UGljdHVyZUxpc3QiLCJzZXRXcm9uZ0d1ZXNzZXNMaXN0IiwiY2xlYXJXcm9uZ0d1ZXNzZXNMaXN0Iiwic2V0Q29ycmVjdEd1ZXNzZXNMaXN0IiwiY2xlYXJDb3JyZWN0R3Vlc3Nlc0xpc3QiLCJzZXRNaXNzZWRHdWVzc2VzTGlzdCIsImNsZWFyTWlzc2VkR3Vlc3Nlc0xpc3QiLCJiYXNlQWN0aW9uIiwiZ2V0QmFzZUFjdGlvbiIsIkdhbWVBY3Rpb24iLCJjbGljayIsImdldENsaWNrIiwic2V0QmFzZUFjdGlvbiIsInNldENsaWNrIiwiY2xlYXJCYXNlQWN0aW9uIiwiaGFzQmFzZUFjdGlvbiIsImNsZWFyQ2xpY2siLCJoYXNDbGljayIsIkZpc2hUeXBlIiwiRklTSF9UWVBFX1VOS05PV04iLCJCSVRURVJMSU5HIiwiUEFMRV9DSFVCIiwiQ1JVQ0lBTl9DQVJQIiwiREFDRSIsIkNBUlAiLCJLT0kiLCJHT0xERklTSCIsIlBPUF9FWUVEX0dPTERGSVNIIiwiUkFOQ0hVX0dPTERGSVNIIiwiS0lMTElGSVNIIiwiQ1JBV0ZJU0giLCJTT0ZUX1NIRUxMRURfVFVSVExFIiwiU05BUFBJTkdfVFVSVExFIiwiVEFEUE9MRSIsIkZST0ciLCJGUkVTSFdBVEVSX0dPQlkiLCJMT0FDSCIsIkNBVEZJU0giLCJHSUFOVF9TTkFLRUhFQUQiLCJCTFVFR0lMTCIsIllFTExPV19QRVJDSCIsIkJMQUNLX0JBU1MiLCJUSUxBUElBIiwiUElLRSIsIlBPTkRfU01FTFQiLCJTV0VFVEZJU0giLCJDSEVSUllfU0FMTU9OIiwiQ0hBUiIsIkdPTERFTl9UUk9VVCIsIlNUUklOR0ZJU0giLCJTQUxNT04iLCJLSU5HX1NBTE1PTiIsIk1JVFRFTl9DUkFCIiwiR1VQUFkiLCJOSUJCTEVfRklTSCIsIkFOR0VMRklTSCIsIkJFVFRBIiwiTkVPTl9URVRSQSIsIlJBSU5CT1dGSVNIIiwiUElSQU5IQSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBOzs7Ozs7O0FBT0E7QUFFQSxJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsMEVBQUQsQ0FBbEI7O0FBQ0EsSUFBSUMsSUFBSSxHQUFHRixJQUFYO0FBQ0EsSUFBSUcsTUFBTSxHQUFHQyxRQUFRLENBQUMsYUFBRCxDQUFSLEVBQWI7O0FBRUEsSUFBSUMsT0FBTyxHQUFHSixtQkFBTyxDQUFDLGdEQUFELENBQXJCOztBQUNBQyxJQUFJLENBQUNJLE1BQUwsQ0FBWUMsTUFBWixDQUFtQkMsS0FBbkIsRUFBMEJILE9BQTFCOztBQUNBLElBQUlJLE9BQU8sR0FBR1IsbUJBQU8sQ0FBQyxnREFBRCxDQUFyQjs7QUFDQUMsSUFBSSxDQUFDSSxNQUFMLENBQVlDLE1BQVosQ0FBbUJDLEtBQW5CLEVBQTBCQyxPQUExQjtBQUNBUCxJQUFJLENBQUNRLFlBQUwsQ0FBa0IscUJBQWxCLEVBQXlDLElBQXpDLEVBQStDUCxNQUEvQztBQUNBRCxJQUFJLENBQUNRLFlBQUwsQ0FBa0Isb0JBQWxCLEVBQXdDLElBQXhDLEVBQThDUCxNQUE5QztBQUNBRCxJQUFJLENBQUNRLFlBQUwsQ0FBa0IsNkJBQWxCLEVBQWlELElBQWpELEVBQXVEUCxNQUF2RDtBQUNBRCxJQUFJLENBQUNRLFlBQUwsQ0FBa0IsWUFBbEIsRUFBZ0MsSUFBaEMsRUFBc0NQLE1BQXRDO0FBQ0FELElBQUksQ0FBQ1EsWUFBTCxDQUFrQixnQkFBbEIsRUFBb0MsSUFBcEMsRUFBMENQLE1BQTFDO0FBQ0E7Ozs7Ozs7Ozs7O0FBVUFLLEtBQUssQ0FBQ0csSUFBTixHQUFhLFVBQVNDLFFBQVQsRUFBbUI7QUFDOUJaLE1BQUksQ0FBQ2EsT0FBTCxDQUFhQyxVQUFiLENBQXdCLElBQXhCLEVBQThCRixRQUE5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WyIvLyBzb3VyY2U6IGZpZy5wcm90b1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3XG4gKiBAZW5oYW5jZWFibGVcbiAqIEBzdXBwcmVzcyB7bWVzc2FnZUNvbnZlbnRpb25zfSBKUyBDb21waWxlciByZXBvcnRzIGFuIGVycm9yIGlmIGEgdmFyaWFibGUgb3JcbiAqICAgICBmaWVsZCBzdGFydHMgd2l0aCAnTVNHXycgYW5kIGlzbid0IGEgdHJhbnNsYXRhYmxlIG1lc3NhZ2UuXG4gKiBAcHVibGljXG4gKi9cbi8vIEdFTkVSQVRFRCBDT0RFIC0tIERPIE5PVCBFRElUIVxuXG52YXIganNwYiA9IHJlcXVpcmUoJ2dvb2dsZS1wcm90b2J1ZicpO1xudmFyIGdvb2cgPSBqc3BiO1xudmFyIGdsb2JhbCA9IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbnZhciBnYW1lX3BiID0gcmVxdWlyZSgnLi9nYW1lX3BiLmpzJyk7XG5nb29nLm9iamVjdC5leHRlbmQocHJvdG8sIGdhbWVfcGIpO1xudmFyIG1hdGhfcGIgPSByZXF1aXJlKCcuL21hdGhfcGIuanMnKTtcbmdvb2cub2JqZWN0LmV4dGVuZChwcm90bywgbWF0aF9wYik7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uRmlnR2FtZUFjdGlvbicsIG51bGwsIGdsb2JhbCk7XG5nb29nLmV4cG9ydFN5bWJvbCgncHJvdG8uRmlnR2FtZVN0YXRlJywgbnVsbCwgZ2xvYmFsKTtcbmdvb2cuZXhwb3J0U3ltYm9sKCdwcm90by5GaWdHYW1lU3RhdGUuRmlnU3RhdGUnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLkZpc2gnLCBudWxsLCBnbG9iYWwpO1xuZ29vZy5leHBvcnRTeW1ib2woJ3Byb3RvLkZpc2hUeXBlJywgbnVsbCwgZ2xvYmFsKTtcbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5GaXNoID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLkZpc2gsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5GaXNoLmRpc3BsYXlOYW1lID0gJ3Byb3RvLkZpc2gnO1xufVxuLyoqXG4gKiBHZW5lcmF0ZWQgYnkgSnNQYkNvZGVHZW5lcmF0b3IuXG4gKiBAcGFyYW0ge0FycmF5PX0gb3B0X2RhdGEgT3B0aW9uYWwgaW5pdGlhbCBkYXRhIGFycmF5LCB0eXBpY2FsbHkgZnJvbSBhXG4gKiBzZXJ2ZXIgcmVzcG9uc2UsIG9yIGNvbnN0cnVjdGVkIGRpcmVjdGx5IGluIEphdmFzY3JpcHQuIFRoZSBhcnJheSBpcyB1c2VkXG4gKiBpbiBwbGFjZSBhbmQgYmVjb21lcyBwYXJ0IG9mIHRoZSBjb25zdHJ1Y3RlZCBvYmplY3QuIEl0IGlzIG5vdCBjbG9uZWQuXG4gKiBJZiBubyBkYXRhIGlzIHByb3ZpZGVkLCB0aGUgY29uc3RydWN0ZWQgb2JqZWN0IHdpbGwgYmUgZW1wdHksIGJ1dCBzdGlsbFxuICogdmFsaWQuXG4gKiBAZXh0ZW5kcyB7anNwYi5NZXNzYWdlfVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbnByb3RvLkZpZ0dhbWVTdGF0ZSA9IGZ1bmN0aW9uKG9wdF9kYXRhKSB7XG4gIGpzcGIuTWVzc2FnZS5pbml0aWFsaXplKHRoaXMsIG9wdF9kYXRhLCAwLCAtMSwgcHJvdG8uRmlnR2FtZVN0YXRlLnJlcGVhdGVkRmllbGRzXywgbnVsbCk7XG59O1xuZ29vZy5pbmhlcml0cyhwcm90by5GaWdHYW1lU3RhdGUsIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5GaWdHYW1lU3RhdGUuZGlzcGxheU5hbWUgPSAncHJvdG8uRmlnR2FtZVN0YXRlJztcbn1cbi8qKlxuICogR2VuZXJhdGVkIGJ5IEpzUGJDb2RlR2VuZXJhdG9yLlxuICogQHBhcmFtIHtBcnJheT19IG9wdF9kYXRhIE9wdGlvbmFsIGluaXRpYWwgZGF0YSBhcnJheSwgdHlwaWNhbGx5IGZyb20gYVxuICogc2VydmVyIHJlc3BvbnNlLCBvciBjb25zdHJ1Y3RlZCBkaXJlY3RseSBpbiBKYXZhc2NyaXB0LiBUaGUgYXJyYXkgaXMgdXNlZFxuICogaW4gcGxhY2UgYW5kIGJlY29tZXMgcGFydCBvZiB0aGUgY29uc3RydWN0ZWQgb2JqZWN0LiBJdCBpcyBub3QgY2xvbmVkLlxuICogSWYgbm8gZGF0YSBpcyBwcm92aWRlZCwgdGhlIGNvbnN0cnVjdGVkIG9iamVjdCB3aWxsIGJlIGVtcHR5LCBidXQgc3RpbGxcbiAqIHZhbGlkLlxuICogQGV4dGVuZHMge2pzcGIuTWVzc2FnZX1cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5wcm90by5GaWdHYW1lQWN0aW9uID0gZnVuY3Rpb24ob3B0X2RhdGEpIHtcbiAganNwYi5NZXNzYWdlLmluaXRpYWxpemUodGhpcywgb3B0X2RhdGEsIDAsIC0xLCBudWxsLCBudWxsKTtcbn07XG5nb29nLmluaGVyaXRzKHByb3RvLkZpZ0dhbWVBY3Rpb24sIGpzcGIuTWVzc2FnZSk7XG5pZiAoZ29vZy5ERUJVRyAmJiAhQ09NUElMRUQpIHtcbiAgLyoqXG4gICAqIEBwdWJsaWNcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm90by5GaWdHYW1lQWN0aW9uLmRpc3BsYXlOYW1lID0gJ3Byb3RvLkZpZ0dhbWVBY3Rpb24nO1xufVxuXG5cblxuaWYgKGpzcGIuTWVzc2FnZS5HRU5FUkFURV9UT19PQkpFQ1QpIHtcbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBwcm90by5cbiAqIEZpZWxkIG5hbWVzIHRoYXQgYXJlIHJlc2VydmVkIGluIEphdmFTY3JpcHQgYW5kIHdpbGwgYmUgcmVuYW1lZCB0byBwYl9uYW1lLlxuICogT3B0aW9uYWwgZmllbGRzIHRoYXQgYXJlIG5vdCBzZXQgd2lsbCBiZSBzZXQgdG8gdW5kZWZpbmVkLlxuICogVG8gYWNjZXNzIGEgcmVzZXJ2ZWQgZmllbGQgdXNlLCBmb28ucGJfPG5hbWU+LCBlZywgZm9vLnBiX2RlZmF1bHQuXG4gKiBGb3IgdGhlIGxpc3Qgb2YgcmVzZXJ2ZWQgbmFtZXMgcGxlYXNlIHNlZTpcbiAqICAgICBuZXQvcHJvdG8yL2NvbXBpbGVyL2pzL2ludGVybmFsL2dlbmVyYXRvci5jYyNrS2V5d29yZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbj19IG9wdF9pbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gd2hldGhlciB0byBpbmNsdWRlIHRoZVxuICogICAgIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICovXG5wcm90by5GaXNoLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLkZpc2gudG9PYmplY3Qob3B0X2luY2x1ZGVJbnN0YW5jZSwgdGhpcyk7XG59O1xuXG5cbi8qKlxuICogU3RhdGljIHZlcnNpb24gb2YgdGhlIHtAc2VlIHRvT2JqZWN0fSBtZXRob2QuXG4gKiBAcGFyYW0ge2Jvb2xlYW58dW5kZWZpbmVkfSBpbmNsdWRlSW5zdGFuY2UgRGVwcmVjYXRlZC4gV2hldGhlciB0byBpbmNsdWRlXG4gKiAgICAgdGhlIEpTUEIgaW5zdGFuY2UgZm9yIHRyYW5zaXRpb25hbCBzb3kgcHJvdG8gc3VwcG9ydDpcbiAqICAgICBodHRwOi8vZ290by9zb3ktcGFyYW0tbWlncmF0aW9uXG4gKiBAcGFyYW0geyFwcm90by5GaXNofSBtc2cgVGhlIG1zZyBpbnN0YW5jZSB0byB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJuIHshT2JqZWN0fVxuICogQHN1cHByZXNzIHt1bnVzZWRMb2NhbFZhcmlhYmxlc30gZiBpcyBvbmx5IHVzZWQgZm9yIG5lc3RlZCBtZXNzYWdlc1xuICovXG5wcm90by5GaXNoLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBmaXNoVHlwZToganNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQobXNnLCAxLCAwKSxcbiAgICBjb29yZGluYXRlOiAoZiA9IG1zZy5nZXRDb29yZGluYXRlKCkpICYmIG1hdGhfcGIuQ29vcmRpbmF0ZS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIHNpemU6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgMywgMCksXG4gICAgZmFjaW5nTGVmdDoganNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KG1zZywgNCwgZmFsc2UpLFxuICAgIGludmVydENvbG9yczoganNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KG1zZywgNSwgZmFsc2UpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5GaXNofVxuICovXG5wcm90by5GaXNoLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uRmlzaDtcbiAgcmV0dXJuIHByb3RvLkZpc2guZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8uRmlzaH0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5GaXNofVxuICovXG5wcm90by5GaXNoLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUgeyFwcm90by5GaXNoVHlwZX0gKi8gKHJlYWRlci5yZWFkRW51bSgpKTtcbiAgICAgIG1zZy5zZXRGaXNoVHlwZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgbWF0aF9wYi5Db29yZGluYXRlO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLG1hdGhfcGIuQ29vcmRpbmF0ZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldENvb3JkaW5hdGUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xuICAgICAgbXNnLnNldFNpemUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtib29sZWFufSAqLyAocmVhZGVyLnJlYWRCb29sKCkpO1xuICAgICAgbXNnLnNldEZhY2luZ0xlZnQodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtib29sZWFufSAqLyAocmVhZGVyLnJlYWRCb29sKCkpO1xuICAgICAgbXNnLnNldEludmVydENvbG9ycyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLkZpc2gucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLkZpc2guc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5GaXNofSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLkZpc2guc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSBtZXNzYWdlLmdldEZpc2hUeXBlKCk7XG4gIGlmIChmICE9PSAwLjApIHtcbiAgICB3cml0ZXIud3JpdGVFbnVtKFxuICAgICAgMSxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldENvb3JkaW5hdGUoKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAyLFxuICAgICAgZixcbiAgICAgIG1hdGhfcGIuQ29vcmRpbmF0ZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0U2l6ZSgpO1xuICBpZiAoZiAhPT0gMCkge1xuICAgIHdyaXRlci53cml0ZUludDMyKFxuICAgICAgMyxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEZhY2luZ0xlZnQoKTtcbiAgaWYgKGYpIHtcbiAgICB3cml0ZXIud3JpdGVCb29sKFxuICAgICAgNCxcbiAgICAgIGZcbiAgICApO1xuICB9XG4gIGYgPSBtZXNzYWdlLmdldEludmVydENvbG9ycygpO1xuICBpZiAoZikge1xuICAgIHdyaXRlci53cml0ZUJvb2woXG4gICAgICA1LFxuICAgICAgZlxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBGaXNoVHlwZSBmaXNoX3R5cGUgPSAxO1xuICogQHJldHVybiB7IXByb3RvLkZpc2hUeXBlfVxuICovXG5wcm90by5GaXNoLnByb3RvdHlwZS5nZXRGaXNoVHlwZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshcHJvdG8uRmlzaFR5cGV9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCAxLCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshcHJvdG8uRmlzaFR5cGV9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8uRmlzaH0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLkZpc2gucHJvdG90eXBlLnNldEZpc2hUeXBlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywgMSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIENvb3JkaW5hdGUgY29vcmRpbmF0ZSA9IDI7XG4gKiBAcmV0dXJuIHs/cHJvdG8uQ29vcmRpbmF0ZX1cbiAqL1xucHJvdG8uRmlzaC5wcm90b3R5cGUuZ2V0Q29vcmRpbmF0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlez9wcm90by5Db29yZGluYXRlfSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFdyYXBwZXJGaWVsZCh0aGlzLCBtYXRoX3BiLkNvb3JkaW5hdGUsIDIpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5Db29yZGluYXRlfHVuZGVmaW5lZH0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5GaXNofSByZXR1cm5zIHRoaXNcbiovXG5wcm90by5GaXNoLnByb3RvdHlwZS5zZXRDb29yZGluYXRlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRXcmFwcGVyRmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbWVzc2FnZSBmaWVsZCBtYWtpbmcgaXQgdW5kZWZpbmVkLlxuICogQHJldHVybiB7IXByb3RvLkZpc2h9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5GaXNoLnByb3RvdHlwZS5jbGVhckNvb3JkaW5hdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0Q29vcmRpbmF0ZSh1bmRlZmluZWQpO1xufTtcblxuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGlzIGZpZWxkIGlzIHNldC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbnByb3RvLkZpc2gucHJvdG90eXBlLmhhc0Nvb3JkaW5hdGUgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5nZXRGaWVsZCh0aGlzLCAyKSAhPSBudWxsO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDMyIHNpemUgPSAzO1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5GaXNoLnByb3RvdHlwZS5nZXRTaXplID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGUge251bWJlcn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDMsIDApKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5GaXNofSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8uRmlzaC5wcm90b3R5cGUuc2V0U2l6ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywgMywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGJvb2wgZmFjaW5nX2xlZnQgPSA0O1xuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8uRmlzaC5wcm90b3R5cGUuZ2V0RmFjaW5nTGVmdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtib29sZWFufSAqLyAoanNwYi5NZXNzYWdlLmdldEJvb2xlYW5GaWVsZFdpdGhEZWZhdWx0KHRoaXMsIDQsIGZhbHNlKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLkZpc2h9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5GaXNoLnByb3RvdHlwZS5zZXRGYWNpbmdMZWZ0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNCb29sZWFuRmllbGQodGhpcywgNCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGJvb2wgaW52ZXJ0X2NvbG9ycyA9IDU7XG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5GaXNoLnByb3RvdHlwZS5nZXRJbnZlcnRDb2xvcnMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gKGpzcGIuTWVzc2FnZS5nZXRCb29sZWFuRmllbGRXaXRoRGVmYXVsdCh0aGlzLCA1LCBmYWxzZSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5GaXNofSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8uRmlzaC5wcm90b3R5cGUuc2V0SW52ZXJ0Q29sb3JzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNCb29sZWFuRmllbGQodGhpcywgNSwgdmFsdWUpO1xufTtcblxuXG5cbi8qKlxuICogTGlzdCBvZiByZXBlYXRlZCBmaWVsZHMgd2l0aGluIHRoaXMgbWVzc2FnZSB0eXBlLlxuICogQHByaXZhdGUgeyFBcnJheTxudW1iZXI+fVxuICogQGNvbnN0XG4gKi9cbnByb3RvLkZpZ0dhbWVTdGF0ZS5yZXBlYXRlZEZpZWxkc18gPSBbMyw0LDUsNiw5XTtcblxuXG5cbmlmIChqc3BiLk1lc3NhZ2UuR0VORVJBVEVfVE9fT0JKRUNUKSB7XG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgcHJvdG8uXG4gKiBGaWVsZCBuYW1lcyB0aGF0IGFyZSByZXNlcnZlZCBpbiBKYXZhU2NyaXB0IGFuZCB3aWxsIGJlIHJlbmFtZWQgdG8gcGJfbmFtZS5cbiAqIE9wdGlvbmFsIGZpZWxkcyB0aGF0IGFyZSBub3Qgc2V0IHdpbGwgYmUgc2V0IHRvIHVuZGVmaW5lZC5cbiAqIFRvIGFjY2VzcyBhIHJlc2VydmVkIGZpZWxkIHVzZSwgZm9vLnBiXzxuYW1lPiwgZWcsIGZvby5wYl9kZWZhdWx0LlxuICogRm9yIHRoZSBsaXN0IG9mIHJlc2VydmVkIG5hbWVzIHBsZWFzZSBzZWU6XG4gKiAgICAgbmV0L3Byb3RvMi9jb21waWxlci9qcy9pbnRlcm5hbC9nZW5lcmF0b3IuY2Mja0tleXdvcmQuXG4gKiBAcGFyYW0ge2Jvb2xlYW49fSBvcHRfaW5jbHVkZUluc3RhbmNlIERlcHJlY2F0ZWQuIHdoZXRoZXIgdG8gaW5jbHVkZSB0aGVcbiAqICAgICBKU1BCIGluc3RhbmNlIGZvciB0cmFuc2l0aW9uYWwgc295IHByb3RvIHN1cHBvcnQ6XG4gKiAgICAgaHR0cDovL2dvdG8vc295LXBhcmFtLW1pZ3JhdGlvblxuICogQHJldHVybiB7IU9iamVjdH1cbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS50b09iamVjdCA9IGZ1bmN0aW9uKG9wdF9pbmNsdWRlSW5zdGFuY2UpIHtcbiAgcmV0dXJuIHByb3RvLkZpZ0dhbWVTdGF0ZS50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLkZpZ0dhbWVTdGF0ZX0gbXNnIFRoZSBtc2cgaW5zdGFuY2UgdG8gdHJhbnNmb3JtLlxuICogQHJldHVybiB7IU9iamVjdH1cbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnRvT2JqZWN0ID0gZnVuY3Rpb24oaW5jbHVkZUluc3RhbmNlLCBtc2cpIHtcbiAgdmFyIGYsIG9iaiA9IHtcbiAgICBiYXNlU3RhdGU6IChmID0gbXNnLmdldEJhc2VTdGF0ZSgpKSAmJiBnYW1lX3BiLkdhbWVTdGF0ZS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpLFxuICAgIHN0YXRlOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDIsIDApLFxuICAgIGxlZnRQaWN0dXJlTGlzdDoganNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0TGVmdFBpY3R1cmVMaXN0KCksXG4gICAgcHJvdG8uRmlzaC50b09iamVjdCwgaW5jbHVkZUluc3RhbmNlKSxcbiAgICByaWdodFBpY3R1cmVMaXN0OiBqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRSaWdodFBpY3R1cmVMaXN0KCksXG4gICAgcHJvdG8uRmlzaC50b09iamVjdCwgaW5jbHVkZUluc3RhbmNlKSxcbiAgICB3cm9uZ0d1ZXNzZXNMaXN0OiBqc3BiLk1lc3NhZ2UudG9PYmplY3RMaXN0KG1zZy5nZXRXcm9uZ0d1ZXNzZXNMaXN0KCksXG4gICAgbWF0aF9wYi5Db29yZGluYXRlLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpLFxuICAgIGNvcnJlY3RHdWVzc2VzTGlzdDoganNwYi5NZXNzYWdlLnRvT2JqZWN0TGlzdChtc2cuZ2V0Q29ycmVjdEd1ZXNzZXNMaXN0KCksXG4gICAgbWF0aF9wYi5Db29yZGluYXRlLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpLFxuICAgIG51bUxpdmVzOiBqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdChtc2csIDcsIDApLFxuICAgIGNhcmQ6IGpzcGIuTWVzc2FnZS5nZXRGaWVsZFdpdGhEZWZhdWx0KG1zZywgOCwgMCksXG4gICAgbWlzc2VkR3Vlc3Nlc0xpc3Q6IGpzcGIuTWVzc2FnZS50b09iamVjdExpc3QobXNnLmdldE1pc3NlZEd1ZXNzZXNMaXN0KCksXG4gICAgbWF0aF9wYi5Db29yZGluYXRlLnRvT2JqZWN0LCBpbmNsdWRlSW5zdGFuY2UpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5GaWdHYW1lU3RhdGV9XG4gKi9cbnByb3RvLkZpZ0dhbWVTdGF0ZS5kZXNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKGJ5dGVzKSB7XG4gIHZhciByZWFkZXIgPSBuZXcganNwYi5CaW5hcnlSZWFkZXIoYnl0ZXMpO1xuICB2YXIgbXNnID0gbmV3IHByb3RvLkZpZ0dhbWVTdGF0ZTtcbiAgcmV0dXJuIHByb3RvLkZpZ0dhbWVTdGF0ZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIobXNnLCByZWFkZXIpO1xufTtcblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpIGZyb20gdGhlXG4gKiBnaXZlbiByZWFkZXIgaW50byB0aGUgZ2l2ZW4gbWVzc2FnZSBvYmplY3QuXG4gKiBAcGFyYW0geyFwcm90by5GaWdHYW1lU3RhdGV9IG1zZyBUaGUgbWVzc2FnZSBvYmplY3QgdG8gZGVzZXJpYWxpemUgaW50by5cbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5UmVhZGVyfSByZWFkZXIgVGhlIEJpbmFyeVJlYWRlciB0byB1c2UuXG4gKiBAcmV0dXJuIHshcHJvdG8uRmlnR2FtZVN0YXRlfVxuICovXG5wcm90by5GaWdHYW1lU3RhdGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyID0gZnVuY3Rpb24obXNnLCByZWFkZXIpIHtcbiAgd2hpbGUgKHJlYWRlci5uZXh0RmllbGQoKSkge1xuICAgIGlmIChyZWFkZXIuaXNFbmRHcm91cCgpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGZpZWxkID0gcmVhZGVyLmdldEZpZWxkTnVtYmVyKCk7XG4gICAgc3dpdGNoIChmaWVsZCkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBnYW1lX3BiLkdhbWVTdGF0ZTtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxnYW1lX3BiLkdhbWVTdGF0ZS5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldEJhc2VTdGF0ZSh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUgeyFwcm90by5GaWdHYW1lU3RhdGUuRmlnU3RhdGV9ICovIChyZWFkZXIucmVhZEVudW0oKSk7XG4gICAgICBtc2cuc2V0U3RhdGUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IHByb3RvLkZpc2g7XG4gICAgICByZWFkZXIucmVhZE1lc3NhZ2UodmFsdWUscHJvdG8uRmlzaC5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLmFkZExlZnRQaWN0dXJlKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNDpcbiAgICAgIHZhciB2YWx1ZSA9IG5ldyBwcm90by5GaXNoO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLHByb3RvLkZpc2guZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5hZGRSaWdodFBpY3R1cmUodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1hdGhfcGIuQ29vcmRpbmF0ZTtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtYXRoX3BiLkNvb3JkaW5hdGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5hZGRXcm9uZ0d1ZXNzZXModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA2OlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1hdGhfcGIuQ29vcmRpbmF0ZTtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtYXRoX3BiLkNvb3JkaW5hdGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5hZGRDb3JyZWN0R3Vlc3Nlcyh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDc6XG4gICAgICB2YXIgdmFsdWUgPSAvKiogQHR5cGUge251bWJlcn0gKi8gKHJlYWRlci5yZWFkSW50MzIoKSk7XG4gICAgICBtc2cuc2V0TnVtTGl2ZXModmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA4OlxuICAgICAgdmFyIHZhbHVlID0gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChyZWFkZXIucmVhZEludDMyKCkpO1xuICAgICAgbXNnLnNldENhcmQodmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA5OlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1hdGhfcGIuQ29vcmRpbmF0ZTtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtYXRoX3BiLkNvb3JkaW5hdGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5hZGRNaXNzZWRHdWVzc2VzKHZhbHVlKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZWFkZXIuc2tpcEZpZWxkKCk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1zZztcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlIGZvcm1hdCkuXG4gKiBAcmV0dXJuIHshVWludDhBcnJheX1cbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5zZXJpYWxpemVCaW5hcnkgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHdyaXRlciA9IG5ldyBqc3BiLkJpbmFyeVdyaXRlcigpO1xuICBwcm90by5GaWdHYW1lU3RhdGUuc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5GaWdHYW1lU3RhdGV9IG1lc3NhZ2VcbiAqIEBwYXJhbSB7IWpzcGIuQmluYXJ5V3JpdGVyfSB3cml0ZXJcbiAqIEBzdXBwcmVzcyB7dW51c2VkTG9jYWxWYXJpYWJsZXN9IGYgaXMgb25seSB1c2VkIGZvciBuZXN0ZWQgbWVzc2FnZXNcbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyID0gZnVuY3Rpb24obWVzc2FnZSwgd3JpdGVyKSB7XG4gIHZhciBmID0gdW5kZWZpbmVkO1xuICBmID0gbWVzc2FnZS5nZXRCYXNlU3RhdGUoKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAxLFxuICAgICAgZixcbiAgICAgIGdhbWVfcGIuR2FtZVN0YXRlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRTdGF0ZSgpO1xuICBpZiAoZiAhPT0gMC4wKSB7XG4gICAgd3JpdGVyLndyaXRlRW51bShcbiAgICAgIDIsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRMZWZ0UGljdHVyZUxpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZShcbiAgICAgIDMsXG4gICAgICBmLFxuICAgICAgcHJvdG8uRmlzaC5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0UmlnaHRQaWN0dXJlTGlzdCgpO1xuICBpZiAoZi5sZW5ndGggPiAwKSB7XG4gICAgd3JpdGVyLndyaXRlUmVwZWF0ZWRNZXNzYWdlKFxuICAgICAgNCxcbiAgICAgIGYsXG4gICAgICBwcm90by5GaXNoLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRXcm9uZ0d1ZXNzZXNMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoXG4gICAgICA1LFxuICAgICAgZixcbiAgICAgIG1hdGhfcGIuQ29vcmRpbmF0ZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0Q29ycmVjdEd1ZXNzZXNMaXN0KCk7XG4gIGlmIChmLmxlbmd0aCA+IDApIHtcbiAgICB3cml0ZXIud3JpdGVSZXBlYXRlZE1lc3NhZ2UoXG4gICAgICA2LFxuICAgICAgZixcbiAgICAgIG1hdGhfcGIuQ29vcmRpbmF0ZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0TnVtTGl2ZXMoKTtcbiAgaWYgKGYgIT09IDApIHtcbiAgICB3cml0ZXIud3JpdGVJbnQzMihcbiAgICAgIDcsXG4gICAgICBmXG4gICAgKTtcbiAgfVxuICBmID0gbWVzc2FnZS5nZXRDYXJkKCk7XG4gIGlmIChmICE9PSAwKSB7XG4gICAgd3JpdGVyLndyaXRlSW50MzIoXG4gICAgICA4LFxuICAgICAgZlxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0TWlzc2VkR3Vlc3Nlc0xpc3QoKTtcbiAgaWYgKGYubGVuZ3RoID4gMCkge1xuICAgIHdyaXRlci53cml0ZVJlcGVhdGVkTWVzc2FnZShcbiAgICAgIDksXG4gICAgICBmLFxuICAgICAgbWF0aF9wYi5Db29yZGluYXRlLnNlcmlhbGl6ZUJpbmFyeVRvV3JpdGVyXG4gICAgKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbnByb3RvLkZpZ0dhbWVTdGF0ZS5GaWdTdGF0ZSA9IHtcbiAgV0FJVElOR19GT1JfU1RBUlQ6IDAsXG4gIExPT0tJTkdfRk9SX0RJRkZTOiAxXG59O1xuXG4vKipcbiAqIG9wdGlvbmFsIEdhbWVTdGF0ZSBiYXNlX3N0YXRlID0gMTtcbiAqIEByZXR1cm4gez9wcm90by5HYW1lU3RhdGV9XG4gKi9cbnByb3RvLkZpZ0dhbWVTdGF0ZS5wcm90b3R5cGUuZ2V0QmFzZVN0YXRlID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLkdhbWVTdGF0ZX0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgZ2FtZV9wYi5HYW1lU3RhdGUsIDEpKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0gez9wcm90by5HYW1lU3RhdGV8dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLkZpZ0dhbWVTdGF0ZX0gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5zZXRCYXNlU3RhdGUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8uRmlnR2FtZVN0YXRlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5jbGVhckJhc2VTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRCYXNlU3RhdGUodW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5GaWdHYW1lU3RhdGUucHJvdG90eXBlLmhhc0Jhc2VTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgRmlnU3RhdGUgc3RhdGUgPSAyO1xuICogQHJldHVybiB7IXByb3RvLkZpZ0dhbWVTdGF0ZS5GaWdTdGF0ZX1cbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHshcHJvdG8uRmlnR2FtZVN0YXRlLkZpZ1N0YXRlfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgMiwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IXByb3RvLkZpZ0dhbWVTdGF0ZS5GaWdTdGF0ZX0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5GaWdHYW1lU3RhdGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5GaWdHYW1lU3RhdGUucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRQcm90bzNFbnVtRmllbGQodGhpcywgMiwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIEZpc2ggbGVmdF9waWN0dXJlID0gMztcbiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8uRmlzaD59XG4gKi9cbnByb3RvLkZpZ0dhbWVTdGF0ZS5wcm90b3R5cGUuZ2V0TGVmdFBpY3R1cmVMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7IUFycmF5PCFwcm90by5GaXNoPn0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5GaXNoLCAzKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8IXByb3RvLkZpc2g+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLkZpZ0dhbWVTdGF0ZX0gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5zZXRMZWZ0UGljdHVyZUxpc3QgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDMsIHZhbHVlKTtcbn07XG5cblxuLyoqXG4gKiBAcGFyYW0geyFwcm90by5GaXNoPX0gb3B0X3ZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IG9wdF9pbmRleFxuICogQHJldHVybiB7IXByb3RvLkZpc2h9XG4gKi9cbnByb3RvLkZpZ0dhbWVTdGF0ZS5wcm90b3R5cGUuYWRkTGVmdFBpY3R1cmUgPSBmdW5jdGlvbihvcHRfdmFsdWUsIG9wdF9pbmRleCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmFkZFRvUmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgMywgb3B0X3ZhbHVlLCBwcm90by5GaXNoLCBvcHRfaW5kZXgpO1xufTtcblxuXG4vKipcbiAqIENsZWFycyB0aGUgbGlzdCBtYWtpbmcgaXQgZW1wdHkgYnV0IG5vbi1udWxsLlxuICogQHJldHVybiB7IXByb3RvLkZpZ0dhbWVTdGF0ZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLkZpZ0dhbWVTdGF0ZS5wcm90b3R5cGUuY2xlYXJMZWZ0UGljdHVyZUxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0TGVmdFBpY3R1cmVMaXN0KFtdKTtcbn07XG5cblxuLyoqXG4gKiByZXBlYXRlZCBGaXNoIHJpZ2h0X3BpY3R1cmUgPSA0O1xuICogQHJldHVybiB7IUFycmF5PCFwcm90by5GaXNoPn1cbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5nZXRSaWdodFBpY3R1cmVMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7IUFycmF5PCFwcm90by5GaXNoPn0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCBwcm90by5GaXNoLCA0KSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8IXByb3RvLkZpc2g+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLkZpZ0dhbWVTdGF0ZX0gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5zZXRSaWdodFBpY3R1cmVMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCA0LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshcHJvdG8uRmlzaD19IG9wdF92YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5GaXNofVxuICovXG5wcm90by5GaWdHYW1lU3RhdGUucHJvdG90eXBlLmFkZFJpZ2h0UGljdHVyZSA9IGZ1bmN0aW9uKG9wdF92YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCA0LCBvcHRfdmFsdWUsIHByb3RvLkZpc2gsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8uRmlnR2FtZVN0YXRlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5jbGVhclJpZ2h0UGljdHVyZUxpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0UmlnaHRQaWN0dXJlTGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgQ29vcmRpbmF0ZSB3cm9uZ19ndWVzc2VzID0gNTtcbiAqIEByZXR1cm4geyFBcnJheTwhcHJvdG8uQ29vcmRpbmF0ZT59XG4gKi9cbnByb3RvLkZpZ0dhbWVTdGF0ZS5wcm90b3R5cGUuZ2V0V3JvbmdHdWVzc2VzTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBleyFBcnJheTwhcHJvdG8uQ29vcmRpbmF0ZT59ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgbWF0aF9wYi5Db29yZGluYXRlLCA1KSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8IXByb3RvLkNvb3JkaW5hdGU+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLkZpZ0dhbWVTdGF0ZX0gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5zZXRXcm9uZ0d1ZXNzZXNMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCA1LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshcHJvdG8uQ29vcmRpbmF0ZT19IG9wdF92YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5Db29yZGluYXRlfVxuICovXG5wcm90by5GaWdHYW1lU3RhdGUucHJvdG90eXBlLmFkZFdyb25nR3Vlc3NlcyA9IGZ1bmN0aW9uKG9wdF92YWx1ZSwgb3B0X2luZGV4KSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2UuYWRkVG9SZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCA1LCBvcHRfdmFsdWUsIHByb3RvLkNvb3JkaW5hdGUsIG9wdF9pbmRleCk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBsaXN0IG1ha2luZyBpdCBlbXB0eSBidXQgbm9uLW51bGwuXG4gKiBAcmV0dXJuIHshcHJvdG8uRmlnR2FtZVN0YXRlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5jbGVhcldyb25nR3Vlc3Nlc0xpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0V3JvbmdHdWVzc2VzTGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogcmVwZWF0ZWQgQ29vcmRpbmF0ZSBjb3JyZWN0X2d1ZXNzZXMgPSA2O1xuICogQHJldHVybiB7IUFycmF5PCFwcm90by5Db29yZGluYXRlPn1cbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5nZXRDb3JyZWN0R3Vlc3Nlc0xpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXshQXJyYXk8IXByb3RvLkNvb3JkaW5hdGU+fSAqLyAoXG4gICAganNwYi5NZXNzYWdlLmdldFJlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIG1hdGhfcGIuQ29vcmRpbmF0ZSwgNikpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IUFycmF5PCFwcm90by5Db29yZGluYXRlPn0gdmFsdWVcbiAqIEByZXR1cm4geyFwcm90by5GaWdHYW1lU3RhdGV9IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLkZpZ0dhbWVTdGF0ZS5wcm90b3R5cGUuc2V0Q29ycmVjdEd1ZXNzZXNMaXN0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5zZXRSZXBlYXRlZFdyYXBwZXJGaWVsZCh0aGlzLCA2LCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshcHJvdG8uQ29vcmRpbmF0ZT19IG9wdF92YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBvcHRfaW5kZXhcbiAqIEByZXR1cm4geyFwcm90by5Db29yZGluYXRlfVxuICovXG5wcm90by5GaWdHYW1lU3RhdGUucHJvdG90eXBlLmFkZENvcnJlY3RHdWVzc2VzID0gZnVuY3Rpb24ob3B0X3ZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDYsIG9wdF92YWx1ZSwgcHJvdG8uQ29vcmRpbmF0ZSwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5GaWdHYW1lU3RhdGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5GaWdHYW1lU3RhdGUucHJvdG90eXBlLmNsZWFyQ29ycmVjdEd1ZXNzZXNMaXN0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLnNldENvcnJlY3RHdWVzc2VzTGlzdChbXSk7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgaW50MzIgbnVtX2xpdmVzID0gNztcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5nZXROdW1MaXZlcyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBlIHtudW1iZXJ9ICovIChqc3BiLk1lc3NhZ2UuZ2V0RmllbGRXaXRoRGVmYXVsdCh0aGlzLCA3LCAwKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8uRmlnR2FtZVN0YXRlfSByZXR1cm5zIHRoaXNcbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5zZXROdW1MaXZlcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywgNywgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIG9wdGlvbmFsIGludDMyIGNhcmQgPSA4O1xuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5wcm90by5GaWdHYW1lU3RhdGUucHJvdG90eXBlLmdldENhcmQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAoanNwYi5NZXNzYWdlLmdldEZpZWxkV2l0aERlZmF1bHQodGhpcywgOCwgMCkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLkZpZ0dhbWVTdGF0ZX0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLkZpZ0dhbWVTdGF0ZS5wcm90b3R5cGUuc2V0Q2FyZCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UHJvdG8zSW50RmllbGQodGhpcywgOCwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIHJlcGVhdGVkIENvb3JkaW5hdGUgbWlzc2VkX2d1ZXNzZXMgPSA5O1xuICogQHJldHVybiB7IUFycmF5PCFwcm90by5Db29yZGluYXRlPn1cbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5nZXRNaXNzZWRHdWVzc2VzTGlzdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gLyoqIEB0eXBleyFBcnJheTwhcHJvdG8uQ29vcmRpbmF0ZT59ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgbWF0aF9wYi5Db29yZGluYXRlLCA5KSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHshQXJyYXk8IXByb3RvLkNvb3JkaW5hdGU+fSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLkZpZ0dhbWVTdGF0ZX0gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5zZXRNaXNzZWRHdWVzc2VzTGlzdCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBqc3BiLk1lc3NhZ2Uuc2V0UmVwZWF0ZWRXcmFwcGVyRmllbGQodGhpcywgOSwgdmFsdWUpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7IXByb3RvLkNvb3JkaW5hdGU9fSBvcHRfdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyPX0gb3B0X2luZGV4XG4gKiBAcmV0dXJuIHshcHJvdG8uQ29vcmRpbmF0ZX1cbiAqL1xucHJvdG8uRmlnR2FtZVN0YXRlLnByb3RvdHlwZS5hZGRNaXNzZWRHdWVzc2VzID0gZnVuY3Rpb24ob3B0X3ZhbHVlLCBvcHRfaW5kZXgpIHtcbiAgcmV0dXJuIGpzcGIuTWVzc2FnZS5hZGRUb1JlcGVhdGVkV3JhcHBlckZpZWxkKHRoaXMsIDksIG9wdF92YWx1ZSwgcHJvdG8uQ29vcmRpbmF0ZSwgb3B0X2luZGV4KTtcbn07XG5cblxuLyoqXG4gKiBDbGVhcnMgdGhlIGxpc3QgbWFraW5nIGl0IGVtcHR5IGJ1dCBub24tbnVsbC5cbiAqIEByZXR1cm4geyFwcm90by5GaWdHYW1lU3RhdGV9IHJldHVybnMgdGhpc1xuICovXG5wcm90by5GaWdHYW1lU3RhdGUucHJvdG90eXBlLmNsZWFyTWlzc2VkR3Vlc3Nlc0xpc3QgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0TWlzc2VkR3Vlc3Nlc0xpc3QoW10pO1xufTtcblxuXG5cblxuXG5pZiAoanNwYi5NZXNzYWdlLkdFTkVSQVRFX1RPX09CSkVDVCkge1xuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHByb3RvLlxuICogRmllbGQgbmFtZXMgdGhhdCBhcmUgcmVzZXJ2ZWQgaW4gSmF2YVNjcmlwdCBhbmQgd2lsbCBiZSByZW5hbWVkIHRvIHBiX25hbWUuXG4gKiBPcHRpb25hbCBmaWVsZHMgdGhhdCBhcmUgbm90IHNldCB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gKiBUbyBhY2Nlc3MgYSByZXNlcnZlZCBmaWVsZCB1c2UsIGZvby5wYl88bmFtZT4sIGVnLCBmb28ucGJfZGVmYXVsdC5cbiAqIEZvciB0aGUgbGlzdCBvZiByZXNlcnZlZCBuYW1lcyBwbGVhc2Ugc2VlOlxuICogICAgIG5ldC9wcm90bzIvY29tcGlsZXIvanMvaW50ZXJuYWwvZ2VuZXJhdG9yLmNjI2tLZXl3b3JkLlxuICogQHBhcmFtIHtib29sZWFuPX0gb3B0X2luY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiB3aGV0aGVyIHRvIGluY2x1ZGUgdGhlXG4gKiAgICAgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKi9cbnByb3RvLkZpZ0dhbWVBY3Rpb24ucHJvdG90eXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24ob3B0X2luY2x1ZGVJbnN0YW5jZSkge1xuICByZXR1cm4gcHJvdG8uRmlnR2FtZUFjdGlvbi50b09iamVjdChvcHRfaW5jbHVkZUluc3RhbmNlLCB0aGlzKTtcbn07XG5cblxuLyoqXG4gKiBTdGF0aWMgdmVyc2lvbiBvZiB0aGUge0BzZWUgdG9PYmplY3R9IG1ldGhvZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbnx1bmRlZmluZWR9IGluY2x1ZGVJbnN0YW5jZSBEZXByZWNhdGVkLiBXaGV0aGVyIHRvIGluY2x1ZGVcbiAqICAgICB0aGUgSlNQQiBpbnN0YW5jZSBmb3IgdHJhbnNpdGlvbmFsIHNveSBwcm90byBzdXBwb3J0OlxuICogICAgIGh0dHA6Ly9nb3RvL3NveS1wYXJhbS1taWdyYXRpb25cbiAqIEBwYXJhbSB7IXByb3RvLkZpZ0dhbWVBY3Rpb259IG1zZyBUaGUgbXNnIGluc3RhbmNlIHRvIHRyYW5zZm9ybS5cbiAqIEByZXR1cm4geyFPYmplY3R9XG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLkZpZ0dhbWVBY3Rpb24udG9PYmplY3QgPSBmdW5jdGlvbihpbmNsdWRlSW5zdGFuY2UsIG1zZykge1xuICB2YXIgZiwgb2JqID0ge1xuICAgIGJhc2VBY3Rpb246IChmID0gbXNnLmdldEJhc2VBY3Rpb24oKSkgJiYgZ2FtZV9wYi5HYW1lQWN0aW9uLnRvT2JqZWN0KGluY2x1ZGVJbnN0YW5jZSwgZiksXG4gICAgY2xpY2s6IChmID0gbXNnLmdldENsaWNrKCkpICYmIG1hdGhfcGIuQ29vcmRpbmF0ZS50b09iamVjdChpbmNsdWRlSW5zdGFuY2UsIGYpXG4gIH07XG5cbiAgaWYgKGluY2x1ZGVJbnN0YW5jZSkge1xuICAgIG9iai4kanNwYk1lc3NhZ2VJbnN0YW5jZSA9IG1zZztcbiAgfVxuICByZXR1cm4gb2JqO1xufTtcbn1cblxuXG4vKipcbiAqIERlc2VyaWFsaXplcyBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHBhcmFtIHtqc3BiLkJ5dGVTb3VyY2V9IGJ5dGVzIFRoZSBieXRlcyB0byBkZXNlcmlhbGl6ZS5cbiAqIEByZXR1cm4geyFwcm90by5GaWdHYW1lQWN0aW9ufVxuICovXG5wcm90by5GaWdHYW1lQWN0aW9uLmRlc2VyaWFsaXplQmluYXJ5ID0gZnVuY3Rpb24oYnl0ZXMpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBqc3BiLkJpbmFyeVJlYWRlcihieXRlcyk7XG4gIHZhciBtc2cgPSBuZXcgcHJvdG8uRmlnR2FtZUFjdGlvbjtcbiAgcmV0dXJuIHByb3RvLkZpZ0dhbWVBY3Rpb24uZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKG1zZywgcmVhZGVyKTtcbn07XG5cblxuLyoqXG4gKiBEZXNlcmlhbGl6ZXMgYmluYXJ5IGRhdGEgKGluIHByb3RvYnVmIHdpcmUgZm9ybWF0KSBmcm9tIHRoZVxuICogZ2l2ZW4gcmVhZGVyIGludG8gdGhlIGdpdmVuIG1lc3NhZ2Ugb2JqZWN0LlxuICogQHBhcmFtIHshcHJvdG8uRmlnR2FtZUFjdGlvbn0gbXNnIFRoZSBtZXNzYWdlIG9iamVjdCB0byBkZXNlcmlhbGl6ZSBpbnRvLlxuICogQHBhcmFtIHshanNwYi5CaW5hcnlSZWFkZXJ9IHJlYWRlciBUaGUgQmluYXJ5UmVhZGVyIHRvIHVzZS5cbiAqIEByZXR1cm4geyFwcm90by5GaWdHYW1lQWN0aW9ufVxuICovXG5wcm90by5GaWdHYW1lQWN0aW9uLmRlc2VyaWFsaXplQmluYXJ5RnJvbVJlYWRlciA9IGZ1bmN0aW9uKG1zZywgcmVhZGVyKSB7XG4gIHdoaWxlIChyZWFkZXIubmV4dEZpZWxkKCkpIHtcbiAgICBpZiAocmVhZGVyLmlzRW5kR3JvdXAoKSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBmaWVsZCA9IHJlYWRlci5nZXRGaWVsZE51bWJlcigpO1xuICAgIHN3aXRjaCAoZmllbGQpIHtcbiAgICBjYXNlIDE6XG4gICAgICB2YXIgdmFsdWUgPSBuZXcgZ2FtZV9wYi5HYW1lQWN0aW9uO1xuICAgICAgcmVhZGVyLnJlYWRNZXNzYWdlKHZhbHVlLGdhbWVfcGIuR2FtZUFjdGlvbi5kZXNlcmlhbGl6ZUJpbmFyeUZyb21SZWFkZXIpO1xuICAgICAgbXNnLnNldEJhc2VBY3Rpb24odmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyOlxuICAgICAgdmFyIHZhbHVlID0gbmV3IG1hdGhfcGIuQ29vcmRpbmF0ZTtcbiAgICAgIHJlYWRlci5yZWFkTWVzc2FnZSh2YWx1ZSxtYXRoX3BiLkNvb3JkaW5hdGUuZGVzZXJpYWxpemVCaW5hcnlGcm9tUmVhZGVyKTtcbiAgICAgIG1zZy5zZXRDbGljayh2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgcmVhZGVyLnNraXBGaWVsZCgpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtc2c7XG59O1xuXG5cbi8qKlxuICogU2VyaWFsaXplcyB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YSAoaW4gcHJvdG9idWYgd2lyZSBmb3JtYXQpLlxuICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XG4gKi9cbnByb3RvLkZpZ0dhbWVBY3Rpb24ucHJvdG90eXBlLnNlcmlhbGl6ZUJpbmFyeSA9IGZ1bmN0aW9uKCkge1xuICB2YXIgd3JpdGVyID0gbmV3IGpzcGIuQmluYXJ5V3JpdGVyKCk7XG4gIHByb3RvLkZpZ0dhbWVBY3Rpb24uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIodGhpcywgd3JpdGVyKTtcbiAgcmV0dXJuIHdyaXRlci5nZXRSZXN1bHRCdWZmZXIoKTtcbn07XG5cblxuLyoqXG4gKiBTZXJpYWxpemVzIHRoZSBnaXZlbiBtZXNzYWdlIHRvIGJpbmFyeSBkYXRhIChpbiBwcm90b2J1ZiB3aXJlXG4gKiBmb3JtYXQpLCB3cml0aW5nIHRvIHRoZSBnaXZlbiBCaW5hcnlXcml0ZXIuXG4gKiBAcGFyYW0geyFwcm90by5GaWdHYW1lQWN0aW9ufSBtZXNzYWdlXG4gKiBAcGFyYW0geyFqc3BiLkJpbmFyeVdyaXRlcn0gd3JpdGVyXG4gKiBAc3VwcHJlc3Mge3VudXNlZExvY2FsVmFyaWFibGVzfSBmIGlzIG9ubHkgdXNlZCBmb3IgbmVzdGVkIG1lc3NhZ2VzXG4gKi9cbnByb3RvLkZpZ0dhbWVBY3Rpb24uc2VyaWFsaXplQmluYXJ5VG9Xcml0ZXIgPSBmdW5jdGlvbihtZXNzYWdlLCB3cml0ZXIpIHtcbiAgdmFyIGYgPSB1bmRlZmluZWQ7XG4gIGYgPSBtZXNzYWdlLmdldEJhc2VBY3Rpb24oKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAxLFxuICAgICAgZixcbiAgICAgIGdhbWVfcGIuR2FtZUFjdGlvbi5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbiAgZiA9IG1lc3NhZ2UuZ2V0Q2xpY2soKTtcbiAgaWYgKGYgIT0gbnVsbCkge1xuICAgIHdyaXRlci53cml0ZU1lc3NhZ2UoXG4gICAgICAyLFxuICAgICAgZixcbiAgICAgIG1hdGhfcGIuQ29vcmRpbmF0ZS5zZXJpYWxpemVCaW5hcnlUb1dyaXRlclxuICAgICk7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBvcHRpb25hbCBHYW1lQWN0aW9uIGJhc2VfYWN0aW9uID0gMTtcbiAqIEByZXR1cm4gez9wcm90by5HYW1lQWN0aW9ufVxuICovXG5wcm90by5GaWdHYW1lQWN0aW9uLnByb3RvdHlwZS5nZXRCYXNlQWN0aW9uID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiAvKiogQHR5cGV7P3Byb3RvLkdhbWVBY3Rpb259ICovIChcbiAgICBqc3BiLk1lc3NhZ2UuZ2V0V3JhcHBlckZpZWxkKHRoaXMsIGdhbWVfcGIuR2FtZUFjdGlvbiwgMSkpO1xufTtcblxuXG4vKipcbiAqIEBwYXJhbSB7P3Byb3RvLkdhbWVBY3Rpb258dW5kZWZpbmVkfSB2YWx1ZVxuICogQHJldHVybiB7IXByb3RvLkZpZ0dhbWVBY3Rpb259IHJldHVybnMgdGhpc1xuKi9cbnByb3RvLkZpZ0dhbWVBY3Rpb24ucHJvdG90eXBlLnNldEJhc2VBY3Rpb24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAxLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8uRmlnR2FtZUFjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLkZpZ0dhbWVBY3Rpb24ucHJvdG90eXBlLmNsZWFyQmFzZUFjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5zZXRCYXNlQWN0aW9uKHVuZGVmaW5lZCk7XG59O1xuXG5cbi8qKlxuICogUmV0dXJucyB3aGV0aGVyIHRoaXMgZmllbGQgaXMgc2V0LlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xucHJvdG8uRmlnR2FtZUFjdGlvbi5wcm90b3R5cGUuaGFzQmFzZUFjdGlvbiA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDEpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogb3B0aW9uYWwgQ29vcmRpbmF0ZSBjbGljayA9IDI7XG4gKiBAcmV0dXJuIHs/cHJvdG8uQ29vcmRpbmF0ZX1cbiAqL1xucHJvdG8uRmlnR2FtZUFjdGlvbi5wcm90b3R5cGUuZ2V0Q2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIC8qKiBAdHlwZXs/cHJvdG8uQ29vcmRpbmF0ZX0gKi8gKFxuICAgIGpzcGIuTWVzc2FnZS5nZXRXcmFwcGVyRmllbGQodGhpcywgbWF0aF9wYi5Db29yZGluYXRlLCAyKSk7XG59O1xuXG5cbi8qKlxuICogQHBhcmFtIHs/cHJvdG8uQ29vcmRpbmF0ZXx1bmRlZmluZWR9IHZhbHVlXG4gKiBAcmV0dXJuIHshcHJvdG8uRmlnR2FtZUFjdGlvbn0gcmV0dXJucyB0aGlzXG4qL1xucHJvdG8uRmlnR2FtZUFjdGlvbi5wcm90b3R5cGUuc2V0Q2xpY2sgPSBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLnNldFdyYXBwZXJGaWVsZCh0aGlzLCAyLCB2YWx1ZSk7XG59O1xuXG5cbi8qKlxuICogQ2xlYXJzIHRoZSBtZXNzYWdlIGZpZWxkIG1ha2luZyBpdCB1bmRlZmluZWQuXG4gKiBAcmV0dXJuIHshcHJvdG8uRmlnR2FtZUFjdGlvbn0gcmV0dXJucyB0aGlzXG4gKi9cbnByb3RvLkZpZ0dhbWVBY3Rpb24ucHJvdG90eXBlLmNsZWFyQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuc2V0Q2xpY2sodW5kZWZpbmVkKTtcbn07XG5cblxuLyoqXG4gKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBmaWVsZCBpcyBzZXQuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5wcm90by5GaWdHYW1lQWN0aW9uLnByb3RvdHlwZS5oYXNDbGljayA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4ganNwYi5NZXNzYWdlLmdldEZpZWxkKHRoaXMsIDIpICE9IG51bGw7XG59O1xuXG5cbi8qKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xucHJvdG8uRmlzaFR5cGUgPSB7XG4gIEZJU0hfVFlQRV9VTktOT1dOOiAwLFxuICBCSVRURVJMSU5HOiAxLFxuICBQQUxFX0NIVUI6IDIsXG4gIENSVUNJQU5fQ0FSUDogMyxcbiAgREFDRTogNCxcbiAgQ0FSUDogNSxcbiAgS09JOiA2LFxuICBHT0xERklTSDogNyxcbiAgUE9QX0VZRURfR09MREZJU0g6IDgsXG4gIFJBTkNIVV9HT0xERklTSDogOSxcbiAgS0lMTElGSVNIOiAxMCxcbiAgQ1JBV0ZJU0g6IDExLFxuICBTT0ZUX1NIRUxMRURfVFVSVExFOiAxMixcbiAgU05BUFBJTkdfVFVSVExFOiAxMyxcbiAgVEFEUE9MRTogMTQsXG4gIEZST0c6IDE1LFxuICBGUkVTSFdBVEVSX0dPQlk6IDE2LFxuICBMT0FDSDogMTcsXG4gIENBVEZJU0g6IDE4LFxuICBHSUFOVF9TTkFLRUhFQUQ6IDE5LFxuICBCTFVFR0lMTDogMjAsXG4gIFlFTExPV19QRVJDSDogMjEsXG4gIEJMQUNLX0JBU1M6IDIyLFxuICBUSUxBUElBOiAyMyxcbiAgUElLRTogMjQsXG4gIFBPTkRfU01FTFQ6IDI1LFxuICBTV0VFVEZJU0g6IDI2LFxuICBDSEVSUllfU0FMTU9OOiAyNyxcbiAgQ0hBUjogMjgsXG4gIEdPTERFTl9UUk9VVDogMjksXG4gIFNUUklOR0ZJU0g6IDMwLFxuICBTQUxNT046IDMxLFxuICBLSU5HX1NBTE1PTjogMzIsXG4gIE1JVFRFTl9DUkFCOiAzMyxcbiAgR1VQUFk6IDM0LFxuICBOSUJCTEVfRklTSDogMzUsXG4gIEFOR0VMRklTSDogMzYsXG4gIEJFVFRBOiAzNyxcbiAgTkVPTl9URVRSQTogMzgsXG4gIFJBSU5CT1dGSVNIOiAzOSxcbiAgUElSQU5IQTogNDBcbn07XG5cbmdvb2cub2JqZWN0LmV4dGVuZChleHBvcnRzLCBwcm90byk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./schema/protos/fig_pb.js\n");

/***/ }),

/***/ "./utils/animation.ts":
/*!****************************!*\
  !*** ./utils/animation.ts ***!
  \****************************/
/*! exports provided: useAnimationFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useAnimationFrame\", function() { return useAnimationFrame; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\n\n/**\n * Sets up a callback to run every animation frame.\n * Must provide a tick ref which will be passed into the callback.\n */\n\nvar useAnimationFrame = function useAnimationFrame(callback, tickRef, deps) {\n  _s();\n\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  var requestRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n  var previousTimeRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n\n  var animate = function animate(time) {\n    if (previousTimeRef.current !== undefined) {\n      var deltaTime = time - previousTimeRef.current;\n      tickRef.current += deltaTime / 100;\n      callback(tickRef.current);\n    }\n\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n    requestRef.current = requestAnimationFrame(animate);\n    return function () {\n      return cancelAnimationFrame(requestRef.current);\n    };\n  }, [deps]);\n};\n\n_s(useAnimationFrame, \"z8M7fn6QAiYOb97lWpO8m/pmXa0=\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvYW5pbWF0aW9uLnRzP2ExMTUiXSwibmFtZXMiOlsidXNlQW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsInRpY2tSZWYiLCJkZXBzIiwicmVxdWVzdFJlZiIsInVzZVJlZiIsInByZXZpb3VzVGltZVJlZiIsImFuaW1hdGUiLCJ0aW1lIiwiY3VycmVudCIsInVuZGVmaW5lZCIsImRlbHRhVGltZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVzZUVmZmVjdCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUVBOzs7OztBQUlPLElBQU1BLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FDL0JDLFFBRCtCLEVBRS9CQyxPQUYrQixFQUcvQkMsSUFIK0IsRUFJNUI7QUFBQTs7QUFDSDtBQUNBO0FBQ0EsTUFBTUMsVUFBVSxHQUFHQyxvREFBTSxFQUF6QjtBQUNBLE1BQU1DLGVBQWUsR0FBR0Qsb0RBQU0sRUFBOUI7O0FBRUEsTUFBTUUsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBQ0MsSUFBRCxFQUFVO0FBQ3hCLFFBQUlGLGVBQWUsQ0FBQ0csT0FBaEIsS0FBNEJDLFNBQWhDLEVBQTJDO0FBQ3pDLFVBQU1DLFNBQVMsR0FBR0gsSUFBSSxHQUFHRixlQUFlLENBQUNHLE9BQXpDO0FBQ0FQLGFBQU8sQ0FBQ08sT0FBUixJQUFtQkUsU0FBUyxHQUFHLEdBQS9CO0FBQ0FWLGNBQVEsQ0FBQ0MsT0FBTyxDQUFDTyxPQUFULENBQVI7QUFDRDs7QUFDREgsbUJBQWUsQ0FBQ0csT0FBaEIsR0FBMEJELElBQTFCO0FBQ0FKLGNBQVUsQ0FBQ0ssT0FBWCxHQUFxQkcscUJBQXFCLENBQUNMLE9BQUQsQ0FBMUM7QUFDRCxHQVJEOztBQVVBTSx5REFBUyxDQUFDLFlBQU07QUFDZFQsY0FBVSxDQUFDSyxPQUFYLEdBQXFCRyxxQkFBcUIsQ0FBQ0wsT0FBRCxDQUExQztBQUNBLFdBQU87QUFBQSxhQUFNTyxvQkFBb0IsQ0FBQ1YsVUFBVSxDQUFDSyxPQUFaLENBQTFCO0FBQUEsS0FBUDtBQUNELEdBSFEsRUFHTixDQUFDTixJQUFELENBSE0sQ0FBVDtBQUlELENBeEJNOztHQUFNSCxpQiIsImZpbGUiOiIuL3V0aWxzL2FuaW1hdGlvbi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIFNldHMgdXAgYSBjYWxsYmFjayB0byBydW4gZXZlcnkgYW5pbWF0aW9uIGZyYW1lLlxuICogTXVzdCBwcm92aWRlIGEgdGljayByZWYgd2hpY2ggd2lsbCBiZSBwYXNzZWQgaW50byB0aGUgY2FsbGJhY2suXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VBbmltYXRpb25GcmFtZSA9IChcbiAgY2FsbGJhY2s6ICh0aWNrOiBudW1iZXIpID0+IHZvaWQsXG4gIHRpY2tSZWY6IFJlYWN0Lk11dGFibGVSZWZPYmplY3Q8bnVtYmVyPixcbiAgZGVwczogUmVhY3QuRGVwZW5kZW5jeUxpc3RcbikgPT4ge1xuICAvLyBVc2UgdXNlUmVmIGZvciBtdXRhYmxlIHZhcmlhYmxlcyB0aGF0IHdlIHdhbnQgdG8gcGVyc2lzdFxuICAvLyB3aXRob3V0IHRyaWdnZXJpbmcgYSByZS1yZW5kZXIgb24gdGhlaXIgY2hhbmdlXG4gIGNvbnN0IHJlcXVlc3RSZWYgPSB1c2VSZWY8bnVtYmVyIHwgdW5kZWZpbmVkPigpO1xuICBjb25zdCBwcmV2aW91c1RpbWVSZWYgPSB1c2VSZWY8bnVtYmVyIHwgdW5kZWZpbmVkPigpO1xuXG4gIGNvbnN0IGFuaW1hdGUgPSAodGltZSkgPT4ge1xuICAgIGlmIChwcmV2aW91c1RpbWVSZWYuY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBkZWx0YVRpbWUgPSB0aW1lIC0gcHJldmlvdXNUaW1lUmVmLmN1cnJlbnQ7XG4gICAgICB0aWNrUmVmLmN1cnJlbnQgKz0gZGVsdGFUaW1lIC8gMTAwO1xuICAgICAgY2FsbGJhY2sodGlja1JlZi5jdXJyZW50KTtcbiAgICB9XG4gICAgcHJldmlvdXNUaW1lUmVmLmN1cnJlbnQgPSB0aW1lO1xuICAgIHJlcXVlc3RSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlcXVlc3RSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgICByZXR1cm4gKCkgPT4gY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVxdWVzdFJlZi5jdXJyZW50ISk7XG4gIH0sIFtkZXBzXSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./utils/animation.ts\n");

/***/ })

}]);