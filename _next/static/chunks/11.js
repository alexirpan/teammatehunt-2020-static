(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[11],{

/***/ "./components/groupsolve/jellybean.tsx":
/*!*********************************************!*\
  !*** ./components/groupsolve/jellybean.tsx ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/slicedToArray */ \"./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var components_groupsolve_lobby__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! components/groupsolve/lobby */ \"./components/groupsolve/lobby.tsx\");\n/* harmony import */ var schema_protos_jellybean_pb__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! schema/protos/jellybean_pb */ \"./schema/protos/jellybean_pb.js\");\n/* harmony import */ var schema_protos_jellybean_pb__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(schema_protos_jellybean_pb__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! schema/protos/game_pb */ \"./schema/protos/game_pb.js\");\n/* harmony import */ var schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var utils_game__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! utils/game */ \"./utils/game.ts\");\n/* harmony import */ var utils_keyboard__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! utils/keyboard */ \"./utils/keyboard.ts\");\n/* harmony import */ var utils_assets__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! utils/assets */ \"./utils/assets.ts\");\n/* harmony import */ var utils_timer__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! utils/timer */ \"./utils/timer.tsx\");\n/* harmony import */ var utils_animation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! utils/animation */ \"./utils/animation.ts\");\n\n\nvar _this = undefined,\n    _jsxFileName = \"/vagrant/client/components/groupsolve/jellybean.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement;\n\n\n\n\n\n\n\n\n\n\nvar JellybeanState = schema_protos_jellybean_pb__WEBPACK_IMPORTED_MODULE_4__[\"JellybeanGameState\"].JellybeanState;\nvar WORDS_PER_ROW = 4;\nvar FALLING_TIME = 5; // 5 frames\n\nvar PONY_SIZE = 32;\nvar JELLYBEAN_SOUND_EFFECTS = [{\n  src: 'puzzle/jellybean/sfx',\n  sprite: {\n    fall: [0, 1700],\n    move: [1700, 300]\n  }\n}, {\n  src: 'puzzle/jellybean/bgm',\n  sprite: {\n    loop: [0, 195428, true]\n  }\n}];\n\nvar getPosition = function getPosition(x, y, screenDimensions) {\n  var width = screenDimensions.width / 5;\n  var height = screenDimensions.height / 6;\n  var offsetY = screenDimensions.width * 0.15;\n  var paddingX = width / 5;\n  var paddingY = height / 6;\n  return [x * (width + paddingX) + paddingX, y * (height + paddingY) + offsetY];\n};\n\nvar getAnimationOffset = function getAnimationOffset(tick) {\n  var mod = Math.floor(tick / 4) % 4;\n  return mod === 3 ? 1 : mod;\n};\n\nvar renderTitle = function renderTitle(ctx, sprite, screenDimensions) {\n  ctx.clearRect(0, 0, screenDimensions.width, screenDimensions.height);\n  ctx.drawImage(sprite, 0, 0, screenDimensions.width, screenDimensions.height);\n};\n\nvar renderBackground = function renderBackground(ctx, screenDimensions) {\n  ctx.clearRect(0, 0, screenDimensions.width, screenDimensions.height);\n  ctx.fillStyle = '#ffd59b';\n  ctx.fillRect(0, 0, screenDimensions.width, screenDimensions.height);\n};\n\nvar renderWord = function renderWord(ctx, sprite, word, falling, x, y, width, height) {\n  ctx.save();\n\n  if (falling) {\n    ctx.filter = 'brightness(0.2)';\n  }\n\n  ctx.drawImage(sprite, x, y, width, height);\n  ctx.restore(); // Draw text onto the image.\n\n  ctx.fillStyle = '#000';\n  ctx.font = '20px serif';\n  ctx.textAlign = 'center';\n  ctx.fillText(word, x + width / 2, y + height * 3 / 4, width);\n};\n\nvar renderWords = function renderWords(ctx, sprite, words, fallingTiles, screenDimensions) {\n  var wordWidth = screenDimensions.width / 5;\n  var wordHeight = screenDimensions.height / 6;\n  words.forEach(function (word, i) {\n    var _getPosition = getPosition(i % WORDS_PER_ROW, Math.floor(i / WORDS_PER_ROW), screenDimensions),\n        _getPosition2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_getPosition, 2),\n        x = _getPosition2[0],\n        y = _getPosition2[1];\n\n    renderWord(ctx, sprite, word, fallingTiles.has(word), x, y, wordWidth, wordHeight);\n  });\n};\n\nvar renderPlayer = function renderPlayer(ctx, spritesheet, _ref, i, sizeModifier, animate, tick, screenDimensions) {\n  var _ref2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref, 2),\n      x = _ref2[0],\n      y = _ref2[1];\n\n  var ponyWidth = screenDimensions.width / 5 / 3;\n  var ponyHeight = screenDimensions.height / 6 / 2;\n  var ponySize = Math.min(ponyWidth, ponyHeight);\n  ctx.drawImage(spritesheet, PONY_SIZE * (3 * (i % 3) + (animate ? getAnimationOffset(tick) : 1)), PONY_SIZE * 4 * Math.floor(i / 3), PONY_SIZE, PONY_SIZE, x + i * ponySize / 2 + ponySize / 2 - ponySize * sizeModifier / 2, y + ponySize / 2 - ponySize * sizeModifier / 2, ponySize * sizeModifier, ponySize * sizeModifier);\n};\n\nvar renderPlayers = function renderPlayers(ctx, images, players, oldPlayers, tick, fallStartTick, screenDimensions) {\n  players.forEach(function (player, i) {\n    var _oldPlayer$getFallen;\n\n    var oldPlayer = oldPlayers[i];\n    var alreadyFell = (_oldPlayer$getFallen = oldPlayer === null || oldPlayer === void 0 ? void 0 : oldPlayer.getFallen()) !== null && _oldPlayer$getFallen !== void 0 ? _oldPlayer$getFallen : false;\n    var falling = !alreadyFell && player.getFallen();\n\n    if (!alreadyFell && (!falling || tick < fallStartTick + FALLING_TIME)) {\n      var _player$getPosition$g, _player$getPosition, _player$getPosition$g2, _player$getPosition2;\n\n      var sizeModifier = falling ? 1 - (tick - fallStartTick) / FALLING_TIME : 1;\n      renderPlayer(ctx, images['ponies'], getPosition((_player$getPosition$g = (_player$getPosition = player.getPosition()) === null || _player$getPosition === void 0 ? void 0 : _player$getPosition.getX()) !== null && _player$getPosition$g !== void 0 ? _player$getPosition$g : 0, (_player$getPosition$g2 = (_player$getPosition2 = player.getPosition()) === null || _player$getPosition2 === void 0 ? void 0 : _player$getPosition2.getY()) !== null && _player$getPosition$g2 !== void 0 ? _player$getPosition$g2 : 0, screenDimensions), i, sizeModifier, false\n      /* animate */\n      , tick, screenDimensions);\n    }\n  });\n};\n\nvar JellybeanGame = function JellybeanGame(_ref3) {\n  _s();\n\n  var _gameStateRef$current, _gameState$getState, _gameState$getBaseSta2, _gameState$getBaseSta3, _gameState$getBaseSta4, _gameState$getBaseSta5;\n\n  var canvasRef = _ref3.canvasRef,\n      gameState = _ref3.gameState,\n      isConnected = _ref3.isConnected,\n      setLoading = _ref3.setLoading,\n      currentPlayer = _ref3.currentPlayer,\n      sendMessage = _ref3.sendMessage,\n      restartGame = _ref3.restartGame,\n      screenDimensions = _ref3.screenDimensions;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(false),\n      playerStarted = _useState[0],\n      setPlayerStarted = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(-1),\n      level = _useState2[0],\n      setLevel = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])([]),\n      words = _useState3[0],\n      setWords = _useState3[1];\n\n  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(new Set()),\n      fallingTiles = _useState4[0],\n      setFallingTiles = _useState4[1];\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(''),\n      clue = _useState5[0],\n      setClue = _useState5[1];\n\n  var _useState6 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(0),\n      endTick = _useState6[0],\n      setEndTick = _useState6[1];\n\n  var _useState7 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(false),\n      gameOver = _useState7[0],\n      setGameOver = _useState7[1];\n\n  var _useImages = Object(utils_assets__WEBPACK_IMPORTED_MODULE_8__[\"useImages\"])('puzzle/jellybean/', ['title', 'card', 'ponies']),\n      isLoading = _useImages.isLoading,\n      images = _useImages.images;\n\n  var _useSounds = Object(utils_assets__WEBPACK_IMPORTED_MODULE_8__[\"useSounds\"])('', [].concat(JELLYBEAN_SOUND_EFFECTS, [utils_assets__WEBPACK_IMPORTED_MODULE_8__[\"MAIN_SOUND_EFFECTS\"], utils_timer__WEBPACK_IMPORTED_MODULE_9__[\"TICK_SOUND_EFFECTS\"]])),\n      isSoundLoading = _useSounds.isLoading,\n      sounds = _useSounds.sounds;\n\n  Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useEffect\"])(function () {\n    if (!isLoading && !isSoundLoading) {\n      setLoading(false);\n    }\n  }, [isLoading, isSoundLoading]); // Refs for use in animation frames.\n\n  var gameStateRef = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useRef\"])(null);\n  var tickRef = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useRef\"])(0);\n  var fallStartTickRef = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useRef\"])(0);\n  var oldPlayersRef = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useRef\"])([]);\n  var playersRef = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useRef\"])([]);\n  var timer = Object(utils_timer__WEBPACK_IMPORTED_MODULE_9__[\"useTimer\"])(endTick - tickRef.current, 10, !isLoading && !isSoundLoading && ((_gameStateRef$current = gameStateRef.current) === null || _gameStateRef$current === void 0 ? void 0 : _gameStateRef$current.getState()) === JellybeanState.PLAYING, {\n    warningAt: 6,\n    tickAt: 3,\n    tickSfx: sounds['public/tick']\n  });\n\n  if (true) {\n    Object(utils_keyboard__WEBPACK_IMPORTED_MODULE_7__[\"useEventListener\"])('keyup', function (key) {\n      var _gameStateRef$current2;\n\n      var direction = utils_game__WEBPACK_IMPORTED_MODULE_6__[\"DIRECTION_MAP\"][key];\n\n      if (((_gameStateRef$current2 = gameStateRef.current) === null || _gameStateRef$current2 === void 0 ? void 0 : _gameStateRef$current2.getState()) === JellybeanState.PLAYING && direction) {\n        var action = new schema_protos_jellybean_pb__WEBPACK_IMPORTED_MODULE_4__[\"JellybeanGameAction\"]();\n        action.setMove(direction);\n        sendMessage(action);\n        sounds['puzzle/jellybean/sfx'].play('move');\n      }\n    }, window, []);\n  }\n\n  var cleanup = function cleanup() {\n    setPlayerStarted(false);\n    setLevel(-1);\n    setWords([]);\n    setFallingTiles(new Set());\n    setClue('');\n    setEndTick(0);\n    setGameOver(false);\n    gameStateRef.current = null;\n    tickRef.current = 0;\n    canvasRef.current.getContext('2d').clearRect(0, 0, screenDimensions.width, screenDimensions.height);\n  };\n\n  var onStartGame = function onStartGame() {\n    var action = new schema_protos_jellybean_pb__WEBPACK_IMPORTED_MODULE_4__[\"JellybeanGameAction\"]();\n    var baseAction = new schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameAction\"]();\n    baseAction.setAction(schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"Action\"].START_GAME);\n    action.setBaseAction(baseAction);\n    sendMessage(action);\n    setPlayerStarted(true);\n    sounds['public/mainsfx'].play('select');\n  };\n\n  var onRestart = function onRestart() {\n    if (Object(utils_game__WEBPACK_IMPORTED_MODULE_6__[\"isGameOver\"])(gameStateRef.current)) {\n      sounds['public/mainsfx'].play('select');\n      cleanup();\n      restartGame();\n    }\n  }; // Update client state on every websocket message.\n\n\n  Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useEffect\"])(function () {\n    var _gameState$getBaseSta;\n\n    gameStateRef.current = gameState;\n    tickRef.current = (_gameState$getBaseSta = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getTick()) !== null && _gameState$getBaseSta !== void 0 ? _gameState$getBaseSta : 0;\n\n    if (!gameState || !isConnected || isLoading || gameOver) {\n      return;\n    }\n\n    if (Object(utils_game__WEBPACK_IMPORTED_MODULE_6__[\"isGameOver\"])(gameState)) {\n      sounds['puzzle/jellybean/bgm'].fade(1, 0, 1000);\n      sounds['public/mainsfx'].play(gameState.getBaseState().getStatus() === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'win' : 'loss');\n      setGameOver(true);\n      return;\n    }\n\n    switch (gameState.getState()) {\n      case JellybeanState.WAITING_FOR_START:\n        // Wait for players to start\n        break;\n\n      case JellybeanState.LEVEL_TRANSITION:\n        if (gameState.getBaseState().getLevel() !== level) {\n          if (level === -1) {\n            sounds['puzzle/jellybean/bgm'].play('loop');\n          }\n\n          setLevel(gameState.getBaseState().getLevel());\n          setWords(gameState.getWordsList());\n          setClue(gameState.getClue());\n          setEndTick(gameState.getEndTick());\n          setFallingTiles(new Set());\n          fallStartTickRef.current = 0;\n          oldPlayersRef.current = playersRef.current;\n        }\n\n        break;\n\n      case JellybeanState.FALLING:\n        if (!fallStartTickRef.current) {\n          setFallingTiles(new Set(gameState.getFallingTilesList()));\n          fallStartTickRef.current = tickRef.current;\n\n          var _newPlayers = gameState.getPlayersList();\n\n          if (_newPlayers === null || _newPlayers === void 0 ? void 0 : _newPlayers.length) {\n            oldPlayersRef.current = playersRef.current;\n            playersRef.current = _newPlayers; // Play a sound if at least one player just fell.\n\n            if (_newPlayers.some(function (newPlayer, i) {\n              var _oldPlayersRef$curren, _oldPlayersRef$curren2;\n\n              var alreadyFell = (_oldPlayersRef$curren = (_oldPlayersRef$curren2 = oldPlayersRef.current[i]) === null || _oldPlayersRef$curren2 === void 0 ? void 0 : _oldPlayersRef$curren2.getFallen()) !== null && _oldPlayersRef$curren !== void 0 ? _oldPlayersRef$curren : false;\n              return !alreadyFell && newPlayer.getFallen();\n            })) {\n              sounds['puzzle/jellybean/sfx'].play('fall');\n            }\n          }\n        }\n\n        break;\n\n      case JellybeanState.PLAYING:\n        var newPlayers = gameState.getPlayersList();\n\n        if (newPlayers === null || newPlayers === void 0 ? void 0 : newPlayers.length) {\n          oldPlayersRef.current = playersRef.current;\n          playersRef.current = newPlayers;\n        }\n\n        break;\n    }\n  }, [gameState]); // Paint frames on the canvas.\n\n  var render = function render(tick) {\n    var _gameStateRef$current3, _gameStateRef$current4;\n\n    if (!gameStateRef.current || isLoading || isSoundLoading || Object(utils_game__WEBPACK_IMPORTED_MODULE_6__[\"isGameOver\"])(gameStateRef.current)) {\n      return;\n    }\n\n    var ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, screenDimensions.width, screenDimensions.height);\n    var state = gameStateRef.current.getState();\n    var players = (_gameStateRef$current3 = (_gameStateRef$current4 = gameStateRef.current.getBaseState()) === null || _gameStateRef$current4 === void 0 ? void 0 : _gameStateRef$current4.getPlayersList()) !== null && _gameStateRef$current3 !== void 0 ? _gameStateRef$current3 : [];\n\n    if (state === JellybeanState.WAITING_FOR_START) {\n      renderTitle(ctx, images['title'], screenDimensions);\n      var numPlayers = players.length;\n      players.forEach(function (player, i) {\n        renderPlayer(ctx, images['ponies'], [screenDimensions.width / 2 - numPlayers * 32 + i * 32, screenDimensions.height * 0.85], i, i === currentPlayer ? 1.25 : 0.75, player.getReady()\n        /* animate */\n        , tick, screenDimensions);\n      });\n    } else {\n      renderBackground(ctx, screenDimensions);\n      renderWords(ctx, images['card'], words, fallingTiles, screenDimensions);\n      renderPlayers(ctx, images, playersRef.current, oldPlayersRef.current, tick, fallStartTickRef.current, screenDimensions);\n    }\n  };\n\n  Object(utils_animation__WEBPACK_IMPORTED_MODULE_10__[\"useAnimationFrame\"])(render, tickRef, [screenDimensions, words, fallingTiles]);\n  var state = (_gameState$getState = gameState === null || gameState === void 0 ? void 0 : gameState.getState()) !== null && _gameState$getState !== void 0 ? _gameState$getState : JellybeanState.WAITING_FOR_START;\n  var status = (_gameState$getBaseSta2 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getStatus()) !== null && _gameState$getBaseSta2 !== void 0 ? _gameState$getBaseSta2 : schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].WAITING_FOR_START;\n  var players = (_gameState$getBaseSta3 = gameState === null || gameState === void 0 ? void 0 : (_gameState$getBaseSta4 = gameState.getBaseState()) === null || _gameState$getBaseSta4 === void 0 ? void 0 : _gameState$getBaseSta4.getPlayersList()) !== null && _gameState$getBaseSta3 !== void 0 ? _gameState$getBaseSta3 : [];\n  var tick = (_gameState$getBaseSta5 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getTick()) !== null && _gameState$getBaseSta5 !== void 0 ? _gameState$getBaseSta5 : 0;\n\n  if (isLoading || isSoundLoading) {\n    return __jsx(\"div\", {\n      className: \"message abs-center\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 12\n      }\n    }, \"Generating code words...\");\n  }\n\n  var _styles$className = {\n    styles: __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {\n      id: \"4143228484\"\n    }, \"div.jsx-4143228484{top:35%;width:75%;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/jellybean.tsx */\"),\n    className: \"jsx-4143228484\"\n  },\n      lobbyClassName = _styles$className.className,\n      lobbyStyles = _styles$className.styles;\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_2___default.a.Fragment, null, state === JellybeanState.WAITING_FOR_START && tick === 0 ? __jsx(components_groupsolve_lobby__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n    playerStarted: playerStarted,\n    isConnected: isConnected,\n    players: players,\n    currentPlayer: currentPlayer,\n    startButton: __jsx(\"button\", {\n      onClick: onStartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"2560065351\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 24\n      }\n    }, \"Ready to start\"),\n    confirmButton: __jsx(\"button\", {\n      onClick: onStartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"2560065351\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 26\n      }\n    }, \"Start game\"),\n    rejoinButton: __jsx(\"button\", {\n      onClick: restartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"2560065351\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 25\n      }\n    }, \"Rejoin lobby\"),\n    className: lobbyClassName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 9\n    }\n  }) : __jsx(react__WEBPACK_IMPORTED_MODULE_2___default.a.Fragment, null, gameOver && __jsx(react__WEBPACK_IMPORTED_MODULE_2___default.a.Fragment, null, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"2560065351\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]) + \" \" + \"winLose message center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 15\n    }\n  }, __jsx(\"p\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"2560065351\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 17\n    }\n  }, \"GAME\", ' ', status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'COMPLETE' : 'OVER')), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"2560065351\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]) + \" \" + \"bottom message center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 15\n    }\n  }, __jsx(\"button\", {\n    onClick: onRestart,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"2560065351\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 17\n    }\n  }, \"Restart\"))), clue && __jsx(\"h2\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"2560065351\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]) + \" \" + \"abs-center clue\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 20\n    }\n  }, clue), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"2560065351\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]) + \" \" + \"ui target top\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 11\n    }\n  }, __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"2560065351\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 13\n    }\n  }, \"Goal: Round 15\"), !gameOver && __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"2560065351\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 27\n    }\n  }, \"Arrow keys/WASD to move\")), __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"2560065351\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]) + \" \" + \"ui level top\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 11\n    }\n  }, \"Round \", level + 1), !gameOver && __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"2560065351\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred']]]) + \" \" + \"message center top\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 25\n    }\n  }, timer)), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {\n    id: \"2560065351\",\n    dynamic: [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred'],\n    __self: _this\n  }, \".center.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:absolute;left:0;right:0;text-align:center;}.message.__jsx-style-dynamic-selector{color:#000;pointer-events:none;font-size:25px;top:40%;}.title.__jsx-style-dynamic-selector{top:20%;}.winLose.message.__jsx-style-dynamic-selector{background-color:rgba(255,255,255,0.2) border-radius:32px;color:\".concat(status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_5__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'darkred', \";padding:16px 24px;font-size:50px;text-shadow:2px 2px 2px #000;top:20%;}button.__jsx-style-dynamic-selector{background:#d15142;border-radius:0;font-size:20px;padding:0 16px;}button.__jsx-style-dynamic-selector:hover{background:rgba(200,80,60,0.8);}.top.__jsx-style-dynamic-selector{top:4%;}.clue.__jsx-style-dynamic-selector{top:9%;}.bottom.__jsx-style-dynamic-selector{top:85%;}.ui.__jsx-style-dynamic-selector{position:absolute;}.target.__jsx-style-dynamic-selector{left:5%;}.level.__jsx-style-dynamic-selector{right:5%;}h2.__jsx-style-dynamic-selector{margin-top:2vmin;}h3.__jsx-style-dynamic-selector{font-size:2.5vmin;margin:8px 0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/jellybean.tsx */\")), lobbyStyles);\n};\n\n_s(JellybeanGame, \"HiR2O+ohCg4BMlPs7n1U1f37Ip4=\", false, function () {\n  return [utils_assets__WEBPACK_IMPORTED_MODULE_8__[\"useImages\"], utils_assets__WEBPACK_IMPORTED_MODULE_8__[\"useSounds\"], utils_timer__WEBPACK_IMPORTED_MODULE_9__[\"useTimer\"], utils_keyboard__WEBPACK_IMPORTED_MODULE_7__[\"useEventListener\"], utils_animation__WEBPACK_IMPORTED_MODULE_10__[\"useAnimationFrame\"]];\n});\n\n_c = JellybeanGame;\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  Game: JellybeanGame,\n  State: schema_protos_jellybean_pb__WEBPACK_IMPORTED_MODULE_4__[\"JellybeanGameState\"]\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"JellybeanGame\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/groupsolve/jellybean.tsx\n");

/***/ }),

/***/ "./components/groupsolve/lobby.tsx":
/*!*****************************************!*\
  !*** ./components/groupsolve/lobby.tsx ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ \"./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\nvar _this = undefined,\n    _jsxFileName = \"/vagrant/client/components/groupsolve/lobby.tsx\";\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement;\n\nvar MAX_PLAYERS = 6;\n\nvar Lobby = function Lobby(_ref) {\n  var playerStarted = _ref.playerStarted,\n      isConnected = _ref.isConnected,\n      title = _ref.title,\n      players = _ref.players,\n      currentPlayer = _ref.currentPlayer,\n      playerSprite = _ref.playerSprite,\n      startButton = _ref.startButton,\n      confirmButton = _ref.confirmButton,\n      rejoinButton = _ref.rejoinButton,\n      className = _ref.className,\n      _ref$requiredPlayers = _ref.requiredPlayers,\n      requiredPlayers = _ref$requiredPlayers === void 0 ? 1 : _ref$requiredPlayers,\n      props = Object(_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref, [\"playerStarted\", \"isConnected\", \"title\", \"players\", \"currentPlayer\", \"playerSprite\", \"startButton\", \"confirmButton\", \"rejoinButton\", \"className\", \"requiredPlayers\"]);\n\n  var allStarted = isConnected && players.every(function (player) {\n    return player.getReady();\n  }) && players.length >= requiredPlayers;\n  var playersNeeded = Math.max(requiredPlayers - 1, players.filter(function (player) {\n    return !player.getReady();\n  }).length);\n  return __jsx(\"div\", Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props, {\n    className: \"jsx-243751013\" + \" \" + (props && props.className != null && props.className || \"abs-center center \".concat(className !== null && className !== void 0 ? className : '')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }), title, allStarted ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, confirmButton, __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"Note: Once you begin a session, others won't be able to join until it ends.\")) : playerStarted && players.length >= requiredPlayers ? \"Waiting for \".concat(playersNeeded, \" other player\").concat(playersNeeded === 1 ? '' : 's', \" to join...\") : playerStarted ? \"(Minimum of \".concat(requiredPlayers, \" players required)\") : isConnected ? startButton : __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, rejoinButton, __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Game in session... \", __jsx(\"br\", {\n    className: \"jsx-243751013\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 32\n    }\n  }), \"Please wait for the current session to complete.\")), players.length > 0 && __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"(\", players.length, \" player\", players.length === 1 ? ' ' : 's ', \"in lobby)\"), playerSprite && __jsx(\"div\", {\n    className: \"jsx-243751013\" + \" \" + \"players flex-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, players.map(function (player, i) {\n    return __jsx(\"div\", {\n      key: i,\n      style: {\n        backgroundPosition: \"\".concat(i * 100 / (MAX_PLAYERS - 1), \"%\"),\n        backgroundImage: \"url(\".concat(playerSprite.url, \")\"),\n        backgroundSize: '600% 100%',\n        transform: \"scale(\".concat(i === currentPlayer ? 1 : 0.7, \")\"),\n        filter: player.getReady() ? 'none' : 'grayscale(1) opacity(80%)',\n        width: playerSprite.width,\n        height: playerSprite.height\n      },\n      className: \"jsx-243751013\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    });\n  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"243751013\",\n    __self: _this\n  }, \".small.jsx-243751013{font-size:1.8vmin;line-height:2.2vmin;margin-top:2.8vmin;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlHa0IsQUFHNkIsa0JBQ0Usb0JBQ0QsbUJBQ3JCIiwiZmlsZSI6Ii92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9nYW1lX3BiJztcbmltcG9ydCB7IGdldEltYWdlT2Zmc2V0IH0gZnJvbSAndXRpbHMvZ2FtZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHBsYXllclN0YXJ0ZWQ6IGJvb2xlYW47XG4gIGlzQ29ubmVjdGVkOiBib29sZWFuO1xuICB0aXRsZT86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcGxheWVyczogUGxheWVyW107XG4gIGN1cnJlbnRQbGF5ZXI6IG51bWJlcjtcbiAgcGxheWVyU3ByaXRlPzoge1xuICAgIHVybDogc3RyaW5nO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gIH07XG4gIHN0YXJ0QnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGNvbmZpcm1CdXR0b246IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcmVqb2luQnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIHJlcXVpcmVkUGxheWVycz86IG51bWJlcjtcbn1cblxuY29uc3QgTUFYX1BMQVlFUlMgPSA2O1xuXG5jb25zdCBMb2JieTogRnVuY3Rpb25Db21wb25lbnQ8XG4gIFByb3BzICYgT21pdDxSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+LCAndGl0bGUnPlxuPiA9ICh7XG4gIHBsYXllclN0YXJ0ZWQsXG4gIGlzQ29ubmVjdGVkLFxuICB0aXRsZSxcbiAgcGxheWVycyxcbiAgY3VycmVudFBsYXllcixcbiAgcGxheWVyU3ByaXRlLFxuICBzdGFydEJ1dHRvbixcbiAgY29uZmlybUJ1dHRvbixcbiAgcmVqb2luQnV0dG9uLFxuICBjbGFzc05hbWUsXG4gIHJlcXVpcmVkUGxheWVycyA9IDEsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGFsbFN0YXJ0ZWQgPVxuICAgIGlzQ29ubmVjdGVkICYmXG4gICAgcGxheWVycy5ldmVyeSgocGxheWVyKSA9PiBwbGF5ZXIuZ2V0UmVhZHkoKSkgJiZcbiAgICBwbGF5ZXJzLmxlbmd0aCA+PSByZXF1aXJlZFBsYXllcnM7XG5cbiAgY29uc3QgcGxheWVyc05lZWRlZCA9IE1hdGgubWF4KFxuICAgIHJlcXVpcmVkUGxheWVycyAtIDEsXG4gICAgcGxheWVycy5maWx0ZXIoKHBsYXllcikgPT4gIXBsYXllci5nZXRSZWFkeSgpKS5sZW5ndGhcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgYWJzLWNlbnRlciBjZW50ZXIgJHtjbGFzc05hbWUgPz8gJyd9YH0gey4uLnByb3BzfT5cbiAgICAgIHt0aXRsZX1cbiAgICAgIHthbGxTdGFydGVkID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtjb25maXJtQnV0dG9ufVxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgICBOb3RlOiBPbmNlIHlvdSBiZWdpbiBhIHNlc3Npb24sIG90aGVycyB3b24ndCBiZSBhYmxlIHRvIGpvaW4gdW50aWxcbiAgICAgICAgICAgIGl0IGVuZHMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiBwbGF5ZXJTdGFydGVkICYmIHBsYXllcnMubGVuZ3RoID49IHJlcXVpcmVkUGxheWVycyA/IChcbiAgICAgICAgYFdhaXRpbmcgZm9yICR7cGxheWVyc05lZWRlZH0gb3RoZXIgcGxheWVyJHtcbiAgICAgICAgICBwbGF5ZXJzTmVlZGVkID09PSAxID8gJycgOiAncydcbiAgICAgICAgfSB0byBqb2luLi4uYFxuICAgICAgKSA6IHBsYXllclN0YXJ0ZWQgPyAoXG4gICAgICAgIGAoTWluaW11bSBvZiAke3JlcXVpcmVkUGxheWVyc30gcGxheWVycyByZXF1aXJlZClgXG4gICAgICApIDogaXNDb25uZWN0ZWQgPyAoXG4gICAgICAgIHN0YXJ0QnV0dG9uXG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZWpvaW5CdXR0b259XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj5cbiAgICAgICAgICAgIEdhbWUgaW4gc2Vzc2lvbi4uLiA8YnIgLz5cbiAgICAgICAgICAgIFBsZWFzZSB3YWl0IGZvciB0aGUgY3VycmVudCBzZXNzaW9uIHRvIGNvbXBsZXRlLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3BsYXllcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgKHtwbGF5ZXJzLmxlbmd0aH0gcGxheWVye3BsYXllcnMubGVuZ3RoID09PSAxID8gJyAnIDogJ3MgJ31cbiAgICAgICAgICBpbiBsb2JieSlcbiAgICAgICAgPC9wPlxuICAgICAgKX1cbiAgICAgIHtwbGF5ZXJTcHJpdGUgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllcnMgZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICB7cGxheWVycy5tYXAoKHBsYXllciwgaSkgPT4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBgJHsoaSAqIDEwMCkgLyAoTUFYX1BMQVlFUlMgLSAxKX0lYCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwbGF5ZXJTcHJpdGUudXJsfSlgLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjAwJSAxMDAlJyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2kgPT09IGN1cnJlbnRQbGF5ZXIgPyAxIDogMC43fSlgLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogcGxheWVyLmdldFJlYWR5KClcbiAgICAgICAgICAgICAgICAgID8gJ25vbmUnXG4gICAgICAgICAgICAgICAgICA6ICdncmF5c2NhbGUoMSkgb3BhY2l0eSg4MCUpJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogcGxheWVyU3ByaXRlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGxheWVyU3ByaXRlLmhlaWdodCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuc21hbGwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS44dm1pbjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMi4ydm1pbjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAyLjh2bWluO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2JieTtcbiJdfQ== */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/lobby.tsx */\"));\n};\n\n_c = Lobby;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Lobby);\n\nvar _c;\n\n$RefreshReg$(_c, \"Lobby\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9ncm91cHNvbHZlL2xvYmJ5LnRzeD85NjdiIl0sIm5hbWVzIjpbIk1BWF9QTEFZRVJTIiwiTG9iYnkiLCJwbGF5ZXJTdGFydGVkIiwiaXNDb25uZWN0ZWQiLCJ0aXRsZSIsInBsYXllcnMiLCJjdXJyZW50UGxheWVyIiwicGxheWVyU3ByaXRlIiwic3RhcnRCdXR0b24iLCJjb25maXJtQnV0dG9uIiwicmVqb2luQnV0dG9uIiwiY2xhc3NOYW1lIiwicmVxdWlyZWRQbGF5ZXJzIiwicHJvcHMiLCJhbGxTdGFydGVkIiwiZXZlcnkiLCJwbGF5ZXIiLCJnZXRSZWFkeSIsImxlbmd0aCIsInBsYXllcnNOZWVkZWQiLCJNYXRoIiwibWF4IiwiZmlsdGVyIiwibWFwIiwiaSIsImJhY2tncm91bmRQb3NpdGlvbiIsImJhY2tncm91bmRJbWFnZSIsInVybCIsImJhY2tncm91bmRTaXplIiwidHJhbnNmb3JtIiwid2lkdGgiLCJoZWlnaHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBc0JBLElBQU1BLFdBQVcsR0FBRyxDQUFwQjs7QUFFQSxJQUFNQyxLQUVMLEdBQUcsU0FGRUEsS0FFRixPQWFFO0FBQUEsTUFaSkMsYUFZSSxRQVpKQSxhQVlJO0FBQUEsTUFYSkMsV0FXSSxRQVhKQSxXQVdJO0FBQUEsTUFWSkMsS0FVSSxRQVZKQSxLQVVJO0FBQUEsTUFUSkMsT0FTSSxRQVRKQSxPQVNJO0FBQUEsTUFSSkMsYUFRSSxRQVJKQSxhQVFJO0FBQUEsTUFQSkMsWUFPSSxRQVBKQSxZQU9JO0FBQUEsTUFOSkMsV0FNSSxRQU5KQSxXQU1JO0FBQUEsTUFMSkMsYUFLSSxRQUxKQSxhQUtJO0FBQUEsTUFKSkMsWUFJSSxRQUpKQSxZQUlJO0FBQUEsTUFISkMsU0FHSSxRQUhKQSxTQUdJO0FBQUEsa0NBRkpDLGVBRUk7QUFBQSxNQUZKQSxlQUVJLHFDQUZjLENBRWQ7QUFBQSxNQUREQyxLQUNDOztBQUNKLE1BQU1DLFVBQVUsR0FDZFgsV0FBVyxJQUNYRSxPQUFPLENBQUNVLEtBQVIsQ0FBYyxVQUFDQyxNQUFEO0FBQUEsV0FBWUEsTUFBTSxDQUFDQyxRQUFQLEVBQVo7QUFBQSxHQUFkLENBREEsSUFFQVosT0FBTyxDQUFDYSxNQUFSLElBQWtCTixlQUhwQjtBQUtBLE1BQU1PLGFBQWEsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQ3BCVCxlQUFlLEdBQUcsQ0FERSxFQUVwQlAsT0FBTyxDQUFDaUIsTUFBUixDQUFlLFVBQUNOLE1BQUQ7QUFBQSxXQUFZLENBQUNBLE1BQU0sQ0FBQ0MsUUFBUCxFQUFiO0FBQUEsR0FBZixFQUErQ0MsTUFGM0IsQ0FBdEI7QUFLQSxTQUNFLG9HQUE0REwsS0FBNUQ7QUFBQSwySEFBcUNGLFNBQXJDLGFBQXFDQSxTQUFyQyxjQUFxQ0EsU0FBckMsR0FBa0QsRUFBbEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUNHUCxLQURILEVBRUdVLFVBQVUsR0FDVCxtRUFDR0wsYUFESCxFQUVFO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1GQUZGLENBRFMsR0FRUFAsYUFBYSxJQUFJRyxPQUFPLENBQUNhLE1BQVIsSUFBa0JOLGVBQW5DLHlCQUNhTyxhQURiLDBCQUVBQSxhQUFhLEtBQUssQ0FBbEIsR0FBc0IsRUFBdEIsR0FBMkIsR0FGM0IsbUJBSUFqQixhQUFhLHlCQUNBVSxlQURBLDBCQUViVCxXQUFXLEdBQ2JLLFdBRGEsR0FHYixtRUFDR0UsWUFESCxFQUVFO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLDRCQUNxQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFEckIscURBRkYsQ0FuQkosRUEyQkdMLE9BQU8sQ0FBQ2EsTUFBUixHQUFpQixDQUFqQixJQUNDO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFVBQ0liLE9BQU8sQ0FBQ2EsTUFEWixhQUMyQmIsT0FBTyxDQUFDYSxNQUFSLEtBQW1CLENBQW5CLEdBQXVCLEdBQXZCLEdBQTZCLElBRHhELGNBNUJKLEVBaUNHWCxZQUFZLElBQ1g7QUFBQSx1Q0FBZSxxQkFBZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0dGLE9BQU8sQ0FBQ2tCLEdBQVIsQ0FBWSxVQUFDUCxNQUFELEVBQVNRLENBQVQ7QUFBQSxXQUNYO0FBQ0UsU0FBRyxFQUFFQSxDQURQO0FBRUUsV0FBSyxFQUFFO0FBQ0xDLDBCQUFrQixZQUFNRCxDQUFDLEdBQUcsR0FBTCxJQUFheEIsV0FBVyxHQUFHLENBQTNCLENBQUwsTUFEYjtBQUVMMEIsdUJBQWUsZ0JBQVNuQixZQUFZLENBQUNvQixHQUF0QixNQUZWO0FBR0xDLHNCQUFjLEVBQUUsV0FIWDtBQUlMQyxpQkFBUyxrQkFBV0wsQ0FBQyxLQUFLbEIsYUFBTixHQUFzQixDQUF0QixHQUEwQixHQUFyQyxNQUpKO0FBS0xnQixjQUFNLEVBQUVOLE1BQU0sQ0FBQ0MsUUFBUCxLQUNKLE1BREksR0FFSiwyQkFQQztBQVFMYSxhQUFLLEVBQUV2QixZQUFZLENBQUN1QixLQVJmO0FBU0xDLGNBQU0sRUFBRXhCLFlBQVksQ0FBQ3dCO0FBVGhCLE9BRlQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BRFc7QUFBQSxHQUFaLENBREgsQ0FsQ0o7QUFBQTtBQUFBO0FBQUEsMmpKQURGO0FBZ0VELENBMUZEOztLQUFNOUIsSztBQTRGU0Esb0VBQWYiLCJmaWxlIjoiLi9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9nYW1lX3BiJztcbmltcG9ydCB7IGdldEltYWdlT2Zmc2V0IH0gZnJvbSAndXRpbHMvZ2FtZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHBsYXllclN0YXJ0ZWQ6IGJvb2xlYW47XG4gIGlzQ29ubmVjdGVkOiBib29sZWFuO1xuICB0aXRsZT86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcGxheWVyczogUGxheWVyW107XG4gIGN1cnJlbnRQbGF5ZXI6IG51bWJlcjtcbiAgcGxheWVyU3ByaXRlPzoge1xuICAgIHVybDogc3RyaW5nO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gIH07XG4gIHN0YXJ0QnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGNvbmZpcm1CdXR0b246IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcmVqb2luQnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIHJlcXVpcmVkUGxheWVycz86IG51bWJlcjtcbn1cblxuY29uc3QgTUFYX1BMQVlFUlMgPSA2O1xuXG5jb25zdCBMb2JieTogRnVuY3Rpb25Db21wb25lbnQ8XG4gIFByb3BzICYgT21pdDxSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+LCAndGl0bGUnPlxuPiA9ICh7XG4gIHBsYXllclN0YXJ0ZWQsXG4gIGlzQ29ubmVjdGVkLFxuICB0aXRsZSxcbiAgcGxheWVycyxcbiAgY3VycmVudFBsYXllcixcbiAgcGxheWVyU3ByaXRlLFxuICBzdGFydEJ1dHRvbixcbiAgY29uZmlybUJ1dHRvbixcbiAgcmVqb2luQnV0dG9uLFxuICBjbGFzc05hbWUsXG4gIHJlcXVpcmVkUGxheWVycyA9IDEsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGFsbFN0YXJ0ZWQgPVxuICAgIGlzQ29ubmVjdGVkICYmXG4gICAgcGxheWVycy5ldmVyeSgocGxheWVyKSA9PiBwbGF5ZXIuZ2V0UmVhZHkoKSkgJiZcbiAgICBwbGF5ZXJzLmxlbmd0aCA+PSByZXF1aXJlZFBsYXllcnM7XG5cbiAgY29uc3QgcGxheWVyc05lZWRlZCA9IE1hdGgubWF4KFxuICAgIHJlcXVpcmVkUGxheWVycyAtIDEsXG4gICAgcGxheWVycy5maWx0ZXIoKHBsYXllcikgPT4gIXBsYXllci5nZXRSZWFkeSgpKS5sZW5ndGhcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgYWJzLWNlbnRlciBjZW50ZXIgJHtjbGFzc05hbWUgPz8gJyd9YH0gey4uLnByb3BzfT5cbiAgICAgIHt0aXRsZX1cbiAgICAgIHthbGxTdGFydGVkID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtjb25maXJtQnV0dG9ufVxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgICBOb3RlOiBPbmNlIHlvdSBiZWdpbiBhIHNlc3Npb24sIG90aGVycyB3b24ndCBiZSBhYmxlIHRvIGpvaW4gdW50aWxcbiAgICAgICAgICAgIGl0IGVuZHMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiBwbGF5ZXJTdGFydGVkICYmIHBsYXllcnMubGVuZ3RoID49IHJlcXVpcmVkUGxheWVycyA/IChcbiAgICAgICAgYFdhaXRpbmcgZm9yICR7cGxheWVyc05lZWRlZH0gb3RoZXIgcGxheWVyJHtcbiAgICAgICAgICBwbGF5ZXJzTmVlZGVkID09PSAxID8gJycgOiAncydcbiAgICAgICAgfSB0byBqb2luLi4uYFxuICAgICAgKSA6IHBsYXllclN0YXJ0ZWQgPyAoXG4gICAgICAgIGAoTWluaW11bSBvZiAke3JlcXVpcmVkUGxheWVyc30gcGxheWVycyByZXF1aXJlZClgXG4gICAgICApIDogaXNDb25uZWN0ZWQgPyAoXG4gICAgICAgIHN0YXJ0QnV0dG9uXG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZWpvaW5CdXR0b259XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj5cbiAgICAgICAgICAgIEdhbWUgaW4gc2Vzc2lvbi4uLiA8YnIgLz5cbiAgICAgICAgICAgIFBsZWFzZSB3YWl0IGZvciB0aGUgY3VycmVudCBzZXNzaW9uIHRvIGNvbXBsZXRlLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3BsYXllcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgKHtwbGF5ZXJzLmxlbmd0aH0gcGxheWVye3BsYXllcnMubGVuZ3RoID09PSAxID8gJyAnIDogJ3MgJ31cbiAgICAgICAgICBpbiBsb2JieSlcbiAgICAgICAgPC9wPlxuICAgICAgKX1cbiAgICAgIHtwbGF5ZXJTcHJpdGUgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllcnMgZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICB7cGxheWVycy5tYXAoKHBsYXllciwgaSkgPT4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBgJHsoaSAqIDEwMCkgLyAoTUFYX1BMQVlFUlMgLSAxKX0lYCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwbGF5ZXJTcHJpdGUudXJsfSlgLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjAwJSAxMDAlJyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2kgPT09IGN1cnJlbnRQbGF5ZXIgPyAxIDogMC43fSlgLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogcGxheWVyLmdldFJlYWR5KClcbiAgICAgICAgICAgICAgICAgID8gJ25vbmUnXG4gICAgICAgICAgICAgICAgICA6ICdncmF5c2NhbGUoMSkgb3BhY2l0eSg4MCUpJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogcGxheWVyU3ByaXRlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGxheWVyU3ByaXRlLmhlaWdodCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuc21hbGwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS44dm1pbjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMi4ydm1pbjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAyLjh2bWluO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2JieTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/groupsolve/lobby.tsx\n");

/***/ }),

/***/ "./schema/protos/jellybean_pb.js":
/*!***************************************!*\
  !*** ./schema/protos/jellybean_pb.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {// source: jellybean.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = __webpack_require__(/*! google-protobuf */ \"./node_modules/google-protobuf/google-protobuf.js\");\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar game_pb = __webpack_require__(/*! ./game_pb.js */ \"./schema/protos/game_pb.js\");\n\ngoog.object.extend(proto, game_pb);\n\nvar math_pb = __webpack_require__(/*! ./math_pb.js */ \"./schema/protos/math_pb.js\");\n\ngoog.object.extend(proto, math_pb);\ngoog.exportSymbol('proto.JellybeanGameAction', null, global);\ngoog.exportSymbol('proto.JellybeanGameState', null, global);\ngoog.exportSymbol('proto.JellybeanGameState.JellybeanState', null, global);\ngoog.exportSymbol('proto.Pony', null, global);\ngoog.exportSymbol('proto.PonyPlayer', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.PonyPlayer = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.PonyPlayer, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.PonyPlayer.displayName = 'proto.PonyPlayer';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.JellybeanGameState = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.JellybeanGameState.repeatedFields_, null);\n};\n\ngoog.inherits(proto.JellybeanGameState, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.JellybeanGameState.displayName = 'proto.JellybeanGameState';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.JellybeanGameAction = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.JellybeanGameAction, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.JellybeanGameAction.displayName = 'proto.JellybeanGameAction';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.PonyPlayer.prototype.toObject = function (opt_includeInstance) {\n    return proto.PonyPlayer.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.PonyPlayer} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.PonyPlayer.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      position: (f = msg.getPosition()) && math_pb.Coordinate.toObject(includeInstance, f),\n      facing: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      fallen: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.PonyPlayer}\n */\n\n\nproto.PonyPlayer.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.PonyPlayer();\n  return proto.PonyPlayer.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.PonyPlayer} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.PonyPlayer}\n */\n\n\nproto.PonyPlayer.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new math_pb.Coordinate();\n        reader.readMessage(value, math_pb.Coordinate.deserializeBinaryFromReader);\n        msg.setPosition(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.Direction} */\n        reader.readEnum();\n        msg.setFacing(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setFallen(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.PonyPlayer.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.PonyPlayer.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.PonyPlayer} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.PonyPlayer.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getPosition();\n\n  if (f != null) {\n    writer.writeMessage(1, f, math_pb.Coordinate.serializeBinaryToWriter);\n  }\n\n  f = message.getFacing();\n\n  if (f !== 0.0) {\n    writer.writeEnum(2, f);\n  }\n\n  f = message.getFallen();\n\n  if (f) {\n    writer.writeBool(3, f);\n  }\n};\n/**\n * optional Coordinate position = 1;\n * @return {?proto.Coordinate}\n */\n\n\nproto.PonyPlayer.prototype.getPosition = function () {\n  return (\n    /** @type{?proto.Coordinate} */\n    jspb.Message.getWrapperField(this, math_pb.Coordinate, 1)\n  );\n};\n/**\n * @param {?proto.Coordinate|undefined} value\n * @return {!proto.PonyPlayer} returns this\n*/\n\n\nproto.PonyPlayer.prototype.setPosition = function (value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.PonyPlayer} returns this\n */\n\n\nproto.PonyPlayer.prototype.clearPosition = function () {\n  return this.setPosition(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.PonyPlayer.prototype.hasPosition = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional Direction facing = 2;\n * @return {!proto.Direction}\n */\n\n\nproto.PonyPlayer.prototype.getFacing = function () {\n  return (\n    /** @type {!proto.Direction} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {!proto.Direction} value\n * @return {!proto.PonyPlayer} returns this\n */\n\n\nproto.PonyPlayer.prototype.setFacing = function (value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n/**\n * optional bool fallen = 3;\n * @return {boolean}\n */\n\n\nproto.PonyPlayer.prototype.getFallen = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 3, false)\n  );\n};\n/**\n * @param {boolean} value\n * @return {!proto.PonyPlayer} returns this\n */\n\n\nproto.PonyPlayer.prototype.setFallen = function (value) {\n  return jspb.Message.setProto3BooleanField(this, 3, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.JellybeanGameState.repeatedFields_ = [3, 4, 5];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.JellybeanGameState.prototype.toObject = function (opt_includeInstance) {\n    return proto.JellybeanGameState.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.JellybeanGameState} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.JellybeanGameState.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      baseState: (f = msg.getBaseState()) && game_pb.GameState.toObject(includeInstance, f),\n      state: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      wordsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,\n      fallingTilesList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,\n      playersList: jspb.Message.toObjectList(msg.getPlayersList(), proto.PonyPlayer.toObject, includeInstance),\n      clue: jspb.Message.getFieldWithDefault(msg, 6, \"\"),\n      endTick: jspb.Message.getFieldWithDefault(msg, 7, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.JellybeanGameState}\n */\n\n\nproto.JellybeanGameState.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.JellybeanGameState();\n  return proto.JellybeanGameState.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.JellybeanGameState} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.JellybeanGameState}\n */\n\n\nproto.JellybeanGameState.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new game_pb.GameState();\n        reader.readMessage(value, game_pb.GameState.deserializeBinaryFromReader);\n        msg.setBaseState(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.JellybeanGameState.JellybeanState} */\n        reader.readEnum();\n        msg.setState(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.addWords(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.addFallingTiles(value);\n        break;\n\n      case 5:\n        var value = new proto.PonyPlayer();\n        reader.readMessage(value, proto.PonyPlayer.deserializeBinaryFromReader);\n        msg.addPlayers(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setClue(value);\n        break;\n\n      case 7:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setEndTick(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.JellybeanGameState.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.JellybeanGameState.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.JellybeanGameState} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.JellybeanGameState.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getBaseState();\n\n  if (f != null) {\n    writer.writeMessage(1, f, game_pb.GameState.serializeBinaryToWriter);\n  }\n\n  f = message.getState();\n\n  if (f !== 0.0) {\n    writer.writeEnum(2, f);\n  }\n\n  f = message.getWordsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedString(3, f);\n  }\n\n  f = message.getFallingTilesList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedString(4, f);\n  }\n\n  f = message.getPlayersList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(5, f, proto.PonyPlayer.serializeBinaryToWriter);\n  }\n\n  f = message.getClue();\n\n  if (f.length > 0) {\n    writer.writeString(6, f);\n  }\n\n  f = message.getEndTick();\n\n  if (f !== 0) {\n    writer.writeInt32(7, f);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.JellybeanGameState.JellybeanState = {\n  WAITING_FOR_START: 0,\n  PLAYING: 1,\n  FALLING: 2,\n  LEVEL_TRANSITION: 3\n};\n/**\n * optional GameState base_state = 1;\n * @return {?proto.GameState}\n */\n\nproto.JellybeanGameState.prototype.getBaseState = function () {\n  return (\n    /** @type{?proto.GameState} */\n    jspb.Message.getWrapperField(this, game_pb.GameState, 1)\n  );\n};\n/**\n * @param {?proto.GameState|undefined} value\n * @return {!proto.JellybeanGameState} returns this\n*/\n\n\nproto.JellybeanGameState.prototype.setBaseState = function (value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.JellybeanGameState} returns this\n */\n\n\nproto.JellybeanGameState.prototype.clearBaseState = function () {\n  return this.setBaseState(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.JellybeanGameState.prototype.hasBaseState = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional JellybeanState state = 2;\n * @return {!proto.JellybeanGameState.JellybeanState}\n */\n\n\nproto.JellybeanGameState.prototype.getState = function () {\n  return (\n    /** @type {!proto.JellybeanGameState.JellybeanState} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {!proto.JellybeanGameState.JellybeanState} value\n * @return {!proto.JellybeanGameState} returns this\n */\n\n\nproto.JellybeanGameState.prototype.setState = function (value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n/**\n * repeated string words = 3;\n * @return {!Array<string>}\n */\n\n\nproto.JellybeanGameState.prototype.getWordsList = function () {\n  return (\n    /** @type {!Array<string>} */\n    jspb.Message.getRepeatedField(this, 3)\n  );\n};\n/**\n * @param {!Array<string>} value\n * @return {!proto.JellybeanGameState} returns this\n */\n\n\nproto.JellybeanGameState.prototype.setWordsList = function (value) {\n  return jspb.Message.setField(this, 3, value || []);\n};\n/**\n * @param {string} value\n * @param {number=} opt_index\n * @return {!proto.JellybeanGameState} returns this\n */\n\n\nproto.JellybeanGameState.prototype.addWords = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.JellybeanGameState} returns this\n */\n\n\nproto.JellybeanGameState.prototype.clearWordsList = function () {\n  return this.setWordsList([]);\n};\n/**\n * repeated string falling_tiles = 4;\n * @return {!Array<string>}\n */\n\n\nproto.JellybeanGameState.prototype.getFallingTilesList = function () {\n  return (\n    /** @type {!Array<string>} */\n    jspb.Message.getRepeatedField(this, 4)\n  );\n};\n/**\n * @param {!Array<string>} value\n * @return {!proto.JellybeanGameState} returns this\n */\n\n\nproto.JellybeanGameState.prototype.setFallingTilesList = function (value) {\n  return jspb.Message.setField(this, 4, value || []);\n};\n/**\n * @param {string} value\n * @param {number=} opt_index\n * @return {!proto.JellybeanGameState} returns this\n */\n\n\nproto.JellybeanGameState.prototype.addFallingTiles = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.JellybeanGameState} returns this\n */\n\n\nproto.JellybeanGameState.prototype.clearFallingTilesList = function () {\n  return this.setFallingTilesList([]);\n};\n/**\n * repeated PonyPlayer players = 5;\n * @return {!Array<!proto.PonyPlayer>}\n */\n\n\nproto.JellybeanGameState.prototype.getPlayersList = function () {\n  return (\n    /** @type{!Array<!proto.PonyPlayer>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.PonyPlayer, 5)\n  );\n};\n/**\n * @param {!Array<!proto.PonyPlayer>} value\n * @return {!proto.JellybeanGameState} returns this\n*/\n\n\nproto.JellybeanGameState.prototype.setPlayersList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 5, value);\n};\n/**\n * @param {!proto.PonyPlayer=} opt_value\n * @param {number=} opt_index\n * @return {!proto.PonyPlayer}\n */\n\n\nproto.JellybeanGameState.prototype.addPlayers = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.PonyPlayer, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.JellybeanGameState} returns this\n */\n\n\nproto.JellybeanGameState.prototype.clearPlayersList = function () {\n  return this.setPlayersList([]);\n};\n/**\n * optional string clue = 6;\n * @return {string}\n */\n\n\nproto.JellybeanGameState.prototype.getClue = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 6, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.JellybeanGameState} returns this\n */\n\n\nproto.JellybeanGameState.prototype.setClue = function (value) {\n  return jspb.Message.setProto3StringField(this, 6, value);\n};\n/**\n * optional int32 end_tick = 7;\n * @return {number}\n */\n\n\nproto.JellybeanGameState.prototype.getEndTick = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 7, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.JellybeanGameState} returns this\n */\n\n\nproto.JellybeanGameState.prototype.setEndTick = function (value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.JellybeanGameAction.prototype.toObject = function (opt_includeInstance) {\n    return proto.JellybeanGameAction.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.JellybeanGameAction} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.JellybeanGameAction.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      baseAction: (f = msg.getBaseAction()) && game_pb.GameAction.toObject(includeInstance, f),\n      move: jspb.Message.getFieldWithDefault(msg, 2, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.JellybeanGameAction}\n */\n\n\nproto.JellybeanGameAction.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.JellybeanGameAction();\n  return proto.JellybeanGameAction.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.JellybeanGameAction} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.JellybeanGameAction}\n */\n\n\nproto.JellybeanGameAction.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new game_pb.GameAction();\n        reader.readMessage(value, game_pb.GameAction.deserializeBinaryFromReader);\n        msg.setBaseAction(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.Direction} */\n        reader.readEnum();\n        msg.setMove(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.JellybeanGameAction.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.JellybeanGameAction.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.JellybeanGameAction} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.JellybeanGameAction.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getBaseAction();\n\n  if (f != null) {\n    writer.writeMessage(1, f, game_pb.GameAction.serializeBinaryToWriter);\n  }\n\n  f = message.getMove();\n\n  if (f !== 0.0) {\n    writer.writeEnum(2, f);\n  }\n};\n/**\n * optional GameAction base_action = 1;\n * @return {?proto.GameAction}\n */\n\n\nproto.JellybeanGameAction.prototype.getBaseAction = function () {\n  return (\n    /** @type{?proto.GameAction} */\n    jspb.Message.getWrapperField(this, game_pb.GameAction, 1)\n  );\n};\n/**\n * @param {?proto.GameAction|undefined} value\n * @return {!proto.JellybeanGameAction} returns this\n*/\n\n\nproto.JellybeanGameAction.prototype.setBaseAction = function (value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.JellybeanGameAction} returns this\n */\n\n\nproto.JellybeanGameAction.prototype.clearBaseAction = function () {\n  return this.setBaseAction(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.JellybeanGameAction.prototype.hasBaseAction = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional Direction move = 2;\n * @return {!proto.Direction}\n */\n\n\nproto.JellybeanGameAction.prototype.getMove = function () {\n  return (\n    /** @type {!proto.Direction} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {!proto.Direction} value\n * @return {!proto.JellybeanGameAction} returns this\n */\n\n\nproto.JellybeanGameAction.prototype.setMove = function (value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n/**\n * @enum {number}\n */\n\n\nproto.Pony = {\n  UNKNOWN_PONY: 0,\n  TWILIGHT_SPARKLE: 1,\n  APPLEJACK: 2,\n  FLUTTERSHY: 3,\n  PINKIE_PIE: 4,\n  RAINBOW_DASH: 5,\n  RARITY: 6\n};\ngoog.object.extend(exports, proto);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./schema/protos/jellybean_pb.js\n");

/***/ }),

/***/ "./utils/animation.ts":
/*!****************************!*\
  !*** ./utils/animation.ts ***!
  \****************************/
/*! exports provided: useAnimationFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useAnimationFrame\", function() { return useAnimationFrame; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\n\n/**\n * Sets up a callback to run every animation frame.\n * Must provide a tick ref which will be passed into the callback.\n */\n\nvar useAnimationFrame = function useAnimationFrame(callback, tickRef, deps) {\n  _s();\n\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  var requestRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n  var previousTimeRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n\n  var animate = function animate(time) {\n    if (previousTimeRef.current !== undefined) {\n      var deltaTime = time - previousTimeRef.current;\n      tickRef.current += deltaTime / 100;\n      callback(tickRef.current);\n    }\n\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n    requestRef.current = requestAnimationFrame(animate);\n    return function () {\n      return cancelAnimationFrame(requestRef.current);\n    };\n  }, [deps]);\n};\n\n_s(useAnimationFrame, \"z8M7fn6QAiYOb97lWpO8m/pmXa0=\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvYW5pbWF0aW9uLnRzP2ExMTUiXSwibmFtZXMiOlsidXNlQW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsInRpY2tSZWYiLCJkZXBzIiwicmVxdWVzdFJlZiIsInVzZVJlZiIsInByZXZpb3VzVGltZVJlZiIsImFuaW1hdGUiLCJ0aW1lIiwiY3VycmVudCIsInVuZGVmaW5lZCIsImRlbHRhVGltZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVzZUVmZmVjdCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUVBOzs7OztBQUlPLElBQU1BLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FDL0JDLFFBRCtCLEVBRS9CQyxPQUYrQixFQUcvQkMsSUFIK0IsRUFJNUI7QUFBQTs7QUFDSDtBQUNBO0FBQ0EsTUFBTUMsVUFBVSxHQUFHQyxvREFBTSxFQUF6QjtBQUNBLE1BQU1DLGVBQWUsR0FBR0Qsb0RBQU0sRUFBOUI7O0FBRUEsTUFBTUUsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBQ0MsSUFBRCxFQUFVO0FBQ3hCLFFBQUlGLGVBQWUsQ0FBQ0csT0FBaEIsS0FBNEJDLFNBQWhDLEVBQTJDO0FBQ3pDLFVBQU1DLFNBQVMsR0FBR0gsSUFBSSxHQUFHRixlQUFlLENBQUNHLE9BQXpDO0FBQ0FQLGFBQU8sQ0FBQ08sT0FBUixJQUFtQkUsU0FBUyxHQUFHLEdBQS9CO0FBQ0FWLGNBQVEsQ0FBQ0MsT0FBTyxDQUFDTyxPQUFULENBQVI7QUFDRDs7QUFDREgsbUJBQWUsQ0FBQ0csT0FBaEIsR0FBMEJELElBQTFCO0FBQ0FKLGNBQVUsQ0FBQ0ssT0FBWCxHQUFxQkcscUJBQXFCLENBQUNMLE9BQUQsQ0FBMUM7QUFDRCxHQVJEOztBQVVBTSx5REFBUyxDQUFDLFlBQU07QUFDZFQsY0FBVSxDQUFDSyxPQUFYLEdBQXFCRyxxQkFBcUIsQ0FBQ0wsT0FBRCxDQUExQztBQUNBLFdBQU87QUFBQSxhQUFNTyxvQkFBb0IsQ0FBQ1YsVUFBVSxDQUFDSyxPQUFaLENBQTFCO0FBQUEsS0FBUDtBQUNELEdBSFEsRUFHTixDQUFDTixJQUFELENBSE0sQ0FBVDtBQUlELENBeEJNOztHQUFNSCxpQiIsImZpbGUiOiIuL3V0aWxzL2FuaW1hdGlvbi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIFNldHMgdXAgYSBjYWxsYmFjayB0byBydW4gZXZlcnkgYW5pbWF0aW9uIGZyYW1lLlxuICogTXVzdCBwcm92aWRlIGEgdGljayByZWYgd2hpY2ggd2lsbCBiZSBwYXNzZWQgaW50byB0aGUgY2FsbGJhY2suXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VBbmltYXRpb25GcmFtZSA9IChcbiAgY2FsbGJhY2s6ICh0aWNrOiBudW1iZXIpID0+IHZvaWQsXG4gIHRpY2tSZWY6IFJlYWN0Lk11dGFibGVSZWZPYmplY3Q8bnVtYmVyPixcbiAgZGVwczogUmVhY3QuRGVwZW5kZW5jeUxpc3RcbikgPT4ge1xuICAvLyBVc2UgdXNlUmVmIGZvciBtdXRhYmxlIHZhcmlhYmxlcyB0aGF0IHdlIHdhbnQgdG8gcGVyc2lzdFxuICAvLyB3aXRob3V0IHRyaWdnZXJpbmcgYSByZS1yZW5kZXIgb24gdGhlaXIgY2hhbmdlXG4gIGNvbnN0IHJlcXVlc3RSZWYgPSB1c2VSZWY8bnVtYmVyIHwgdW5kZWZpbmVkPigpO1xuICBjb25zdCBwcmV2aW91c1RpbWVSZWYgPSB1c2VSZWY8bnVtYmVyIHwgdW5kZWZpbmVkPigpO1xuXG4gIGNvbnN0IGFuaW1hdGUgPSAodGltZSkgPT4ge1xuICAgIGlmIChwcmV2aW91c1RpbWVSZWYuY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBkZWx0YVRpbWUgPSB0aW1lIC0gcHJldmlvdXNUaW1lUmVmLmN1cnJlbnQ7XG4gICAgICB0aWNrUmVmLmN1cnJlbnQgKz0gZGVsdGFUaW1lIC8gMTAwO1xuICAgICAgY2FsbGJhY2sodGlja1JlZi5jdXJyZW50KTtcbiAgICB9XG4gICAgcHJldmlvdXNUaW1lUmVmLmN1cnJlbnQgPSB0aW1lO1xuICAgIHJlcXVlc3RSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlcXVlc3RSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgICByZXR1cm4gKCkgPT4gY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVxdWVzdFJlZi5jdXJyZW50ISk7XG4gIH0sIFtkZXBzXSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./utils/animation.ts\n");

/***/ })

}]);