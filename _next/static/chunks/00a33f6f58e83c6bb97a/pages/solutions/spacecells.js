_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[106],{BsWD:function(e,t,a){"use strict";a.d(t,"a",(function(){return n}));var s=a("a3WO");function n(e,t){if(e){if("string"===typeof e)return Object(s.a)(e,t);var a=Object.prototype.toString.call(e).slice(8,-1);return"Object"===a&&e.constructor&&(a=e.constructor.name),"Map"===a||"Set"===a?Array.from(e):"Arguments"===a||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a)?Object(s.a)(e,t):void 0}}},KQm4:function(e,t,a){"use strict";a.d(t,"a",(function(){return o}));var s=a("a3WO");var n=a("BsWD");function o(e){return function(e){if(Array.isArray(e))return Object(s.a)(e)}(e)||function(e){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||Object(n.a)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},KtV6:function(e,t,a){"use strict";a.d(t,"a",(function(){return m}));var s=a("MX0m"),n=a.n(s),o=a("q1tI"),i=a.n(o),l=a("8Kt/"),r=a.n(l),c=a("qTru"),u=a("otFC"),h=i.a.createElement,m=function(e){var t=e.children;return h("strong",{className:"jsx-1605562794 monospace"},t,h(n.a,{id:"1605562794"},[".monospace.jsx-1605562794{font-size:16px;}"]))};t.b=function(e){var t=e.title,a=e.slug,s=e.answer,o=e.authors,i=e.url,l=void 0===i?void 0:i,m=e.children;return h(c.a,null,h(r.a,null,h("meta",{name:"robots",content:"noindex",className:"jsx-2146329486"})),h("div",{className:"jsx-2146329486 center"},h(u.a,{title:"".concat(t," - Solution")}),o&&h("h3",{className:"jsx-2146329486"},o),h("h3",{className:"jsx-2146329486"},"Answer: ",h("span",{className:"jsx-2146329486 spoiler monospace"},s)),h("div",{className:"jsx-2146329486 link"},h("a",{href:"/stats/".concat(a),className:"jsx-2146329486"},"View Stats"),h("a",{href:l||"/puzzles/".concat(a),className:"jsx-2146329486"},"Back to Puzzle"))),m,h(n.a,{id:"2146329486"},[".link.jsx-2146329486{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;margin:20px 0 40px;}"]))}},MBA7:function(e,t,a){"use strict";var s=a("q1tI"),n=a.n(s),o=n.a.createElement;t.a=function(e){var t=e.children;return o(n.a.Fragment,null,o("h4",null,"Author's Notes"),t)}},ODXe:function(e,t,a){"use strict";a.d(t,"a",(function(){return n}));var s=a("BsWD");function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"!==typeof Symbol&&Symbol.iterator in Object(e)){var a=[],s=!0,n=!1,o=void 0;try{for(var i,l=e[Symbol.iterator]();!(s=(i=l.next()).done)&&(a.push(i.value),!t||a.length!==t);s=!0);}catch(r){n=!0,o=r}finally{try{s||null==l.return||l.return()}finally{if(n)throw o}}return a}}(e,t)||Object(s.a)(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},a3WO:function(e,t,a){"use strict";function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var a=0,s=new Array(t);a<t;a++)s[a]=e[a];return s}a.d(t,"a",(function(){return s}))},otFC:function(e,t,a){"use strict";var s=a("MX0m"),n=a.n(s),o=a("q1tI"),i=a.n(o),l=a("8Kt/"),r=a.n(l),c=i.a.createElement;t.a=function(e){var t=e.title,a=e.pageTitle,s=e.suppressPageTitle,o=e.removeMargin,l=e.id,u=a||t;return c(i.a.Fragment,null,!s&&c(r.a,null,c("title",{className:"jsx-1930915425"},u)),c("h1",{id:l,className:"jsx-1930915425 "+((o?"nomargin":"")||"")},c("span",{className:"jsx-1930915425"},t)),c(n.a,{id:"1930915425"},["h1.jsx-1930915425{text-align:center;word-wrap:break-word;}",".nomargin.jsx-1930915425{margin:0px;}","span.jsx-1930915425{background-color:rgba(255,255,255,0.5);padding:0 16px;}","@media (max-width:800px){h1.jsx-1930915425{font-size:40px;line-height:40px;}}"]))}},pn6s:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/solutions/spacecells",function(){return a("twtj")}])},rePB:function(e,t,a){"use strict";function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}a.d(t,"a",(function(){return s}))},twtj:function(e,t,a){"use strict";a.r(t);var s=a("MX0m"),n=a.n(s),o=a("q1tI"),i=a.n(o),l=a("KtV6"),r=a("MBA7"),c=i.a.createElement,u=function(e){var t=e.children;return c(i.a.Fragment,null,c("h4",null,"Appendix"),t)},h=a("IE9O"),m=a("lHFU"),p=a("4LNY"),d=i.a.createElement,g=[["H","","","","","","","","","","","","","","","","","He"],["Li","Be","","","","","","","","","","","B","C","N","O","F","Ne"],["Na","Mg","","","","","","","","","","","Al","Si","P","S","Cl","Ar"],["K","Ca","Sc","Ti","V","Cr","Mn","Fe","Co","Ni","Cu","Zn","Ga","Ge","As","Se","Br","Kr"],["Rb","Sr","Y","Zr","Nb","Mo","Tc","Ru","Rh","Pd","Ag","Cd","In","Sn","Sb","Te","I","Xe"],["Cs","Ba","","Hf","Ta","W","Re","Os","Ir","Pt","Au","Hg","Tl","Pb","Bi","Po","At","Rn"],["Fr","Ra","","Rf","Db","Sg","Bh","Hs","Mt","Ds","Rg","Cn","Nh","Fl","Mc","Lv","Ts","Og"],["","","","","","","","","","","","","","","","","",""],["","","","La","Ce","Pr","Nd","Pm","Sm","Eu","Gd","Tb","Dy","Ho","Er","Tm","Yb","Lu"],["","","","Ac","Th","Pa","U","Np","Pu","Am","Cm","Bk","Cf","Es","Fm","Md","No","Lr"]],fb={not:d(i.a.Fragment,null,d("p",null,"This is the first assignment, whose purpose was to familiarize solvers with the basic interactions between cells. ",d(p.XCell,null)," cells that are 1 or 2 away in the same horizontal or vertical line are become the same polarity and ones that are diagonal or a knight's move away become the opposite polarity. This assignment can be solved by stringing together a path of cells which crosses diagonally once.")),crossing:d(i.a.Fragment,null,d("p",null,"We have 2 inputs and 2 outputs. We want to direct the input ",d(p.XCell,null)," to the output ",d(p.XCell,null)," and the input ",d(p.PlusCell,null)," to the output ",d(p.PlusCell,null),". Fortunately, ",d(p.XCell,null)," and ",d(p.PlusCell,null)," do not interact with each other, so we can string along a series of each from one side to the other, hopping over each other as they cross. This is the first assignment with ",d(p.PlusCell,null)," cells, and we learn that the polarity interactions are reverse that of ",d(p.XCell,null)," cells. The circuit analog of this assignment is wire crossings.")),and:d(i.a.Fragment,null,d("p",null,"If we designate blue as 1 and green as 0, this assignment is to construct an ",d("span",{className:"monospace"},"AND")," gate. The note in the preface to the instructions gives an interesting schematic, which turns out to be a majority (",d("span",{className:"monospace"},"MAJ"),") gate (with 3 inputs). The ",d("span",{className:"monospace"},"AND")," gate can be constructed by hooking up the 2 given inputs and a green cell to a ",d("span",{className:"monospace"},"MAJ")," gate.")),delay:d(i.a.Fragment,null,d("p",null,"We get to the first assignment that utilizes the bots beyond just advancing the input and output. There are multiple ways to complete this assignment."),d("p",null,"One way is to use the two bots to alternate and carry the value of the previous input to the output while the other bot goes back to get the value of the current input."),d("p",null,"The more efficient method is to use ",d("span",{className:"monospace"},"RESET")," to latch a pair of locked cells in sequence which hold the current and previous input values. This is what the example solution does.")),switch:d(i.a.Fragment,null,d("p",null,"This is the first assignment that uses two outputs. Colors are additive, and so because we want to output blue or red, we must toggle the powers to the output cells when the input is blue. We utilize the ",d("span",{className:"monospace"},"BRANCH")," instructions to determine when to use the power instructions. Beyond that, when each output is active, it always outputs the same color so we can just keep a locked cell next to the output.")),xor:d(i.a.Fragment,null,d("p",null,"If we designate blue as 1 and green as 0, this assignment is to construct the ",d("span",{className:"monospace"},"XOR")," gate."),d("p",null,"One simple way to construct this is to use a bot to branch and perform casework based on the values of the two inputs. (See the example solution to Assignment 12 for an example that does this as part of a more complex system.)"),d("p",null,"The example solutions solves the problem using just the cells by constructing the ",d("span",{className:"monospace"},"XOR")," as (A ",d("span",{className:"monospace"},"AND")," ",d("span",{className:"monospace"},"NOT")," B) ",d("span",{className:"monospace"},"OR")," (",d("span",{className:"monospace"},"NOT")," A ",d("span",{className:"monospace"},"AND")," B). We know how to do inversion from the first assignment, and an ",d("span",{className:"monospace"},"OR")," can be constructed using a ",d("span",{className:"monospace"},"MAJ")," gate just like ",d("span",{className:"monospace"},"AND")," but using a blue cell as the third input instead of green.")),ram:d(i.a.Fragment,null,d("p",null,"This assignment is somewhat similar to Assignment 4, but now we have to mux between two memory units depending on what the bottom input is. The example solution uses the red bot to reset the correct memory cell and the blue bot to propagate the old value of that memory cell to the output.")),mod:d(i.a.Fragment,null,d("p",null,"We want to determine whether the sequence of clockwise and counterclockwise rotations ends with the blue color on bottom. There are a variety of approaches that can be taken here, but the most intuitive is to move three locked cells around depending on the color of the input. In the example solution, this is done using red bot when needing to rotate clockwise and the blue bot when needing to rotate counterclockwise.")),rainbow:d(i.a.Fragment,null,d("p",null,"This assignment is more about utilizing the addition of colors and cycling through states than needing to branch or perform computations. It is perhaps the most straightforward of the later assignments. The primary considerations are determining when each output needs to be powered and setting up the states so that the colors work out. Color mixing appeared in Assignment 2, but solvers did not have to care about how the combinations worked until now."),d("p",null,"In terms of the color addition, combinations work in the following way. (",d("span",{color:"N"},"N")," represents brown as all the other letters in ",d("span",{color:"B"},"B"),d("span",{color:"R"},"R"),d("span",{color:"O"},"O"),d("span",{color:"W"},"W"),d("span",{color:"N"},"N")," are already taken.)"),d("div",{className:"equations"},d("div",null,d("span",{color:"B"},"B")," + ",d("span",{color:"R"},"R")," = ",d("span",{color:"P"},"P")),d("div",null,d("span",{color:"B"},"B")," + ",d("span",{color:"O"},"O")," = ",d("span",{color:"W"},"W")),d("div",null,d("span",{color:"G"},"G")," + ",d("span",{color:"R"},"R")," = ",d("span",{color:"Y"},"Y")),d("div",null,d("span",{color:"G"},"G")," + ",d("span",{color:"O"},"O")," = ",d("span",{color:"N"},"N")))),median:d(i.a.Fragment,null,d("p",null,"We know how to delay inputs, and we know how to compute the majority. To complete this assignment, we stagger memory units similar to Assignment 4 and Assignment 7, and combine them with a ",d("span",{className:"monospaace"},"MAJ")," gate.")),vending:d(i.a.Fragment,null,d("p",null,"The last two assignments are the most difficult. This one requires keeping track of which of 3 states the vending machine is in (0, 1, or 2 coins). This can be tracked by cell polarities or by the position of the bots. The example solution encodes state using the position of the red bot. From each state, the bots need to toggle the appropriate ",d("span",{className:"monospace"},"PWR")," instructions, set the colors, and potentially move to a different state depending on the input.")),adder:d(i.a.Fragment,null,d("p",null,"The last assignment makes players implement a ",d("a",{href:"https://en.wikipedia.org/wiki/Adder_(electronics)#Full_adder"},"1-bit full adder"),". This involves keep track of the carry bit between inputs, and performing a 3-way ",d("span",{className:"monospace"},"XOR")," of the 2 input bits and the carry bit."),d("p",null,"It is possible but very difficult to use cells for all of the logic and the bots just to latch the state of the carry bit."),d("p",null,"A simpler solution is to use bot movement and branching to compute the ",d("span",{className:"monospace"},"XOR")," and use a ",d("span",{className:"monospace"},"MAJ")," gate for the carry. Notice that the carry bit is simply the majority of the previous carry bit and the input bits. In the example solution, the red bot branches off the values of the input and carry bits to compute the ",d("span",{className:"monospace"},"XOR")," and the blue bot latches the state of the carry bit between inputs."))};t.default=function(){return d(i.a.Fragment,null,d(l.b,{title:"SpaceCells",slug:"spacecells",answer:"HISTOGRAMS",authors:"Written by Brian Shimanuki"},d("p",{className:"jsx-3160481827"},"This puzzle consists of a series of assignments, for each of which the player can design a system of cells and instructions to produce the intended outputs. There are a total of 12 assignments, with the later assignments being unlocked by solving previous ones. The assignments target a number of constructs, from information flow to basic logic gates to a full adder. See the Appendix for example solutions and guidelines for solving each assignment."),d("p",{className:"jsx-3160481827"},"In each assignment, the player places cells and instructions on a 10x10 grid. The background of these grids can be separated into gray tiles and brown tiles, and each grid has one special brown tile. These are purely cosmetic to the actual assignment, and are part of the extraction. The brown tiles in each grid uniquely identify a part of the periodic table. This becomes more obvious in later assignments, and reaching the Epilogue also hints towards looking for elements of the periodic table. (Solvers who recognize that this puzzle is themed after ",d("i",{className:"jsx-3160481827"},"SpaceChem")," may also notice the thematicness of using chemical elements for the extraction.) Taking the special element designated from each grid yields ",d(l.a,null,"KINdOFSTaTsCHArTs"),"."),d("table",{className:"jsx-3160481827"},d("tbody",{className:"jsx-3160481827"},g.map((function(e,t){return d("tr",{key:t,className:"jsx-3160481827"},e.map((function(e,a){return d("td",{key:a,className:"jsx-3160481827 "+"".concat(e?"hasElement":""," ").concat(f[t][a]?"hasExtraction":"")},d("div",{className:"jsx-3160481827 element"},e),d("div",{className:"jsx-3160481827 extraction"},f[t][a]))})))})))),d("p",{className:"jsx-3160481827"},"This is a cluephrase for the \u201ckind of stats charts\u201d displayed after each completed assignment in this puzzle (as well as in Zachtronics games), or ",d(l.a,null,"HISTOGRAMS"),"."),d(r.a,null,d("p",{className:"jsx-3160481827"},"SpaceCells was inspired by ",d("a",{href:"http://www.zachtronics.com/",className:"jsx-3160481827"},"Zachtronics")," games, most notably ",d("a",{href:"http://www.zachtronics.com/spacechem/",className:"jsx-3160481827"},d("i",{className:"jsx-3160481827"},"SpaceChem"))," and ",d("a",{href:"http://www.zachtronics.com/shenzhen-io/",className:"jsx-3160481827"},d("i",{className:"jsx-3160481827"},"SHENZHEN I/O")),". This knowledge was not necessary for solving the puzzle, but some of the concepts and mechanics are similar."),d("p",{className:"jsx-3160481827"},"The physics of the cells came from ",d("a",{href:"https://en.wikipedia.org/wiki/Quantum_dot_cellular_automaton",className:"jsx-3160481827"},"Quantum Dot Automata"),", with the caveat that diodes are used as a replacement for the clocking mechanism and the interaction model was simplified to make simulation fast."),d("p",{className:"jsx-3160481827"},"I hope this mix of mechanics came out to something unique and interesting. The stats page showed statistics of actual submissions during the hunt, and I know there were solvers who continued to improve their solutions after they finished the puzzle!"),d("p",{className:"jsx-3160481827"},"This puzzle was mostly done in 5 weeks, and took me around 200 hours to design and implement (possibly largely because this was my first experience using React, or really webdev in general). I wrote the simulation engine in C++ and compiled that to both WebAssembly and a Python library, which worked nicely for being able to run the same performant code in browser clients and on the server."),d("p",{className:"jsx-3160481827"},"Fun fact: I first decided to write a ",d("i",{className:"jsx-3160481827"},"SpaceChem")," puzzle, and then I decided to start ",d("i",{className:"jsx-3160481827"},"SpaceChem"),". Before this, I had only played ",d("i",{className:"jsx-3160481827"},"EXAPUNKS")," and ",d("i",{className:"jsx-3160481827"},"SHENZHEN I/O"),".")),d(u,null,d("p",{className:"jsx-3160481827"},"In this module, you can see and run an example solution for each assignment. Below it, we describe some general approaches to each assignment."),d("div",{id:"game",className:"jsx-3160481827 game"},d(h.b,{m:10,n:12,api:m,isSolutions:!0})),d("div",{className:"jsx-3160481827 guidelines"},m.levels.filter((function(e){return"epilogue"!=e.name})).map((function(e){return d("div",{key:e.name,className:"jsx-3160481827"},d("h5",{className:"jsx-3160481827 sol-assignment-title"},"Assignment ",e.levelNumber+1,": ",e.title),d("div",{className:"jsx-3160481827"},d("span",{className:"jsx-3160481827 goal"},"Goal:")," ",d("span",{className:"jsx-3160481827 sol-assignment-goal"},h.a(e.goal))),d("div",{className:"jsx-3160481827 guideline"},b[e.name]))})))),d(n.a,{id:"4265811712"},["table.jsx-3160481827{margin:0 auto;table-layout:fixed;border-collapse:collapse;}","td.jsx-3160481827{text-align:center;vertical-align:top;height:45px;width:30px;padding:5px 0;overflow:hidden;white-space:nowrap;}","td.hasElement.jsx-3160481827{border:1px solid black;}","td.hasExtraction.jsx-3160481827{background-color:rgba(0,0,0,0.2);}","td.jsx-3160481827 .extraction.jsx-3160481827{font-size:smaller;color:green;}",".sol-assignment-title.jsx-3160481827{margin-bottom:0;}",".goal.jsx-3160481827{font-weight:bold;}",".sol-assignment-goal.jsx-3160481827{font-style:italic;}"]),d(n.a,{id:"611211594"},[".guidelines p{margin:0.5em 0;}",".guidelines svg{height:30px;width:30px;vertical-align:middle;}",".guidelines [color]{font-family:monospace;font-size:16px;}",".sol-assignment-goal p{display:inline;}",".wheel>svg{height:120px;width:120px;}",".equations{text-align:center;}"])))}}},[["pn6s",1,0,2,5,16,17]]]);