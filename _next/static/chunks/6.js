(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[6],{

/***/ "./assets/puzzle/ghostpepper/pigpen.otf":
/*!**********************************************!*\
  !*** ./assets/puzzle/ghostpepper/pigpen.otf ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"static/assets/puzzle/ghostpepper/pigpen.otf\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXNzZXRzL3B1enpsZS9naG9zdHBlcHBlci9waWdwZW4ub3RmPzQwOTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZSxvRkFBdUIsZ0RBQWdEIiwiZmlsZSI6Ii4vYXNzZXRzL3B1enpsZS9naG9zdHBlcHBlci9waWdwZW4ub3RmLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInN0YXRpYy9hc3NldHMvcHV6emxlL2dob3N0cGVwcGVyL3BpZ3Blbi5vdGZcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/puzzle/ghostpepper/pigpen.otf\n");

/***/ }),

/***/ "./components/groupsolve/ghostpepper.tsx":
/*!***********************************************!*\
  !*** ./components/groupsolve/ghostpepper.tsx ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var assets_puzzle_ghostpepper_pigpen_otf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! assets/puzzle/ghostpepper/pigpen.otf */ \"./assets/puzzle/ghostpepper/pigpen.otf\");\n/* harmony import */ var components_fader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! components/fader */ \"./components/fader.tsx\");\n/* harmony import */ var components_groupsolve_lobby__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! components/groupsolve/lobby */ \"./components/groupsolve/lobby.tsx\");\n/* harmony import */ var schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! schema/protos/ghostpepper_pb */ \"./schema/protos/ghostpepper_pb.js\");\n/* harmony import */ var schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! schema/protos/game_pb */ \"./schema/protos/game_pb.js\");\n/* harmony import */ var schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var schema_protos_math_pb__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! schema/protos/math_pb */ \"./schema/protos/math_pb.js\");\n/* harmony import */ var schema_protos_math_pb__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(schema_protos_math_pb__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var utils_game__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! utils/game */ \"./utils/game.ts\");\n/* harmony import */ var utils_timer__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! utils/timer */ \"./utils/timer.tsx\");\n/* harmony import */ var utils_animation__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! utils/animation */ \"./utils/animation.ts\");\n/* harmony import */ var utils_assets__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! utils/assets */ \"./utils/assets.ts\");\n/* harmony import */ var utils_keyboard__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! utils/keyboard */ \"./utils/keyboard.ts\");\n\n\n\nvar _DOLL_NAMES,\n    _DOLL_IMAGES,\n    _OMEN_NAMES,\n    _jsxFileName = \"/vagrant/client/components/groupsolve/ghostpepper.tsx\",\n    _this = undefined,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement;\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar GhostPepperState = schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"GhostPepperGameState\"].GhostPepperState;\nvar GHOSTPEPPER_SOUND_EFFECTS = [{\n  src: 'puzzle/ghostpepper/sfx',\n  sprite: {\n    correct: [0, 1219],\n    incorrect: [1219, 354],\n    death: [1573, 4990],\n    live: [6563, 731]\n  }\n}, {\n  src: 'puzzle/ghostpepper/bgm',\n  sprite: {\n    full: [0, 76862],\n    loop: [261, 76601]\n  },\n  onend: function onend() {\n    this.play('loop');\n  }\n}];\nvar ANIMATION_SPEED = 10;\nvar TILE_SIZE = 200;\nvar ENTRANCE_HEIGHT = 237;\nvar PLAYER_WIDTH = 200;\nvar PLAYER_HEIGHT = 200;\nvar DOLL_NAMES = (_DOLL_NAMES = {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DOLL_NAMES, schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"PlayerColor\"].RED, 'Barbie'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DOLL_NAMES, schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"PlayerColor\"].BLUE, 'Ken'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DOLL_NAMES, schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"PlayerColor\"].GREEN, 'Midge'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DOLL_NAMES, schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"PlayerColor\"].YELLOW, 'Ryan'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DOLL_NAMES, schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"PlayerColor\"].ORANGE, 'Stacie'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DOLL_NAMES, schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"PlayerColor\"].INDIGO, 'Tawny'), _DOLL_NAMES);\nvar DOLL_IMAGES = (_DOLL_IMAGES = {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DOLL_IMAGES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"Doll\"].UNKNOWN_DOLL, ''), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DOLL_IMAGES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"Doll\"].BARBIE, 'barbie'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DOLL_IMAGES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"Doll\"].KEN, 'ken'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DOLL_IMAGES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"Doll\"].MIDGE, 'midge'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DOLL_IMAGES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"Doll\"].RYAN, 'ryan'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DOLL_IMAGES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"Doll\"].STACIE, 'stacie'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DOLL_IMAGES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"Doll\"].TAWNY, 'tawny'), _DOLL_IMAGES);\nvar TRAITOR_NAME = 'Raquelle';\nvar OMEN_NAMES = (_OMEN_NAMES = {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_OMEN_NAMES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].UNKNOWN_OMEN, ''), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_OMEN_NAMES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].MATH, 'Spirit of Algebra'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_OMEN_NAMES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].MEMORY, 'Brain-hungry Zombie'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_OMEN_NAMES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].ANAGRAMS, 'Discombobulated Contraption'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_OMEN_NAMES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PIGPEN, 'Reanimated Hog'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_OMEN_NAMES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE, 'Spooky Cryptex'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_OMEN_NAMES, schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].VERBAL_MEMORY, 'Experimental Horror'), _OMEN_NAMES);\n\nvar hasDoor = function hasDoor(tile, direction) {\n  var _DIRECTION_BIT;\n\n  var DIRECTION_BIT = (_DIRECTION_BIT = {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DIRECTION_BIT, schema_protos_math_pb__WEBPACK_IMPORTED_MODULE_9__[\"Direction\"].DIRECTION_NONE, 0), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DIRECTION_BIT, schema_protos_math_pb__WEBPACK_IMPORTED_MODULE_9__[\"Direction\"].UP, 0), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DIRECTION_BIT, schema_protos_math_pb__WEBPACK_IMPORTED_MODULE_9__[\"Direction\"].RIGHT, 1), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DIRECTION_BIT, schema_protos_math_pb__WEBPACK_IMPORTED_MODULE_9__[\"Direction\"].DOWN, 2), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_DIRECTION_BIT, schema_protos_math_pb__WEBPACK_IMPORTED_MODULE_9__[\"Direction\"].LEFT, 3), _DIRECTION_BIT);\n  return (tile.getDoors() >> DIRECTION_BIT[direction]) % 2 === 1;\n};\n\nvar canMove = function canMove(player, board, direction) {\n  var currentTile = board.getTilesList().find(function (tile) {\n    return Object(utils_game__WEBPACK_IMPORTED_MODULE_10__[\"eqCoordinates\"])(tile.getPosition(), player.getPosition());\n  });\n\n  if (!currentTile) {\n    return false;\n  }\n\n  return hasDoor(currentTile, direction);\n};\n\nvar getTileSize = function getTileSize(board, screenDimensions) {\n  return (// Leave a little bit of padding on each side.\n    Math.min(screenDimensions.width / (board.getWidth() + 1), screenDimensions.height / (board.getHeight() + 1))\n  );\n};\n\nvar getTopLeft = function getTopLeft(position, board, screenDimensions) {\n  var _position$getX, _position$getY;\n\n  var tileSize = getTileSize(board, screenDimensions);\n  return [((_position$getX = position === null || position === void 0 ? void 0 : position.getX()) !== null && _position$getX !== void 0 ? _position$getX : 0) * tileSize + (screenDimensions.width - tileSize * board.getWidth()) / 2, ((_position$getY = position === null || position === void 0 ? void 0 : position.getY()) !== null && _position$getY !== void 0 ? _position$getY : 0) * tileSize + (screenDimensions.height - tileSize * board.getHeight()) / 2];\n};\n\nvar renderTitle = function renderTitle(ctx, sprite, screenDimensions) {\n  ctx.drawImage(sprite, 0, 0, screenDimensions.width, screenDimensions.height);\n};\n\nvar renderBoard = function renderBoard(ctx, board, sprite, omenSprite, screenDimensions) {\n  // For each tile in the board, draw the background and walls.\n  var n = board.getWidth();\n  var m = board.getHeight();\n  var tileSize = getTileSize(board, screenDimensions);\n  board.getTilesList().forEach(function (tile) {\n    var topLeft = getTopLeft(tile.getPosition(), board, screenDimensions); // Draw tile, depending on the room tile (0-indexed).\n\n    var isEntrance = tile.getRoom() === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"RoomTile\"].ENTRANCE_HALL;\n    var room = tile.getRoom() - 1;\n    ctx.save();\n\n    if (!tile.getVisible()) {\n      ctx.filter = 'brightness(1%)';\n    }\n\n    ctx.drawImage(sprite, room * TILE_SIZE, // spritesheet offset by room\n    0, TILE_SIZE, isEntrance ? ENTRANCE_HEIGHT : TILE_SIZE, topLeft[0], topLeft[1], tileSize, isEntrance ? tileSize * ENTRANCE_HEIGHT / TILE_SIZE : tileSize);\n\n    if (!isEntrance) {\n      ctx.filter = tile.getOmenSolved() ? 'grayscale(1) opacity(0.5)' : '';\n      ctx.drawImage(omenSprite, topLeft[0] + tileSize / 12, topLeft[1] + tileSize * 9 / 12, tileSize / 6, tileSize / 6);\n    }\n\n    ctx.restore();\n  });\n};\n\nvar renderDoll = function renderDoll(ctx, board, player, sprite, spriteIndex, screenDimensions, location) {\n  var _location$, _location$2;\n\n  var tileSize = getTileSize(board, screenDimensions);\n  var position = getTopLeft(player.getPosition(), board, screenDimensions);\n  var dollType = player.getDoll();\n  ctx.drawImage(sprite, spriteIndex * PLAYER_WIDTH, 0, PLAYER_WIDTH, PLAYER_HEIGHT, (_location$ = location === null || location === void 0 ? void 0 : location[0]) !== null && _location$ !== void 0 ? _location$ : position[0] + (spriteIndex % 3 + 1) * (tileSize / 5), (_location$2 = location === null || location === void 0 ? void 0 : location[1]) !== null && _location$2 !== void 0 ? _location$2 : position[1] + (Math.floor(spriteIndex / 3) + 1) * (tileSize / 4), tileSize / 4, tileSize / 4);\n};\n\nvar fontStyle = __jsx(\"style\", {\n  jsx: true,\n  __self: undefined,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 3\n  }\n}, \"\\n    @font-face {\\n      font-family: 'Pigpen Cipher';\\n      src: url(\".concat(assets_puzzle_ghostpepper_pigpen_otf__WEBPACK_IMPORTED_MODULE_4__[\"default\"], \");\\n    }\\n\\n    .pigpen {\\n      font-family: 'Pigpen Cipher';\\n    }\\n  \"));\n\nvar Minigame = function Minigame(_ref) {\n  _s();\n\n  var omenMinigame = _ref.omenMinigame,\n      omenType = _ref.omenType,\n      currentTurn = _ref.currentTurn,\n      isCurrentTurn = _ref.isCurrentTurn,\n      onInput = _ref.onInput,\n      screenDimensions = _ref.screenDimensions,\n      sounds = _ref.sounds,\n      timer = _ref.timer;\n  var inputRef = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])(null);\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(''),\n      textInput = _useState[0],\n      setTextInput = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false),\n      showGrid = _useState2[0],\n      setShowGrid = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(0),\n      visibleWord = _useState3[0],\n      setVisibleWord = _useState3[1];\n\n  var input = omenMinigame.getInput(); // Reset text input whenever the input changes.\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    var _inputRef$current;\n\n    setTextInput(input || '');\n    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();\n  }, [input]);\n  var question = omenMinigame.getQuestion();\n  var answer = omenMinigame.getAnswer();\n  var threshold = omenMinigame.getThreshold();\n  var score = omenMinigame.getScore();\n  var options = omenMinigame.getOptionsList();\n  var hasOptions = !showGrid && !!question && !!(options === null || options === void 0 ? void 0 : options.length);\n  var showScore = omenType !== schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].MEMORY && omenType !== schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE || answer;\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    if (omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].MEMORY) {\n      setShowGrid(true);\n      setTextInput('0'.repeat(question.length));\n      window.setTimeout(function () {\n        return void setShowGrid(false);\n      }, 5000); // Show grid for 5s\n    } else if (omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].VERBAL_MEMORY && question) {\n      setShowGrid(true);\n      var questionLength = question.split(',').length;\n\n      var _loop = function _loop(i) {\n        // Cycle through which word is visible.\n        window.setTimeout(function () {\n          return void setVisibleWord(i);\n        }, 1000 * i);\n      };\n\n      for (var i = 1; i < questionLength; i++) {\n        _loop(i);\n      }\n\n      window.setTimeout(function () {\n        setShowGrid(false);\n        setVisibleWord(0);\n      }, (questionLength + 1) * 1000);\n    }\n  }, [omenType]);\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    // Multiple choice only.\n    if ((omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].MATH || omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PIGPEN || omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].VERBAL_MEMORY) && hasOptions && answer) {\n      var correct = answer === options[omenMinigame.getSelectedIndex()];\n      sounds['puzzle/ghostpepper/sfx'].play(correct ? 'correct' : 'incorrect');\n    } // TODO: play sounds for free response.\n\n  }, [answer]);\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    if (question) {\n      return;\n    }\n\n    var alive = score > threshold;\n    sounds['puzzle/ghostpepper/sfx'].play(alive ? 'live' : 'death');\n  }, [threshold]);\n\n  var renderScore = function renderScore(value) {\n    if (omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].MEMORY) {\n      return \"\".concat(value, \"%\");\n    }\n\n    return value;\n  };\n\n  return __jsx(\"div\", {\n    key: \"minigame\",\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"minigame abs-center flex-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 5\n    }\n  }, !threshold && __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"timer\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }\n  }, !showGrid && __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 25\n    }\n  }, timer), showScore && __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 25\n    }\n  }, \"Score: \", renderScore(score))), question && omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].MEMORY ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"memory-container flex-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"memory-grid\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }\n  }, (showGrid ? question : answer || textInput).split('').map(function (tile, i) {\n    return __jsx(\"button\", {\n      key: \"cell-\".concat(i),\n      disabled: showGrid || !!answer || !isCurrentTurn,\n      onClick: function onClick() {\n        var newTile = textInput.charAt(i) === '1' ? '0' : '1';\n        var newInput = textInput.substr(0, i) + newTile + textInput.substring(i + 1);\n        setTextInput(newInput);\n        onInput(newInput);\n      },\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"cell\".concat(tile === '1' ? ' bg-red' : '').concat(answer && answer[i] !== textInput[i] ? ' wrong' : ''),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 19\n      }\n    });\n  }))), __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 11\n    }\n  }, answer ? 'The correct pattern is...' : showGrid ? 'Memorize the pattern of blood' : 'Reproduce the pattern')) : question ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].VERBAL_MEMORY && showGrid ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 15\n    }\n  }, \"Memorize these words!\"), __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 15\n    }\n  }, question.split(',')[visibleWord])) : __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 13\n    }\n  }, \"Q:\", ' ', omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].VERBAL_MEMORY ? 'Which words did you see?' : question), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"options\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 11\n    }\n  }, hasOptions && omenType !== schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? options.map(function (option, i) {\n    return __jsx(\"button\", {\n      key: \"option-\".concat(i),\n      onClick: function onClick() {\n        return onInput(option);\n      },\n      disabled: !!answer || !isCurrentTurn,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"\".concat(answer && omenMinigame.getSelectedIndex() === i ? 'selected' : '').concat(answer === option ? ' correct green' : answer ? ' incorrect red' : '').concat(omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PIGPEN ? ' pigpen' : ''),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 19\n      }\n    }, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PIGPEN ? option.split('').map(function (letter) {\n      return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('') // Show all letters with one visible to avoid cheese.\n      .map(function (l) {\n        return __jsx(\"span\", {\n          className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + ((letter === l ? 'hydden' : 'hidden') || \"\"),\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 31\n          }\n        }, l);\n      });\n    }) : option);\n  }) : omenType !== schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].VERBAL_MEMORY && __jsx(\"form\", {\n    onSubmit: function onSubmit(e) {\n      onInput(textInput);\n      e.preventDefault();\n    },\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"flex-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 19\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    key: \"input\",\n    ref: inputRef,\n    disabled: !!answer || !isCurrentTurn,\n    onChange: function onChange(e) {\n      var newInput = e.target.value;\n\n      if (omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE) {\n        setTextInput(newInput.substring(0, 7));\n      } else {\n        setTextInput(newInput);\n      }\n    },\n    value: answer && omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? '' : textInput,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + ((textInput && answer === textInput ? 'correct green' : answer ? 'incorrect red' : '') || \"\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 21\n    }\n  }), omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE && __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, answer && __jsx(\"span\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"lines\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 27\n    }\n  }, textInput.split('').map(function (letter, i) {\n    return letter === answer.charAt(i) ? __jsx(\"span\", {\n      key: \"answer-\".concat(i),\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"correct green\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 33\n      }\n    }, letter) : __jsx(\"span\", {\n      key: \"wrong-\".concat(i),\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"incorrect red\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 33\n      }\n    }, letter);\n  })), __jsx(\"span\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"lines\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 25\n    }\n  }, \"_______\")), isCurrentTurn && __jsx(\"button\", {\n    type: \"submit\",\n    disabled: !!answer || !textInput,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 23\n    }\n  }, \"Submit\")), hasOptions && omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE && __jsx(\"ol\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"rules\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 15\n    }\n  }, options.map(function (option, i) {\n    return __jsx(\"li\", {\n      key: \"option-\".concat(i),\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 19\n      }\n    }, option);\n  })))) : threshold ? __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"threshold\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 9\n    }\n  }, __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 11\n    }\n  }, DOLL_NAMES[currentTurn], \"'s score: \", renderScore(score)), __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 11\n    }\n  }, TRAITOR_NAME, \"'s score: \", renderScore(threshold)), __jsx(\"h1\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 11\n    }\n  }, score > threshold ? \"\".concat(DOLL_NAMES[currentTurn], \" has survived to live another day.\") : __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, DOLL_NAMES[currentTurn], \" has\", ' ', __jsx(\"span\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"414543685\", [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2]]]) + \" \" + \"red\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 17\n    }\n  }, \"PERISHED\"), \".\"))) : null, __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"414543685\",\n    dynamic: [screenDimensions.height * 0.8, screenDimensions.width * 0.8, omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', screenDimensions.height * 0.1, screenDimensions.height * 0.6, screenDimensions.height * 0.6, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2, screenDimensions.height / 10 - 2],\n    __self: _this\n  }, \".minigame.__jsx-style-dynamic-selector{color:#fff;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;height:\".concat(screenDimensions.height * 0.8, \"px;width:\").concat(screenDimensions.width * 0.8, \"px;padding:2vmin;text-align:center;}.timer.__jsx-style-dynamic-selector{position:absolute;top:0;right:20px;}.options.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-top:8px;}button.__jsx-style-dynamic-selector{background:none;border:none;color:#fff;font-size:24px;padding:4px 12px;min-width:20%;}button.selected.__jsx-style-dynamic-selector{background-color:rgba(255,255,255,0.3);}form.__jsx-style-dynamic-selector{position:relative;}input.__jsx-style-dynamic-selector,.lines.__jsx-style-dynamic-selector{font-family:monospace;font-size:24px;-webkit-letter-spacing:2px;-moz-letter-spacing:2px;-ms-letter-spacing:2px;letter-spacing:2px;padding:4px 8px;}input.__jsx-style-dynamic-selector{max-width:\").concat(omenType === schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].PASSCODE ? 'calc(7ch + 42px)' : 'calc(15ch + 60px)', \";}.lines.__jsx-style-dynamic-selector{position:absolute;text-align:left;left:0;top:0;right:0;bottom:0;color:#000;}button.correct.__jsx-style-dynamic-selector,input.correct.__jsx-style-dynamic-selector{color:#393;}button.incorrect.__jsx-style-dynamic-selector,input.incorrect.__jsx-style-dynamic-selector{-webkit-text-decoration:line-through;text-decoration:line-through;color:#c33;}.memory-container.__jsx-style-dynamic-selector{-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;padding-top:\").concat(screenDimensions.height * 0.1, \"px;width:100%;}.memory-grid.__jsx-style-dynamic-selector{border:4px solid brown;width:\").concat(screenDimensions.height * 0.6, \"px;height:\").concat(screenDimensions.height * 0.6, \"px;}.memory-grid.__jsx-style-dynamic-selector .cell.__jsx-style-dynamic-selector{border:1px solid black;border-radius:0;display:inline-block;width:\").concat(screenDimensions.height / 10 - 2, \"px;height:\").concat(screenDimensions.height / 10 - 2, \"px;min-width:\").concat(screenDimensions.height / 10 - 2, \"px;}.cell.bg-red.__jsx-style-dynamic-selector{background-color:#c33;}.memory-grid.__jsx-style-dynamic-selector .cell.wrong.__jsx-style-dynamic-selector{background:repeating-linear-gradient( 45deg, #000, #000 10px, #333 10px, #333 20px );}.memory-grid.__jsx-style-dynamic-selector .cell.wrong.bg-red.__jsx-style-dynamic-selector{background:repeating-linear-gradient( 45deg, #c33, #c33 10px, #a00 10px, #a00 20px );}.rules.__jsx-style-dynamic-selector{text-align:left;}.rules.__jsx-style-dynamic-selector li.__jsx-style-dynamic-selector{margin:4px 0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/ghostpepper.tsx */\")), fontStyle);\n};\n\n_s(Minigame, \"VEi90xvEtn/gesxF8p+5Me0v9ng=\");\n\n_c = Minigame;\n\nvar GhostPepperGame = function GhostPepperGame(_ref2) {\n  _s2();\n\n  var _gameStateRef$current, _gameState$getState, _gameState$getBaseSta2, _gameState$getBaseSta3, _gameState$getBaseSta4;\n\n  var canvasRef = _ref2.canvasRef,\n      gameState = _ref2.gameState,\n      isConnected = _ref2.isConnected,\n      setLoading = _ref2.setLoading,\n      currentPlayer = _ref2.currentPlayer,\n      sendMessage = _ref2.sendMessage,\n      restartGame = _ref2.restartGame,\n      screenDimensions = _ref2.screenDimensions;\n\n  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false),\n      playerStarted = _useState4[0],\n      setPlayerStarted = _useState4[1];\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(null),\n      board = _useState5[0],\n      setBoard = _useState5[1];\n\n  var _useState6 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])([]),\n      players = _useState6[0],\n      setPlayers = _useState6[1];\n\n  var _useState7 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(null),\n      currentTurn = _useState7[0],\n      setCurrentTurn = _useState7[1];\n\n  var _useState8 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false),\n      showCurrentTurn = _useState8[0],\n      setShowCurrentTurn = _useState8[1];\n\n  var _useState9 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].UNKNOWN_OMEN),\n      omenType = _useState9[0],\n      setOmenType = _useState9[1];\n\n  var _useState10 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(''),\n      omenName = _useState10[0],\n      setOmenName = _useState10[1];\n\n  var _useState11 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(null),\n      omenMinigame = _useState11[0],\n      setOmenMinigame = _useState11[1];\n\n  var _useState12 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(0),\n      omenEndTick = _useState12[0],\n      setOmenEndTick = _useState12[1];\n\n  var _useState13 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(0),\n      turnCount = _useState13[0],\n      setTurnCount = _useState13[1];\n\n  var _useState14 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false),\n      gameOver = _useState14[0],\n      setGameOver = _useState14[1];\n\n  var _useImages = Object(utils_assets__WEBPACK_IMPORTED_MODULE_13__[\"useImages\"])('puzzle/ghostpepper/', ['players', 'tile', 'title', 'crow'].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(Object.values(DOLL_IMAGES).filter(function (image) {\n    return image;\n  })))),\n      isLoading = _useImages.isLoading,\n      images = _useImages.images;\n\n  var _useSounds = Object(utils_assets__WEBPACK_IMPORTED_MODULE_13__[\"useSounds\"])('', [].concat(GHOSTPEPPER_SOUND_EFFECTS, [utils_assets__WEBPACK_IMPORTED_MODULE_13__[\"MAIN_SOUND_EFFECTS\"], utils_timer__WEBPACK_IMPORTED_MODULE_11__[\"TICK_SOUND_EFFECTS\"]])),\n      isSoundLoading = _useSounds.isLoading,\n      sounds = _useSounds.sounds;\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    if (!isLoading && !isSoundLoading) {\n      setLoading(false);\n    }\n  }, [isLoading, isSoundLoading]); // Refs for use in animation frames.\n\n  var gameStateRef = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])(null);\n  var tickRef = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])(0);\n  var timer = Object(utils_timer__WEBPACK_IMPORTED_MODULE_11__[\"useTimer\"])(omenEndTick - tickRef.current, ANIMATION_SPEED, !isLoading && !isSoundLoading && ((_gameStateRef$current = gameStateRef.current) === null || _gameStateRef$current === void 0 ? void 0 : _gameStateRef$current.getState()) !== GhostPepperState.GAME_WIN && omenMinigame !== null, {\n    tickSfx: sounds['public/tick']\n  });\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    if (currentTurn !== null) {\n      setShowCurrentTurn(true);\n      window.setTimeout(function () {\n        return void setShowCurrentTurn(false);\n      }, 2000);\n    }\n  }, [currentTurn, turnCount]);\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    if (omenType) {\n      setOmenName(OMEN_NAMES[omenType]);\n      window.setTimeout(function () {\n        return void setOmenName('');\n      }, 2000);\n    }\n  }, [omenType]);\n\n  if (true) {\n    Object(utils_keyboard__WEBPACK_IMPORTED_MODULE_14__[\"useEventListener\"])('keyup', function (key) {\n      var _gameStateRef$current2;\n\n      var direction = utils_game__WEBPACK_IMPORTED_MODULE_10__[\"DIRECTION_MAP\"][key];\n      var player = currentTurn === null ? null : players[currentTurn];\n\n      if (((_gameStateRef$current2 = gameStateRef.current) === null || _gameStateRef$current2 === void 0 ? void 0 : _gameStateRef$current2.getState()) === GhostPepperState.MOVING && currentPlayer === currentTurn && board && direction && player && canMove(player, board, direction)) {\n        var action = new schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"GhostPepperGameAction\"]();\n        action.setMove(direction);\n        sendMessage(action);\n      }\n    }, window, []);\n  }\n\n  var cleanup = function cleanup() {\n    setPlayerStarted(false);\n    setTurnCount(0);\n    setCurrentTurn(null);\n    setOmenMinigame(null);\n    setOmenEndTick(0);\n    setOmenType(schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].UNKNOWN_OMEN);\n    setGameOver(false);\n    gameStateRef.current = null;\n    tickRef.current = 0;\n    canvasRef.current.getContext('2d').clearRect(0, 0, screenDimensions.width, screenDimensions.height);\n  };\n\n  var onInput = function onInput(input) {\n    var action = new schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"GhostPepperGameAction\"]();\n    action.setInput(input);\n    sendMessage(action);\n    sounds['public/mainsfx'].play('select');\n  };\n\n  var onStartGame = function onStartGame() {\n    var action = new schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"GhostPepperGameAction\"]();\n    var baseAction = new schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameAction\"]();\n    baseAction.setAction(schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"Action\"].START_GAME);\n    action.setBaseAction(baseAction);\n    sendMessage(action);\n    setPlayerStarted(true);\n    sounds['public/mainsfx'].play('select');\n  };\n\n  var onRestart = function onRestart() {\n    if (Object(utils_game__WEBPACK_IMPORTED_MODULE_10__[\"isGameOver\"])(gameStateRef.current)) {\n      sounds['public/mainsfx'].play('select');\n      cleanup();\n      restartGame();\n    }\n  }; // Update client state on every websocket message.\n\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    var _gameState$getBaseSta, _gameState$getTurnCou;\n\n    gameStateRef.current = gameState;\n    tickRef.current = (_gameState$getBaseSta = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getTick()) !== null && _gameState$getBaseSta !== void 0 ? _gameState$getBaseSta : 0;\n\n    if (!gameState || !isConnected || isLoading || gameOver) {\n      return;\n    }\n\n    if (Object(utils_game__WEBPACK_IMPORTED_MODULE_10__[\"isGameOver\"])(gameState)) {\n      sounds['public/mainsfx'].play(gameState.getBaseState().getStatus() === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'win' : 'loss');\n      sounds['puzzle/ghostpepper/bgm'].fade(1, 0, 1000);\n      setGameOver(true);\n      return;\n    }\n\n    var newPlayers = gameState.getPlayersList();\n\n    switch (gameState.getState()) {\n      case GhostPepperState.WAITING_FOR_START:\n        // Wait for players to start\n        break;\n\n      case GhostPepperState.GAME_WIN: // fallthrough\n\n      case GhostPepperState.MOVING:\n        var newBoard = gameState.getBoard();\n\n        if (newBoard && newBoard !== board) {\n          setBoard(newBoard);\n        }\n\n        var newTurnCount = (_gameState$getTurnCou = gameState.getTurnCount()) !== null && _gameState$getTurnCou !== void 0 ? _gameState$getTurnCou : 0;\n\n        if (newTurnCount !== turnCount) {\n          var _gameState$getCurrent;\n\n          if (newTurnCount === 1) {\n            sounds['puzzle/ghostpepper/bgm'].play('full');\n          }\n\n          setTurnCount(newTurnCount);\n          setCurrentTurn((_gameState$getCurrent = gameState.getCurrentTurn()) !== null && _gameState$getCurrent !== void 0 ? _gameState$getCurrent : schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"PlayerColor\"].RED);\n          setOmenMinigame(null);\n          setOmenEndTick(0);\n          setOmenType(schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"OmenType\"].UNKNOWN_OMEN);\n        } // Update player positions.\n\n\n        if (newPlayers.length) {\n          setPlayers(newPlayers);\n        }\n\n        break;\n\n      case GhostPepperState.OMEN:\n        // Update player positions.\n        if (newPlayers.length) {\n          setPlayers(newPlayers);\n        }\n\n        var newOmenType = gameState.getCurrentOmen();\n\n        if (newOmenType && newOmenType !== omenType) {\n          setOmenType(newOmenType);\n        }\n\n        var newMinigame = gameState.getOmenMinigame();\n\n        if (newMinigame && (!omenMinigame || omenMinigame.getSelectedIndex() !== newMinigame.getSelectedIndex() || omenMinigame.getScore() !== newMinigame.getScore() || omenMinigame.getInput() !== newMinigame.getInput() || omenMinigame.getAnswer() !== newMinigame.getAnswer() || omenMinigame.getThreshold() !== newMinigame.getThreshold())) {\n          setOmenEndTick(gameState.getOmenEndTick());\n          setOmenMinigame(newMinigame);\n        }\n\n        break;\n    }\n  }, [gameState]); // Paint frames on the canvas.\n\n  var render = function render(tick) {\n    var _gameStateRef$current3, _gameStateRef$current4;\n\n    if (isLoading || isSoundLoading || Object(utils_game__WEBPACK_IMPORTED_MODULE_10__[\"isGameOver\"])(gameStateRef.current)) {\n      return;\n    }\n\n    var ctx = canvasRef.current.getContext('2d');\n    ctx.clearRect(0, 0, screenDimensions.width, screenDimensions.height);\n    var state = (_gameStateRef$current3 = (_gameStateRef$current4 = gameStateRef.current) === null || _gameStateRef$current4 === void 0 ? void 0 : _gameStateRef$current4.getState()) !== null && _gameStateRef$current3 !== void 0 ? _gameStateRef$current3 : GhostPepperState.WAITING_FOR_START;\n\n    if (state === GhostPepperState.WAITING_FOR_START) {\n      renderTitle(ctx, images['title'], screenDimensions);\n    } else if (board && (state === GhostPepperState.MOVING || state === GhostPepperState.GAME_WIN)) {\n      renderBoard(ctx, board, images['tile'], images['crow'], screenDimensions);\n      players.forEach(function (player, i) {\n        if (!player.getIsDead()) {\n          renderDoll(ctx, board, player, images['players'], i, screenDimensions);\n        }\n\n        if (i === currentPlayer) {\n          // Show the current player in the corner.\n          var _tileSize = getTileSize(board, screenDimensions);\n\n          renderDoll(ctx, board, player, images['players'], currentPlayer, screenDimensions, [screenDimensions.width - _tileSize / 4 - 16, screenDimensions.height - _tileSize / 4 - 16]);\n        }\n      });\n    }\n  };\n\n  Object(utils_animation__WEBPACK_IMPORTED_MODULE_12__[\"useAnimationFrame\"])(render, tickRef, [board, players]);\n  var state = (_gameState$getState = gameState === null || gameState === void 0 ? void 0 : gameState.getState()) !== null && _gameState$getState !== void 0 ? _gameState$getState : GhostPepperState.WAITING_FOR_START;\n  var status = (_gameState$getBaseSta2 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getStatus()) !== null && _gameState$getBaseSta2 !== void 0 ? _gameState$getBaseSta2 : schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].WAITING_FOR_START;\n  var playersList = (_gameState$getBaseSta3 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getPlayersList()) !== null && _gameState$getBaseSta3 !== void 0 ? _gameState$getBaseSta3 : [];\n  var tick = (_gameState$getBaseSta4 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getTick()) !== null && _gameState$getBaseSta4 !== void 0 ? _gameState$getBaseSta4 : 0;\n\n  if (isLoading || isSoundLoading) {\n    return __jsx(\"div\", {\n      className: \"message abs-center white\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 939,\n        columnNumber: 12\n      }\n    }, \"Haunting houses...\");\n  }\n\n  var tileSize = board ? getTileSize(board, screenDimensions) : 0;\n  var _styles$className = {\n    styles: __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n      id: \"1754449572\"\n    }, \"div.jsx-1754449572{color:#fff;top:75%;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/ghostpepper.tsx */\"),\n    className: \"jsx-1754449572\"\n  },\n      lobbyClassName = _styles$className.className,\n      lobbyStyles = _styles$className.styles;\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, gameOver ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + \"winLose message center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 955,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 956,\n      columnNumber: 13\n    }\n  }, \"GAME \", status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_LOSS ? 'OVER' : 'COMPLETE')), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + \"bottom message center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 960,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    onClick: onRestart,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + \"menu-button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 961,\n      columnNumber: 13\n    }\n  }, \"Back to lobby\"))) : state === GhostPepperState.WAITING_FOR_START && tick === 0 ? __jsx(components_groupsolve_lobby__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n    playerStarted: playerStarted,\n    isConnected: isConnected,\n    players: playersList,\n    currentPlayer: currentPlayer,\n    playerSprite: {\n      url: images['players'].src,\n      width: screenDimensions.width / 10,\n      height: screenDimensions.width / 10\n    },\n    startButton: __jsx(\"button\", {\n      onClick: onStartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + \"menu-button\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 978,\n        columnNumber: 13\n      }\n    }, \"Ready to start\"),\n    confirmButton: __jsx(\"button\", {\n      onClick: onStartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + \"menu-button\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 983,\n        columnNumber: 13\n      }\n    }, \"Start game\"),\n    rejoinButton: __jsx(\"button\", {\n      onClick: restartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + \"menu-button\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 988,\n        columnNumber: 13\n      }\n    }, \"Rejoin lobby\"),\n    className: lobbyClassName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 967,\n      columnNumber: 9\n    }\n  }) : state >= GhostPepperState.MOVING && __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, __jsx(\"span\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + \"pigpen\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 998,\n      columnNumber: 13\n    }\n  }), __jsx(components_fader__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n    name: \"ui-fade\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 999,\n      columnNumber: 13\n    }\n  }, state === GhostPepperState.OMEN && __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + \"ui players\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1001,\n      columnNumber: 17\n    }\n  }, players.map(function (player, i) {\n    return __jsx(\"img\", {\n      key: \"player-\".concat(i),\n      src: images[DOLL_IMAGES[player.getDoll()]].src,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + ((player.getIsDead() ? 'dead' : '') || \"\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 21\n      }\n    });\n  })), showCurrentTurn && currentTurn !== null && __jsx(\"div\", {\n    key: \"turn-indicator\",\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + \"ui abs-center banner\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1013,\n      columnNumber: 17\n    }\n  }, __jsx(\"h1\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1014,\n      columnNumber: 19\n    }\n  }, \"Turn \", turnCount, \": \", DOLL_NAMES[currentTurn], \"'s turn!\")), omenName && __jsx(\"div\", {\n    key: \"omen\",\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + \"ui abs-center banner\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1020,\n      columnNumber: 17\n    }\n  }, __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1021,\n      columnNumber: 19\n    }\n  }, __jsx(\"img\", {\n    alt: \"Crow\",\n    src: images['crow'].src,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + \"crow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1022,\n      columnNumber: 21\n    }\n  }), \"Omen found!\"), __jsx(\"h1\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1025,\n      columnNumber: 19\n    }\n  }, omenName), __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1026,\n      columnNumber: 19\n    }\n  }, DOLL_NAMES[currentTurn], \" vs. \", TRAITOR_NAME)), state === GhostPepperState.GAME_WIN && __jsx(\"div\", {\n    key: \"win-text\",\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + \"ui abs-center banner\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1032,\n      columnNumber: 17\n    }\n  }, __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1033,\n      columnNumber: 19\n    }\n  }, \"Item found!\"), __jsx(\"h1\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1034,\n      columnNumber: 19\n    }\n  }, \"Front door key obtained\"), __jsx(\"p\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1035,\n      columnNumber: 19\n    }\n  }, \"With a scream, the traitor Raquelle launches herself at you, but you manage to slip away. Clutching the key to the front door, you turn the lock and stumble outside, leaving behind the dark, dark omens...\"), __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1041,\n      columnNumber: 19\n    }\n  }, \"YOU HAVE ESCAPED THE MANSION.\")), state !== GhostPepperState.GAME_WIN && omenMinigame && __jsx(Minigame, {\n    omenMinigame: omenMinigame,\n    omenType: omenType,\n    currentTurn: currentTurn,\n    isCurrentTurn: currentPlayer === currentTurn,\n    onInput: onInput,\n    screenDimensions: screenDimensions,\n    sounds: sounds,\n    timer: timer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1045,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]) + \" \" + \"ui turn-count\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1057,\n      columnNumber: 13\n    }\n  }, __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1058,\n      columnNumber: 15\n    }\n  }, \"Turn: \", turnCount), currentTurn !== null && __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1060,\n      columnNumber: 17\n    }\n  }, \"Current player: \", DOLL_NAMES[currentTurn], currentTurn === currentPlayer ? ' (you)' : ''), state === GhostPepperState.MOVING && !gameOver && __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"973716304\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8]]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1067,\n      columnNumber: 17\n    }\n  }, \"Arrow keys/WASD to move\"))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"973716304\",\n    dynamic: [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', screenDimensions.width / 8],\n    __self: _this\n  }, \".center.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:absolute;left:0;right:0;top:50%;text-align:center;}.bottom.__jsx-style-dynamic-selector{top:80%;}.message.__jsx-style-dynamic-selector{color:#fff;pointer-events:none;font-size:25px;}.winLose.message.__jsx-style-dynamic-selector{color:\".concat(status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_8__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', \";font-size:50px;top:20%;}.ui.__jsx-style-dynamic-selector{position:absolute;color:#fff;}h1.__jsx-style-dynamic-selector,h3.__jsx-style-dynamic-selector{margin:4px 0;}.crow.__jsx-style-dynamic-selector{margin-right:8px;width:60px;}.turn-count.__jsx-style-dynamic-selector{bottom:20px;left:20px;}.turn-count.__jsx-style-dynamic-selector h3.__jsx-style-dynamic-selector{font-size:2.5vmin;margin:4px 0;}.menu-button.__jsx-style-dynamic-selector{background:transparent;border:none;color:red;font-size:24px;font-weight:bold;height:32px;padding:0;}.menu-button.__jsx-style-dynamic-selector:hover{font-size:26px;}.banner.__jsx-style-dynamic-selector{background:rgba(255,255,255,0.75);color:#000;padding:8px;text-align:center;width:100%;}.players.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}.players.__jsx-style-dynamic-selector img.__jsx-style-dynamic-selector{width:\").concat(screenDimensions.width / 8, \"px;margin-right:12px;-webkit-transition:opacity filter 300ms ease-in-out;transition:opacity filter 300ms ease-in-out;}.players.__jsx-style-dynamic-selector img.dead.__jsx-style-dynamic-selector{opacity:60%;-webkit-filter:grayscale(1);filter:grayscale(1);}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvZ2hvc3RwZXBwZXIudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlqQ2tCLEFBR3dCLEFBVUwsQUFJRyxBQU13QixBQU1qQixBQU1MLEFBSUksQUFLTCxBQUtNLEFBS0ssQUFVUixBQUlzQixBQVF4QixBQUt3QixBQU16QixRQXpFZCxHQUlzQixDQTJCVixBQTJDVSxDQXBEdEIsRUE2QkEsRUF6QmEsQ0FWQSxBQW9CRSxJQUpmLENBU2MsS0FkZCxDQVZBLEVBWmlCLEFBZ0NqQixHQWtCYSxDQTdDSSxBQWdDTCxFQTBCUSxRQXpCSCxBQWFILENBbERkLElBS1UsS0EwRG9DLEVBWjFCLENBN0NwQixFQWdDbUIsQUErQm5CLGNBckZ5QixBQXlFTyxDQUxuQixFQWJDLFNBY2QsR0FiWSxVQUNaLG9EQXVCQSxzQkEvRW9CLGdCQXlFcEIsRUF4RVMsT0FDQyxRQUNBLFFBQ1Usa0JBQ3BCIiwiZmlsZSI6Ii92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvZ2hvc3RwZXBwZXIudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBIb3dsIH0gZnJvbSAnaG93bGVyJztcbmltcG9ydCBjc3MgZnJvbSAnc3R5bGVkLWpzeC9jc3MnO1xuXG5pbXBvcnQgUGlncGVuQ2lwaGVyIGZyb20gJ2Fzc2V0cy9wdXp6bGUvZ2hvc3RwZXBwZXIvcGlncGVuLm90Zic7XG5pbXBvcnQgRmFkZXIgZnJvbSAnY29tcG9uZW50cy9mYWRlcic7XG5pbXBvcnQgTG9iYnkgZnJvbSAnY29tcG9uZW50cy9ncm91cHNvbHZlL2xvYmJ5JztcbmltcG9ydCBUd2Vtb2ppIGZyb20gJ2NvbXBvbmVudHMvdHdlbW9qaSc7XG5pbXBvcnQge1xuICBEb2xsLFxuICBEb2xsTWFwLFxuICBHaG9zdFBlcHBlckdhbWVBY3Rpb24sXG4gIEdob3N0UGVwcGVyR2FtZVN0YXRlLFxuICBIb3VzZUJvYXJkLFxuICBIb3VzZVBsYXllcixcbiAgSG91c2VUaWxlLFxuICBPbWVuTWluaWdhbWUsXG4gIE9tZW5UeXBlLFxuICBPbWVuVHlwZU1hcCxcbiAgUm9vbVRpbGUsXG4gIFJvb21UaWxlTWFwLFxufSBmcm9tICdzY2hlbWEvcHJvdG9zL2dob3N0cGVwcGVyX3BiJztcbmltcG9ydCB7XG4gIEFjdGlvbixcbiAgR2FtZUFjdGlvbixcbiAgR2FtZVN0YXR1cyxcbiAgUGxheWVyQ29sb3IsXG4gIFBsYXllckNvbG9yTWFwLFxufSBmcm9tICdzY2hlbWEvcHJvdG9zL2dhbWVfcGInO1xuaW1wb3J0IHsgQ29vcmRpbmF0ZSwgRGlyZWN0aW9uLCBEaXJlY3Rpb25NYXAgfSBmcm9tICdzY2hlbWEvcHJvdG9zL21hdGhfcGInO1xuaW1wb3J0IHsgUHJvdG9FbnVtIH0gZnJvbSAndHlwZXMnO1xuaW1wb3J0IHtcbiAgRElSRUNUSU9OX01BUCxcbiAgY29tcHV0ZVBvc2l0aW9uLFxuICBnZXRJbWFnZU9mZnNldCxcbiAgZXFDb29yZGluYXRlcyxcbiAgaXNHYW1lT3ZlcixcbiAgaXNXaXRoaW4sXG59IGZyb20gJ3V0aWxzL2dhbWUnO1xuaW1wb3J0IHsgVElDS19TT1VORF9FRkZFQ1RTLCB1c2VUaW1lciB9IGZyb20gJ3V0aWxzL3RpbWVyJztcbmltcG9ydCB7IHVzZUFuaW1hdGlvbkZyYW1lIH0gZnJvbSAndXRpbHMvYW5pbWF0aW9uJztcbmltcG9ydCB7IE1BSU5fU09VTkRfRUZGRUNUUywgU3ByaXRlLCB1c2VJbWFnZXMsIHVzZVNvdW5kcyB9IGZyb20gJ3V0aWxzL2Fzc2V0cyc7XG5pbXBvcnQgeyBLZXlDb2RlLCB1c2VFdmVudExpc3RlbmVyIH0gZnJvbSAndXRpbHMva2V5Ym9hcmQnO1xuaW1wb3J0IHsgU2NyZWVuRGltZW5zaW9ucyB9IGZyb20gJ2NvbXBvbmVudHMvZ3JvdXBzb2x2ZS9wbGF5bWF0ZSc7XG5jb25zdCB7IEdob3N0UGVwcGVyU3RhdGUgfSA9IEdob3N0UGVwcGVyR2FtZVN0YXRlO1xuXG5jb25zdCBHSE9TVFBFUFBFUl9TT1VORF9FRkZFQ1RTOiBTcHJpdGVbXSA9IFtcbiAge1xuICAgIHNyYzogJ3B1enpsZS9naG9zdHBlcHBlci9zZngnLFxuICAgIHNwcml0ZToge1xuICAgICAgY29ycmVjdDogWzAsIDEyMTldLFxuICAgICAgaW5jb3JyZWN0OiBbMTIxOSwgMzU0XSxcbiAgICAgIGRlYXRoOiBbMTU3MywgNDk5MF0sXG4gICAgICBsaXZlOiBbNjU2MywgNzMxXSxcbiAgICB9LFxuICB9LFxuICB7XG4gICAgc3JjOiAncHV6emxlL2dob3N0cGVwcGVyL2JnbScsXG4gICAgc3ByaXRlOiB7XG4gICAgICBmdWxsOiBbMCwgNzY4NjJdLFxuICAgICAgbG9vcDogWzI2MSwgNzY2MDFdLFxuICAgIH0sXG4gICAgb25lbmQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICh0aGlzIGFzIEhvd2wpLnBsYXkoJ2xvb3AnKTtcbiAgICB9LFxuICB9LFxuXTtcblxuY29uc3QgQU5JTUFUSU9OX1NQRUVEID0gMTA7XG5jb25zdCBUSUxFX1NJWkUgPSAyMDA7XG5jb25zdCBFTlRSQU5DRV9IRUlHSFQgPSAyMzc7XG5jb25zdCBQTEFZRVJfV0lEVEggPSAyMDA7XG5jb25zdCBQTEFZRVJfSEVJR0hUID0gMjAwO1xuXG5jb25zdCBET0xMX05BTUVTOiBSZWNvcmQ8UHJvdG9FbnVtPFBsYXllckNvbG9yTWFwPiwgc3RyaW5nPiA9IHtcbiAgW1BsYXllckNvbG9yLlJFRF06ICdCYXJiaWUnLFxuICBbUGxheWVyQ29sb3IuQkxVRV06ICdLZW4nLFxuICBbUGxheWVyQ29sb3IuR1JFRU5dOiAnTWlkZ2UnLFxuICBbUGxheWVyQ29sb3IuWUVMTE9XXTogJ1J5YW4nLFxuICBbUGxheWVyQ29sb3IuT1JBTkdFXTogJ1N0YWNpZScsXG4gIFtQbGF5ZXJDb2xvci5JTkRJR09dOiAnVGF3bnknLFxufTtcblxuY29uc3QgRE9MTF9JTUFHRVM6IFJlY29yZDxQcm90b0VudW08RG9sbE1hcD4sIHN0cmluZz4gPSB7XG4gIFtEb2xsLlVOS05PV05fRE9MTF06ICcnLFxuICBbRG9sbC5CQVJCSUVdOiAnYmFyYmllJyxcbiAgW0RvbGwuS0VOXTogJ2tlbicsXG4gIFtEb2xsLk1JREdFXTogJ21pZGdlJyxcbiAgW0RvbGwuUllBTl06ICdyeWFuJyxcbiAgW0RvbGwuU1RBQ0lFXTogJ3N0YWNpZScsXG4gIFtEb2xsLlRBV05ZXTogJ3Rhd255Jyxcbn07XG5cbmNvbnN0IFRSQUlUT1JfTkFNRSA9ICdSYXF1ZWxsZSc7XG5cbmNvbnN0IE9NRU5fTkFNRVM6IFJlY29yZDxQcm90b0VudW08T21lblR5cGVNYXA+LCBzdHJpbmc+ID0ge1xuICBbT21lblR5cGUuVU5LTk9XTl9PTUVOXTogJycsXG4gIFtPbWVuVHlwZS5NQVRIXTogJ1NwaXJpdCBvZiBBbGdlYnJhJyxcbiAgW09tZW5UeXBlLk1FTU9SWV06ICdCcmFpbi1odW5ncnkgWm9tYmllJyxcbiAgW09tZW5UeXBlLkFOQUdSQU1TXTogJ0Rpc2NvbWJvYnVsYXRlZCBDb250cmFwdGlvbicsXG4gIFtPbWVuVHlwZS5QSUdQRU5dOiAnUmVhbmltYXRlZCBIb2cnLFxuICBbT21lblR5cGUuUEFTU0NPREVdOiAnU3Bvb2t5IENyeXB0ZXgnLFxuICBbT21lblR5cGUuVkVSQkFMX01FTU9SWV06ICdFeHBlcmltZW50YWwgSG9ycm9yJyxcbn07XG5cbmNvbnN0IGhhc0Rvb3IgPSAodGlsZTogSG91c2VUaWxlLCBkaXJlY3Rpb246IFByb3RvRW51bTxEaXJlY3Rpb25NYXA+KSA9PiB7XG4gIGNvbnN0IERJUkVDVElPTl9CSVQ6IFJlY29yZDxQcm90b0VudW08RGlyZWN0aW9uTWFwPiwgbnVtYmVyPiA9IHtcbiAgICBbRGlyZWN0aW9uLkRJUkVDVElPTl9OT05FXTogMCxcbiAgICBbRGlyZWN0aW9uLlVQXTogMCxcbiAgICBbRGlyZWN0aW9uLlJJR0hUXTogMSxcbiAgICBbRGlyZWN0aW9uLkRPV05dOiAyLFxuICAgIFtEaXJlY3Rpb24uTEVGVF06IDMsXG4gIH07XG4gIHJldHVybiAodGlsZS5nZXREb29ycygpID4+IERJUkVDVElPTl9CSVRbZGlyZWN0aW9uXSkgJSAyID09PSAxO1xufTtcblxuY29uc3QgY2FuTW92ZSA9IChcbiAgcGxheWVyOiBIb3VzZVBsYXllcixcbiAgYm9hcmQ6IEhvdXNlQm9hcmQsXG4gIGRpcmVjdGlvbjogUHJvdG9FbnVtPERpcmVjdGlvbk1hcD5cbikgPT4ge1xuICBjb25zdCBjdXJyZW50VGlsZSA9IGJvYXJkXG4gICAgLmdldFRpbGVzTGlzdCgpXG4gICAgLmZpbmQoKHRpbGUpID0+IGVxQ29vcmRpbmF0ZXModGlsZS5nZXRQb3NpdGlvbigpLCBwbGF5ZXIuZ2V0UG9zaXRpb24oKSkpO1xuXG4gIGlmICghY3VycmVudFRpbGUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gaGFzRG9vcihjdXJyZW50VGlsZSwgZGlyZWN0aW9uKTtcbn07XG5cbmNvbnN0IGdldFRpbGVTaXplID0gKGJvYXJkOiBIb3VzZUJvYXJkLCBzY3JlZW5EaW1lbnNpb25zKSA9PlxuICAvLyBMZWF2ZSBhIGxpdHRsZSBiaXQgb2YgcGFkZGluZyBvbiBlYWNoIHNpZGUuXG4gIE1hdGgubWluKFxuICAgIHNjcmVlbkRpbWVuc2lvbnMud2lkdGggLyAoYm9hcmQuZ2V0V2lkdGgoKSArIDEpLFxuICAgIHNjcmVlbkRpbWVuc2lvbnMuaGVpZ2h0IC8gKGJvYXJkLmdldEhlaWdodCgpICsgMSlcbiAgKTtcblxuY29uc3QgZ2V0VG9wTGVmdCA9IChcbiAgcG9zaXRpb246IENvb3JkaW5hdGUgfCB1bmRlZmluZWQsXG4gIGJvYXJkOiBIb3VzZUJvYXJkLFxuICBzY3JlZW5EaW1lbnNpb25zXG4pOiBbbnVtYmVyLCBudW1iZXJdID0+IHtcbiAgY29uc3QgdGlsZVNpemUgPSBnZXRUaWxlU2l6ZShib2FyZCwgc2NyZWVuRGltZW5zaW9ucyk7XG4gIHJldHVybiBbXG4gICAgKHBvc2l0aW9uPy5nZXRYKCkgPz8gMCkgKiB0aWxlU2l6ZSArXG4gICAgICAoc2NyZWVuRGltZW5zaW9ucy53aWR0aCAtIHRpbGVTaXplICogYm9hcmQuZ2V0V2lkdGgoKSkgLyAyLFxuICAgIChwb3NpdGlvbj8uZ2V0WSgpID8/IDApICogdGlsZVNpemUgK1xuICAgICAgKHNjcmVlbkRpbWVuc2lvbnMuaGVpZ2h0IC0gdGlsZVNpemUgKiBib2FyZC5nZXRIZWlnaHQoKSkgLyAyLFxuICBdO1xufTtcblxuY29uc3QgcmVuZGVyVGl0bGUgPSAoY3R4LCBzcHJpdGUsIHNjcmVlbkRpbWVuc2lvbnMpID0+IHtcbiAgY3R4LmRyYXdJbWFnZShzcHJpdGUsIDAsIDAsIHNjcmVlbkRpbWVuc2lvbnMud2lkdGgsIHNjcmVlbkRpbWVuc2lvbnMuaGVpZ2h0KTtcbn07XG5cbmNvbnN0IHJlbmRlckJvYXJkID0gKFxuICBjdHgsXG4gIGJvYXJkOiBIb3VzZUJvYXJkLFxuICBzcHJpdGUsXG4gIG9tZW5TcHJpdGUsXG4gIHNjcmVlbkRpbWVuc2lvbnNcbikgPT4ge1xuICAvLyBGb3IgZWFjaCB0aWxlIGluIHRoZSBib2FyZCwgZHJhdyB0aGUgYmFja2dyb3VuZCBhbmQgd2FsbHMuXG4gIGNvbnN0IG4gPSBib2FyZC5nZXRXaWR0aCgpO1xuICBjb25zdCBtID0gYm9hcmQuZ2V0SGVpZ2h0KCk7XG4gIGNvbnN0IHRpbGVTaXplID0gZ2V0VGlsZVNpemUoYm9hcmQsIHNjcmVlbkRpbWVuc2lvbnMpO1xuXG4gIGJvYXJkLmdldFRpbGVzTGlzdCgpLmZvckVhY2goKHRpbGUpID0+IHtcbiAgICBjb25zdCB0b3BMZWZ0OiBbbnVtYmVyLCBudW1iZXJdID0gZ2V0VG9wTGVmdChcbiAgICAgIHRpbGUuZ2V0UG9zaXRpb24oKSxcbiAgICAgIGJvYXJkLFxuICAgICAgc2NyZWVuRGltZW5zaW9uc1xuICAgICk7XG5cbiAgICAvLyBEcmF3IHRpbGUsIGRlcGVuZGluZyBvbiB0aGUgcm9vbSB0aWxlICgwLWluZGV4ZWQpLlxuICAgIGNvbnN0IGlzRW50cmFuY2UgPSB0aWxlLmdldFJvb20oKSA9PT0gUm9vbVRpbGUuRU5UUkFOQ0VfSEFMTDtcbiAgICBjb25zdCByb29tID0gdGlsZS5nZXRSb29tKCkgLSAxO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgaWYgKCF0aWxlLmdldFZpc2libGUoKSkge1xuICAgICAgY3R4LmZpbHRlciA9ICdicmlnaHRuZXNzKDElKSc7XG4gICAgfVxuICAgIGN0eC5kcmF3SW1hZ2UoXG4gICAgICBzcHJpdGUsXG4gICAgICByb29tICogVElMRV9TSVpFLCAvLyBzcHJpdGVzaGVldCBvZmZzZXQgYnkgcm9vbVxuICAgICAgMCxcbiAgICAgIFRJTEVfU0laRSxcbiAgICAgIGlzRW50cmFuY2UgPyBFTlRSQU5DRV9IRUlHSFQgOiBUSUxFX1NJWkUsXG4gICAgICB0b3BMZWZ0WzBdLFxuICAgICAgdG9wTGVmdFsxXSxcbiAgICAgIHRpbGVTaXplLFxuICAgICAgaXNFbnRyYW5jZSA/ICh0aWxlU2l6ZSAqIEVOVFJBTkNFX0hFSUdIVCkgLyBUSUxFX1NJWkUgOiB0aWxlU2l6ZVxuICAgICk7XG5cbiAgICBpZiAoIWlzRW50cmFuY2UpIHtcbiAgICAgIGN0eC5maWx0ZXIgPSB0aWxlLmdldE9tZW5Tb2x2ZWQoKSA/ICdncmF5c2NhbGUoMSkgb3BhY2l0eSgwLjUpJyA6ICcnO1xuICAgICAgY3R4LmRyYXdJbWFnZShcbiAgICAgICAgb21lblNwcml0ZSxcbiAgICAgICAgdG9wTGVmdFswXSArIHRpbGVTaXplIC8gMTIsXG4gICAgICAgIHRvcExlZnRbMV0gKyAodGlsZVNpemUgKiA5KSAvIDEyLFxuICAgICAgICB0aWxlU2l6ZSAvIDYsXG4gICAgICAgIHRpbGVTaXplIC8gNlxuICAgICAgKTtcbiAgICB9XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfSk7XG59O1xuXG5jb25zdCByZW5kZXJEb2xsID0gKFxuICBjdHgsXG4gIGJvYXJkOiBIb3VzZUJvYXJkLFxuICBwbGF5ZXI6IEhvdXNlUGxheWVyLFxuICBzcHJpdGUsXG4gIHNwcml0ZUluZGV4LFxuICBzY3JlZW5EaW1lbnNpb25zLFxuICBsb2NhdGlvbj86IFtudW1iZXIsIG51bWJlcl1cbikgPT4ge1xuICBjb25zdCB0aWxlU2l6ZSA9IGdldFRpbGVTaXplKGJvYXJkLCBzY3JlZW5EaW1lbnNpb25zKTtcbiAgY29uc3QgcG9zaXRpb24gPSBnZXRUb3BMZWZ0KHBsYXllci5nZXRQb3NpdGlvbigpLCBib2FyZCwgc2NyZWVuRGltZW5zaW9ucyk7XG4gIGNvbnN0IGRvbGxUeXBlID0gcGxheWVyLmdldERvbGwoKTtcbiAgY3R4LmRyYXdJbWFnZShcbiAgICBzcHJpdGUsXG4gICAgc3ByaXRlSW5kZXggKiBQTEFZRVJfV0lEVEgsXG4gICAgMCxcbiAgICBQTEFZRVJfV0lEVEgsXG4gICAgUExBWUVSX0hFSUdIVCxcbiAgICBsb2NhdGlvbj8uWzBdID8/IHBvc2l0aW9uWzBdICsgKChzcHJpdGVJbmRleCAlIDMpICsgMSkgKiAodGlsZVNpemUgLyA1KSxcbiAgICBsb2NhdGlvbj8uWzFdID8/XG4gICAgICBwb3NpdGlvblsxXSArIChNYXRoLmZsb29yKHNwcml0ZUluZGV4IC8gMykgKyAxKSAqICh0aWxlU2l6ZSAvIDQpLFxuICAgIHRpbGVTaXplIC8gNCxcbiAgICB0aWxlU2l6ZSAvIDRcbiAgKTtcbn07XG5cbmNvbnN0IGZvbnRTdHlsZSA9IChcbiAgPHN0eWxlIGpzeD57YFxuICAgIEBmb250LWZhY2Uge1xuICAgICAgZm9udC1mYW1pbHk6ICdQaWdwZW4gQ2lwaGVyJztcbiAgICAgIHNyYzogdXJsKCR7UGlncGVuQ2lwaGVyfSk7XG4gICAgfVxuXG4gICAgLnBpZ3BlbiB7XG4gICAgICBmb250LWZhbWlseTogJ1BpZ3BlbiBDaXBoZXInO1xuICAgIH1cbiAgYH08L3N0eWxlPlxuKTtcblxuaW50ZXJmYWNlIE1pbmlnYW1lUHJvcHMge1xuICBvbWVuTWluaWdhbWU6IE9tZW5NaW5pZ2FtZTtcbiAgb21lblR5cGU6IFByb3RvRW51bTxPbWVuVHlwZU1hcD47XG4gIGN1cnJlbnRUdXJuOiBQcm90b0VudW08UGxheWVyQ29sb3JNYXA+O1xuICBpc0N1cnJlbnRUdXJuOiBib29sZWFuO1xuICBvbklucHV0OiAodmFsdWU6IHN0cmluZykgPT4gdm9pZDtcbiAgc2NyZWVuRGltZW5zaW9uczogU2NyZWVuRGltZW5zaW9ucztcbiAgc291bmRzOiBSZWNvcmQ8c3RyaW5nLCBIb3dsPjtcbiAgdGltZXI6IFJlYWN0LlJlYWN0RnJhZ21lbnQ7XG59XG5cbmNvbnN0IE1pbmlnYW1lOiBGdW5jdGlvbkNvbXBvbmVudDxNaW5pZ2FtZVByb3BzPiA9ICh7XG4gIG9tZW5NaW5pZ2FtZSxcbiAgb21lblR5cGUsXG4gIGN1cnJlbnRUdXJuLFxuICBpc0N1cnJlbnRUdXJuLFxuICBvbklucHV0LFxuICBzY3JlZW5EaW1lbnNpb25zLFxuICBzb3VuZHMsXG4gIHRpbWVyLFxufSkgPT4ge1xuICBjb25zdCBpbnB1dFJlZiA9IHVzZVJlZjxIVE1MSW5wdXRFbGVtZW50PihudWxsKTtcbiAgY29uc3QgW3RleHRJbnB1dCwgc2V0VGV4dElucHV0XSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuICBjb25zdCBbc2hvd0dyaWQsIHNldFNob3dHcmlkXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgW3Zpc2libGVXb3JkLCBzZXRWaXNpYmxlV29yZF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApO1xuICBjb25zdCBpbnB1dCA9IG9tZW5NaW5pZ2FtZS5nZXRJbnB1dCgpO1xuXG4gIC8vIFJlc2V0IHRleHQgaW5wdXQgd2hlbmV2ZXIgdGhlIGlucHV0IGNoYW5nZXMuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgc2V0VGV4dElucHV0KGlucHV0IHx8ICcnKTtcbiAgICBpbnB1dFJlZi5jdXJyZW50Py5mb2N1cygpO1xuICB9LCBbaW5wdXRdKTtcblxuICBjb25zdCBxdWVzdGlvbiA9IG9tZW5NaW5pZ2FtZS5nZXRRdWVzdGlvbigpO1xuICBjb25zdCBhbnN3ZXIgPSBvbWVuTWluaWdhbWUuZ2V0QW5zd2VyKCk7XG4gIGNvbnN0IHRocmVzaG9sZCA9IG9tZW5NaW5pZ2FtZS5nZXRUaHJlc2hvbGQoKTtcbiAgY29uc3Qgc2NvcmUgPSBvbWVuTWluaWdhbWUuZ2V0U2NvcmUoKTtcbiAgY29uc3Qgb3B0aW9ucyA9IG9tZW5NaW5pZ2FtZS5nZXRPcHRpb25zTGlzdCgpO1xuICBjb25zdCBoYXNPcHRpb25zID0gIXNob3dHcmlkICYmICEhcXVlc3Rpb24gJiYgISFvcHRpb25zPy5sZW5ndGg7XG4gIGNvbnN0IHNob3dTY29yZSA9XG4gICAgKG9tZW5UeXBlICE9PSBPbWVuVHlwZS5NRU1PUlkgJiYgb21lblR5cGUgIT09IE9tZW5UeXBlLlBBU1NDT0RFKSB8fCBhbnN3ZXI7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAob21lblR5cGUgPT09IE9tZW5UeXBlLk1FTU9SWSkge1xuICAgICAgc2V0U2hvd0dyaWQodHJ1ZSk7XG4gICAgICBzZXRUZXh0SW5wdXQoJzAnLnJlcGVhdChxdWVzdGlvbi5sZW5ndGgpKTtcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHZvaWQgc2V0U2hvd0dyaWQoZmFsc2UpLCA1MDAwKTsgLy8gU2hvdyBncmlkIGZvciA1c1xuICAgIH0gZWxzZSBpZiAob21lblR5cGUgPT09IE9tZW5UeXBlLlZFUkJBTF9NRU1PUlkgJiYgcXVlc3Rpb24pIHtcbiAgICAgIHNldFNob3dHcmlkKHRydWUpO1xuICAgICAgY29uc3QgcXVlc3Rpb25MZW5ndGggPSBxdWVzdGlvbi5zcGxpdCgnLCcpLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgcXVlc3Rpb25MZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBDeWNsZSB0aHJvdWdoIHdoaWNoIHdvcmQgaXMgdmlzaWJsZS5cbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdm9pZCBzZXRWaXNpYmxlV29yZChpKSwgMTAwMCAqIGkpO1xuICAgICAgfVxuICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzZXRTaG93R3JpZChmYWxzZSk7XG4gICAgICAgIHNldFZpc2libGVXb3JkKDApO1xuICAgICAgfSwgKHF1ZXN0aW9uTGVuZ3RoICsgMSkgKiAxMDAwKTtcbiAgICB9XG4gIH0sIFtvbWVuVHlwZV0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gTXVsdGlwbGUgY2hvaWNlIG9ubHkuXG4gICAgaWYgKFxuICAgICAgKG9tZW5UeXBlID09PSBPbWVuVHlwZS5NQVRIIHx8XG4gICAgICAgIG9tZW5UeXBlID09PSBPbWVuVHlwZS5QSUdQRU4gfHxcbiAgICAgICAgb21lblR5cGUgPT09IE9tZW5UeXBlLlZFUkJBTF9NRU1PUlkpICYmXG4gICAgICBoYXNPcHRpb25zICYmXG4gICAgICBhbnN3ZXJcbiAgICApIHtcbiAgICAgIGNvbnN0IGNvcnJlY3QgPSBhbnN3ZXIgPT09IG9wdGlvbnNbb21lbk1pbmlnYW1lLmdldFNlbGVjdGVkSW5kZXgoKV07XG4gICAgICBzb3VuZHNbJ3B1enpsZS9naG9zdHBlcHBlci9zZngnXS5wbGF5KGNvcnJlY3QgPyAnY29ycmVjdCcgOiAnaW5jb3JyZWN0Jyk7XG4gICAgfVxuICAgIC8vIFRPRE86IHBsYXkgc291bmRzIGZvciBmcmVlIHJlc3BvbnNlLlxuICB9LCBbYW5zd2VyXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAocXVlc3Rpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgYWxpdmUgPSBzY29yZSA+IHRocmVzaG9sZDtcbiAgICBzb3VuZHNbJ3B1enpsZS9naG9zdHBlcHBlci9zZngnXS5wbGF5KGFsaXZlID8gJ2xpdmUnIDogJ2RlYXRoJyk7XG4gIH0sIFt0aHJlc2hvbGRdKTtcblxuICBjb25zdCByZW5kZXJTY29yZSA9ICh2YWx1ZTogbnVtYmVyKSA9PiB7XG4gICAgaWYgKG9tZW5UeXBlID09PSBPbWVuVHlwZS5NRU1PUlkpIHtcbiAgICAgIHJldHVybiBgJHt2YWx1ZX0lYDtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBrZXk9XCJtaW5pZ2FtZVwiIGNsYXNzTmFtZT1cIm1pbmlnYW1lIGFicy1jZW50ZXIgZmxleC1jZW50ZXJcIj5cbiAgICAgIHshdGhyZXNob2xkICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aW1lclwiPlxuICAgICAgICAgIHshc2hvd0dyaWQgJiYgPGgzPnt0aW1lcn08L2gzPn1cbiAgICAgICAgICB7c2hvd1Njb3JlICYmIDxoMz5TY29yZToge3JlbmRlclNjb3JlKHNjb3JlKX08L2gzPn1cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuXG4gICAgICB7cXVlc3Rpb24gJiYgb21lblR5cGUgPT09IE9tZW5UeXBlLk1FTU9SWSA/IChcbiAgICAgICAgPD5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1lbW9yeS1jb250YWluZXIgZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWVtb3J5LWdyaWRcIj5cbiAgICAgICAgICAgICAgeyhzaG93R3JpZCA/IHF1ZXN0aW9uIDogYW5zd2VyIHx8IHRleHRJbnB1dClcbiAgICAgICAgICAgICAgICAuc3BsaXQoJycpXG4gICAgICAgICAgICAgICAgLm1hcCgodGlsZSwgaSkgPT4gKFxuICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBrZXk9e2BjZWxsLSR7aX1gfVxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2BjZWxsJHt0aWxlID09PSAnMScgPyAnIGJnLXJlZCcgOiAnJ30ke1xuICAgICAgICAgICAgICAgICAgICAgIGFuc3dlciAmJiBhbnN3ZXJbaV0gIT09IHRleHRJbnB1dFtpXSA/ICcgd3JvbmcnIDogJydcbiAgICAgICAgICAgICAgICAgICAgfWB9XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtzaG93R3JpZCB8fCAhIWFuc3dlciB8fCAhaXNDdXJyZW50VHVybn1cbiAgICAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1RpbGUgPSB0ZXh0SW5wdXQuY2hhckF0KGkpID09PSAnMScgPyAnMCcgOiAnMSc7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3SW5wdXQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dElucHV0LnN1YnN0cigwLCBpKSArXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdUaWxlICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRJbnB1dC5zdWJzdHJpbmcoaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgIHNldFRleHRJbnB1dChuZXdJbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgb25JbnB1dChuZXdJbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGgzPlxuICAgICAgICAgICAge2Fuc3dlclxuICAgICAgICAgICAgICA/ICdUaGUgY29ycmVjdCBwYXR0ZXJuIGlzLi4uJ1xuICAgICAgICAgICAgICA6IHNob3dHcmlkXG4gICAgICAgICAgICAgID8gJ01lbW9yaXplIHRoZSBwYXR0ZXJuIG9mIGJsb29kJ1xuICAgICAgICAgICAgICA6ICdSZXByb2R1Y2UgdGhlIHBhdHRlcm4nfVxuICAgICAgICAgIDwvaDM+XG4gICAgICAgIDwvPlxuICAgICAgKSA6IHF1ZXN0aW9uID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtvbWVuVHlwZSA9PT0gT21lblR5cGUuVkVSQkFMX01FTU9SWSAmJiBzaG93R3JpZCA/IChcbiAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgIDxoMz5NZW1vcml6ZSB0aGVzZSB3b3JkcyE8L2gzPlxuICAgICAgICAgICAgICA8aDM+e3F1ZXN0aW9uLnNwbGl0KCcsJylbdmlzaWJsZVdvcmRdfTwvaDM+XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPGgzPlxuICAgICAgICAgICAgICBROnsnICd9XG4gICAgICAgICAgICAgIHtvbWVuVHlwZSA9PT0gT21lblR5cGUuVkVSQkFMX01FTU9SWVxuICAgICAgICAgICAgICAgID8gJ1doaWNoIHdvcmRzIGRpZCB5b3Ugc2VlPydcbiAgICAgICAgICAgICAgICA6IHF1ZXN0aW9ufVxuICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwib3B0aW9uc1wiPlxuICAgICAgICAgICAge2hhc09wdGlvbnMgJiYgb21lblR5cGUgIT09IE9tZW5UeXBlLlBBU1NDT0RFXG4gICAgICAgICAgICAgID8gb3B0aW9ucy5tYXAoKG9wdGlvbiwgaSkgPT4gKFxuICAgICAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBrZXk9e2BvcHRpb24tJHtpfWB9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17YCR7XG4gICAgICAgICAgICAgICAgICAgICAgYW5zd2VyICYmIG9tZW5NaW5pZ2FtZS5nZXRTZWxlY3RlZEluZGV4KCkgPT09IGlcbiAgICAgICAgICAgICAgICAgICAgICAgID8gJ3NlbGVjdGVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiAnJ1xuICAgICAgICAgICAgICAgICAgICB9JHtcbiAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXIgPT09IG9wdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnIGNvcnJlY3QgZ3JlZW4nXG4gICAgICAgICAgICAgICAgICAgICAgICA6IGFuc3dlclxuICAgICAgICAgICAgICAgICAgICAgICAgPyAnIGluY29ycmVjdCByZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICAgICAgICAgIH0ke29tZW5UeXBlID09PSBPbWVuVHlwZS5QSUdQRU4gPyAnIHBpZ3BlbicgOiAnJ31gfVxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBvbklucHV0KG9wdGlvbil9XG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshIWFuc3dlciB8fCAhaXNDdXJyZW50VHVybn1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAge29tZW5UeXBlID09PSBPbWVuVHlwZS5QSUdQRU5cbiAgICAgICAgICAgICAgICAgICAgICA/IG9wdGlvbi5zcGxpdCgnJykubWFwKChsZXR0ZXIpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2hvdyBhbGwgbGV0dGVycyB3aXRoIG9uZSB2aXNpYmxlIHRvIGF2b2lkIGNoZWVzZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKChsKSA9PiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU9e2xldHRlciA9PT0gbCA/ICdoeWRkZW4nIDogJ2hpZGRlbid9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgOiBvcHRpb259XG4gICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgICA6IG9tZW5UeXBlICE9PSBPbWVuVHlwZS5WRVJCQUxfTUVNT1JZICYmIChcbiAgICAgICAgICAgICAgICAgIDxmb3JtXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXgtY2VudGVyXCJcbiAgICAgICAgICAgICAgICAgICAgb25TdWJtaXQ9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgb25JbnB1dCh0ZXh0SW5wdXQpO1xuICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHRJbnB1dCAmJiBhbnN3ZXIgPT09IHRleHRJbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdjb3JyZWN0IGdyZWVuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6IGFuc3dlclxuICAgICAgICAgICAgICAgICAgICAgICAgICA/ICdpbmNvcnJlY3QgcmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICBrZXk9XCJpbnB1dFwiXG4gICAgICAgICAgICAgICAgICAgICAgcmVmPXtpbnB1dFJlZn1cbiAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ISFhbnN3ZXIgfHwgIWlzQ3VycmVudFR1cm59XG4gICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdJbnB1dCA9IGUudGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9tZW5UeXBlID09PSBPbWVuVHlwZS5QQVNTQ09ERSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUZXh0SW5wdXQobmV3SW5wdXQuc3Vic3RyaW5nKDAsIDcpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRleHRJbnB1dChuZXdJbnB1dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17XG4gICAgICAgICAgICAgICAgICAgICAgICBhbnN3ZXIgJiYgb21lblR5cGUgPT09IE9tZW5UeXBlLlBBU1NDT0RFXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiB0ZXh0SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIHtvbWVuVHlwZSA9PT0gT21lblR5cGUuUEFTU0NPREUgJiYgKFxuICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICB7YW5zd2VyICYmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibGluZXNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGV4dElucHV0LnNwbGl0KCcnKS5tYXAoKGxldHRlciwgaSkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldHRlciA9PT0gYW5zd2VyLmNoYXJBdChpKSA/IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2BhbnN3ZXItJHtpfWB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29ycmVjdCBncmVlblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bGV0dGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17YHdyb25nLSR7aX1gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImluY29ycmVjdCByZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2xldHRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJsaW5lc1wiPl9fX19fX188L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgPC8+XG4gICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgIHtpc0N1cnJlbnRUdXJuICYmIChcbiAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBkaXNhYmxlZD17ISFhbnN3ZXIgfHwgIXRleHRJbnB1dH0+XG4gICAgICAgICAgICAgICAgICAgICAgICBTdWJtaXRcbiAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAge2hhc09wdGlvbnMgJiYgb21lblR5cGUgPT09IE9tZW5UeXBlLlBBU1NDT0RFICYmIChcbiAgICAgICAgICAgICAgPG9sIGNsYXNzTmFtZT1cInJ1bGVzXCI+XG4gICAgICAgICAgICAgICAge29wdGlvbnMubWFwKChvcHRpb24sIGkpID0+IChcbiAgICAgICAgICAgICAgICAgIDxsaSBrZXk9e2BvcHRpb24tJHtpfWB9PntvcHRpb259PC9saT5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgICAgPC9vbD5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvPlxuICAgICAgKSA6IHRocmVzaG9sZCA/IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0aHJlc2hvbGRcIj5cbiAgICAgICAgICA8aDM+XG4gICAgICAgICAgICB7RE9MTF9OQU1FU1tjdXJyZW50VHVybl19J3Mgc2NvcmU6IHtyZW5kZXJTY29yZShzY29yZSl9XG4gICAgICAgICAgPC9oMz5cbiAgICAgICAgICA8aDM+XG4gICAgICAgICAgICB7VFJBSVRPUl9OQU1FfSdzIHNjb3JlOiB7cmVuZGVyU2NvcmUodGhyZXNob2xkKX1cbiAgICAgICAgICA8L2gzPlxuXG4gICAgICAgICAgPGgxPlxuICAgICAgICAgICAge3Njb3JlID4gdGhyZXNob2xkID8gKFxuICAgICAgICAgICAgICBgJHtET0xMX05BTUVTW2N1cnJlbnRUdXJuXX0gaGFzIHN1cnZpdmVkIHRvIGxpdmUgYW5vdGhlciBkYXkuYFxuICAgICAgICAgICAgKSA6IChcbiAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICB7RE9MTF9OQU1FU1tjdXJyZW50VHVybl19IGhhc3snICd9XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicmVkXCI+UEVSSVNIRUQ8L3NwYW4+LlxuICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgPC9oMT5cbiAgICAgICAgPC9kaXY+XG4gICAgICApIDogbnVsbH1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAubWluaWdhbWUge1xuICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgaGVpZ2h0OiAke3NjcmVlbkRpbWVuc2lvbnMuaGVpZ2h0ICogMC44fXB4O1xuICAgICAgICAgIHdpZHRoOiAke3NjcmVlbkRpbWVuc2lvbnMud2lkdGggKiAwLjh9cHg7XG4gICAgICAgICAgcGFkZGluZzogMnZtaW47XG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgLnRpbWVyIHtcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgIHJpZ2h0OiAyMHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLm9wdGlvbnMge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIG1hcmdpbi10b3A6IDhweDtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1dHRvbiB7XG4gICAgICAgICAgYmFja2dyb3VuZDogbm9uZTtcbiAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgZm9udC1zaXplOiAyNHB4O1xuICAgICAgICAgIHBhZGRpbmc6IDRweCAxMnB4O1xuICAgICAgICAgIG1pbi13aWR0aDogMjAlO1xuICAgICAgICB9XG5cbiAgICAgICAgYnV0dG9uLnNlbGVjdGVkIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtIHtcbiAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCxcbiAgICAgICAgLmxpbmVzIHtcbiAgICAgICAgICBmb250LWZhbWlseTogbW9ub3NwYWNlO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgICBsZXR0ZXItc3BhY2luZzogMnB4O1xuICAgICAgICAgIHBhZGRpbmc6IDRweCA4cHg7XG4gICAgICAgIH1cblxuICAgICAgICBpbnB1dCB7XG4gICAgICAgICAgbWF4LXdpZHRoOiAke29tZW5UeXBlID09PSBPbWVuVHlwZS5QQVNTQ09ERVxuICAgICAgICAgICAgPyAnY2FsYyg3Y2ggKyA0MnB4KSdcbiAgICAgICAgICAgIDogJ2NhbGMoMTVjaCArIDYwcHgpJ307XG4gICAgICAgIH1cblxuICAgICAgICAubGluZXMge1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgICBjb2xvcjogIzAwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1dHRvbi5jb3JyZWN0LFxuICAgICAgICBpbnB1dC5jb3JyZWN0IHtcbiAgICAgICAgICBjb2xvcjogIzM5MztcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1dHRvbi5pbmNvcnJlY3QsXG4gICAgICAgIGlucHV0LmluY29ycmVjdCB7XG4gICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XG4gICAgICAgICAgY29sb3I6ICNjMzM7XG4gICAgICAgIH1cblxuICAgICAgICAubWVtb3J5LWNvbnRhaW5lciB7XG4gICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgICAgcGFkZGluZy10b3A6ICR7c2NyZWVuRGltZW5zaW9ucy5oZWlnaHQgKiAwLjF9cHg7XG4gICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIH1cblxuICAgICAgICAubWVtb3J5LWdyaWQge1xuICAgICAgICAgIGJvcmRlcjogNHB4IHNvbGlkIGJyb3duO1xuICAgICAgICAgIHdpZHRoOiAke3NjcmVlbkRpbWVuc2lvbnMuaGVpZ2h0ICogMC42fXB4O1xuICAgICAgICAgIGhlaWdodDogJHtzY3JlZW5EaW1lbnNpb25zLmhlaWdodCAqIDAuNn1weDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5tZW1vcnktZ3JpZCAuY2VsbCB7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgYmxhY2s7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgICAgd2lkdGg6ICR7c2NyZWVuRGltZW5zaW9ucy5oZWlnaHQgLyAxMCAtIDJ9cHg7XG4gICAgICAgICAgaGVpZ2h0OiAke3NjcmVlbkRpbWVuc2lvbnMuaGVpZ2h0IC8gMTAgLSAyfXB4O1xuICAgICAgICAgIG1pbi13aWR0aDogJHtzY3JlZW5EaW1lbnNpb25zLmhlaWdodCAvIDEwIC0gMn1weDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5jZWxsLmJnLXJlZCB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2MzMztcbiAgICAgICAgfVxuXG4gICAgICAgIC5tZW1vcnktZ3JpZCAuY2VsbC53cm9uZyB7XG4gICAgICAgICAgYmFja2dyb3VuZDogcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudChcbiAgICAgICAgICAgIDQ1ZGVnLFxuICAgICAgICAgICAgIzAwMCxcbiAgICAgICAgICAgICMwMDAgMTBweCxcbiAgICAgICAgICAgICMzMzMgMTBweCxcbiAgICAgICAgICAgICMzMzMgMjBweFxuICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICAubWVtb3J5LWdyaWQgLmNlbGwud3JvbmcuYmctcmVkIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiByZXBlYXRpbmctbGluZWFyLWdyYWRpZW50KFxuICAgICAgICAgICAgNDVkZWcsXG4gICAgICAgICAgICAjYzMzLFxuICAgICAgICAgICAgI2MzMyAxMHB4LFxuICAgICAgICAgICAgI2EwMCAxMHB4LFxuICAgICAgICAgICAgI2EwMCAyMHB4XG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5ydWxlcyB7XG4gICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5ydWxlcyBsaSB7XG4gICAgICAgICAgbWFyZ2luOiA0cHggMDtcbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgICAge2ZvbnRTdHlsZX1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IEdob3N0UGVwcGVyR2FtZSA9ICh7XG4gIGNhbnZhc1JlZixcbiAgZ2FtZVN0YXRlLFxuICBpc0Nvbm5lY3RlZCxcbiAgc2V0TG9hZGluZyxcbiAgY3VycmVudFBsYXllcixcbiAgc2VuZE1lc3NhZ2UsXG4gIHJlc3RhcnRHYW1lLFxuICBzY3JlZW5EaW1lbnNpb25zLFxufSkgPT4ge1xuICBjb25zdCBbcGxheWVyU3RhcnRlZCwgc2V0UGxheWVyU3RhcnRlZF0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gIGNvbnN0IFtib2FyZCwgc2V0Qm9hcmRdID0gdXNlU3RhdGU8SG91c2VCb2FyZCB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbcGxheWVycywgc2V0UGxheWVyc10gPSB1c2VTdGF0ZTxIb3VzZVBsYXllcltdPihbXSk7XG4gIGNvbnN0IFtjdXJyZW50VHVybiwgc2V0Q3VycmVudFR1cm5dID0gdXNlU3RhdGU8UHJvdG9FbnVtPFxuICAgIFBsYXllckNvbG9yTWFwXG4gID4gfCBudWxsPihudWxsKTtcbiAgY29uc3QgW3Nob3dDdXJyZW50VHVybiwgc2V0U2hvd0N1cnJlbnRUdXJuXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgW29tZW5UeXBlLCBzZXRPbWVuVHlwZV0gPSB1c2VTdGF0ZTxQcm90b0VudW08T21lblR5cGVNYXA+PihcbiAgICBPbWVuVHlwZS5VTktOT1dOX09NRU5cbiAgKTtcbiAgY29uc3QgW29tZW5OYW1lLCBzZXRPbWVuTmFtZV0gPSB1c2VTdGF0ZTxzdHJpbmc+KCcnKTtcbiAgY29uc3QgW29tZW5NaW5pZ2FtZSwgc2V0T21lbk1pbmlnYW1lXSA9IHVzZVN0YXRlPE9tZW5NaW5pZ2FtZSB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbb21lbkVuZFRpY2ssIHNldE9tZW5FbmRUaWNrXSA9IHVzZVN0YXRlPG51bWJlcj4oMCk7XG4gIGNvbnN0IFt0dXJuQ291bnQsIHNldFR1cm5Db3VudF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApO1xuICBjb25zdCBbZ2FtZU92ZXIsIHNldEdhbWVPdmVyXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcblxuICBjb25zdCB7IGlzTG9hZGluZywgaW1hZ2VzIH0gPSB1c2VJbWFnZXMoJ3B1enpsZS9naG9zdHBlcHBlci8nLCBbXG4gICAgJ3BsYXllcnMnLFxuICAgICd0aWxlJyxcbiAgICAndGl0bGUnLFxuICAgICdjcm93JyxcbiAgICAuLi5PYmplY3QudmFsdWVzKERPTExfSU1BR0VTKS5maWx0ZXIoKGltYWdlKSA9PiBpbWFnZSksXG4gIF0pO1xuXG4gIGNvbnN0IHsgaXNMb2FkaW5nOiBpc1NvdW5kTG9hZGluZywgc291bmRzIH0gPSB1c2VTb3VuZHMoJycsIFtcbiAgICAuLi5HSE9TVFBFUFBFUl9TT1VORF9FRkZFQ1RTLFxuICAgIE1BSU5fU09VTkRfRUZGRUNUUyxcbiAgICBUSUNLX1NPVU5EX0VGRkVDVFMsXG4gIF0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpc0xvYWRpbmcgJiYgIWlzU291bmRMb2FkaW5nKSB7XG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG4gIH0sIFtpc0xvYWRpbmcsIGlzU291bmRMb2FkaW5nXSk7XG5cbiAgLy8gUmVmcyBmb3IgdXNlIGluIGFuaW1hdGlvbiBmcmFtZXMuXG4gIGNvbnN0IGdhbWVTdGF0ZVJlZiA9IHVzZVJlZjxHaG9zdFBlcHBlckdhbWVTdGF0ZSB8IG51bGw+KG51bGwpO1xuICBjb25zdCB0aWNrUmVmID0gdXNlUmVmPG51bWJlcj4oMCk7XG5cbiAgY29uc3QgdGltZXIgPSB1c2VUaW1lcihcbiAgICBvbWVuRW5kVGljayAtIHRpY2tSZWYuY3VycmVudCxcbiAgICBBTklNQVRJT05fU1BFRUQsXG4gICAgIWlzTG9hZGluZyAmJlxuICAgICAgIWlzU291bmRMb2FkaW5nICYmXG4gICAgICBnYW1lU3RhdGVSZWYuY3VycmVudD8uZ2V0U3RhdGUoKSAhPT0gR2hvc3RQZXBwZXJTdGF0ZS5HQU1FX1dJTiAmJlxuICAgICAgb21lbk1pbmlnYW1lICE9PSBudWxsLFxuICAgIHsgdGlja1NmeDogc291bmRzWydwdWJsaWMvdGljayddIH1cbiAgKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChjdXJyZW50VHVybiAhPT0gbnVsbCkge1xuICAgICAgc2V0U2hvd0N1cnJlbnRUdXJuKHRydWUpO1xuICAgICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4gdm9pZCBzZXRTaG93Q3VycmVudFR1cm4oZmFsc2UpLCAyMDAwKTtcbiAgICB9XG4gIH0sIFtjdXJyZW50VHVybiwgdHVybkNvdW50XSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAob21lblR5cGUpIHtcbiAgICAgIHNldE9tZW5OYW1lKE9NRU5fTkFNRVNbb21lblR5cGVdKTtcbiAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHZvaWQgc2V0T21lbk5hbWUoJycpLCAyMDAwKTtcbiAgICB9XG4gIH0sIFtvbWVuVHlwZV0pO1xuXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHVzZUV2ZW50TGlzdGVuZXIoXG4gICAgICAna2V5dXAnLFxuICAgICAgKGtleSkgPT4ge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBESVJFQ1RJT05fTUFQW2tleV07XG4gICAgICAgIGNvbnN0IHBsYXllciA9IGN1cnJlbnRUdXJuID09PSBudWxsID8gbnVsbCA6IHBsYXllcnNbY3VycmVudFR1cm5dO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZ2FtZVN0YXRlUmVmLmN1cnJlbnQ/LmdldFN0YXRlKCkgPT09IEdob3N0UGVwcGVyU3RhdGUuTU9WSU5HICYmXG4gICAgICAgICAgY3VycmVudFBsYXllciA9PT0gY3VycmVudFR1cm4gJiZcbiAgICAgICAgICBib2FyZCAmJlxuICAgICAgICAgIGRpcmVjdGlvbiAmJlxuICAgICAgICAgIHBsYXllciAmJlxuICAgICAgICAgIGNhbk1vdmUocGxheWVyLCBib2FyZCwgZGlyZWN0aW9uKVxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCBhY3Rpb24gPSBuZXcgR2hvc3RQZXBwZXJHYW1lQWN0aW9uKCk7XG4gICAgICAgICAgYWN0aW9uLnNldE1vdmUoZGlyZWN0aW9uKTtcbiAgICAgICAgICBzZW5kTWVzc2FnZShhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgd2luZG93LFxuICAgICAgW11cbiAgICApO1xuICB9XG5cbiAgY29uc3QgY2xlYW51cCA9ICgpID0+IHtcbiAgICBzZXRQbGF5ZXJTdGFydGVkKGZhbHNlKTtcbiAgICBzZXRUdXJuQ291bnQoMCk7XG4gICAgc2V0Q3VycmVudFR1cm4obnVsbCk7XG4gICAgc2V0T21lbk1pbmlnYW1lKG51bGwpO1xuICAgIHNldE9tZW5FbmRUaWNrKDApO1xuICAgIHNldE9tZW5UeXBlKE9tZW5UeXBlLlVOS05PV05fT01FTik7XG4gICAgc2V0R2FtZU92ZXIoZmFsc2UpO1xuICAgIGdhbWVTdGF0ZVJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB0aWNrUmVmLmN1cnJlbnQgPSAwO1xuICAgIGNhbnZhc1JlZi5jdXJyZW50XG4gICAgICAuZ2V0Q29udGV4dCgnMmQnKVxuICAgICAgLmNsZWFyUmVjdCgwLCAwLCBzY3JlZW5EaW1lbnNpb25zLndpZHRoLCBzY3JlZW5EaW1lbnNpb25zLmhlaWdodCk7XG4gIH07XG5cbiAgY29uc3Qgb25JbnB1dCA9IChpbnB1dDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgYWN0aW9uID0gbmV3IEdob3N0UGVwcGVyR2FtZUFjdGlvbigpO1xuICAgIGFjdGlvbi5zZXRJbnB1dChpbnB1dCk7XG4gICAgc2VuZE1lc3NhZ2UoYWN0aW9uKTtcbiAgICBzb3VuZHNbJ3B1YmxpYy9tYWluc2Z4J10ucGxheSgnc2VsZWN0Jyk7XG4gIH07XG5cbiAgY29uc3Qgb25TdGFydEdhbWUgPSAoKSA9PiB7XG4gICAgY29uc3QgYWN0aW9uID0gbmV3IEdob3N0UGVwcGVyR2FtZUFjdGlvbigpO1xuICAgIGNvbnN0IGJhc2VBY3Rpb24gPSBuZXcgR2FtZUFjdGlvbigpO1xuICAgIGJhc2VBY3Rpb24uc2V0QWN0aW9uKEFjdGlvbi5TVEFSVF9HQU1FKTtcbiAgICBhY3Rpb24uc2V0QmFzZUFjdGlvbihiYXNlQWN0aW9uKTtcbiAgICBzZW5kTWVzc2FnZShhY3Rpb24pO1xuICAgIHNldFBsYXllclN0YXJ0ZWQodHJ1ZSk7XG4gICAgc291bmRzWydwdWJsaWMvbWFpbnNmeCddLnBsYXkoJ3NlbGVjdCcpO1xuICB9O1xuXG4gIGNvbnN0IG9uUmVzdGFydCA9ICgpID0+IHtcbiAgICBpZiAoaXNHYW1lT3ZlcihnYW1lU3RhdGVSZWYuY3VycmVudCkpIHtcbiAgICAgIHNvdW5kc1sncHVibGljL21haW5zZngnXS5wbGF5KCdzZWxlY3QnKTtcbiAgICAgIGNsZWFudXAoKTtcbiAgICAgIHJlc3RhcnRHYW1lKCk7XG4gICAgfVxuICB9O1xuXG4gIC8vIFVwZGF0ZSBjbGllbnQgc3RhdGUgb24gZXZlcnkgd2Vic29ja2V0IG1lc3NhZ2UuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgZ2FtZVN0YXRlUmVmLmN1cnJlbnQgPSBnYW1lU3RhdGU7XG4gICAgdGlja1JlZi5jdXJyZW50ID0gZ2FtZVN0YXRlPy5nZXRCYXNlU3RhdGUoKS5nZXRUaWNrKCkgPz8gMDtcbiAgICBpZiAoIWdhbWVTdGF0ZSB8fCAhaXNDb25uZWN0ZWQgfHwgaXNMb2FkaW5nIHx8IGdhbWVPdmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc0dhbWVPdmVyKGdhbWVTdGF0ZSkpIHtcbiAgICAgIHNvdW5kc1sncHVibGljL21haW5zZngnXS5wbGF5KFxuICAgICAgICBnYW1lU3RhdGUuZ2V0QmFzZVN0YXRlKCkuZ2V0U3RhdHVzKCkgPT09IEdhbWVTdGF0dXMuQ09NUExFVEVfV0lOXG4gICAgICAgICAgPyAnd2luJ1xuICAgICAgICAgIDogJ2xvc3MnXG4gICAgICApO1xuICAgICAgc291bmRzWydwdXp6bGUvZ2hvc3RwZXBwZXIvYmdtJ10uZmFkZSgxLCAwLCAxMDAwKTtcbiAgICAgIHNldEdhbWVPdmVyKHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld1BsYXllcnMgPSBnYW1lU3RhdGUuZ2V0UGxheWVyc0xpc3QoKTtcbiAgICBzd2l0Y2ggKGdhbWVTdGF0ZS5nZXRTdGF0ZSgpKSB7XG4gICAgICBjYXNlIEdob3N0UGVwcGVyU3RhdGUuV0FJVElOR19GT1JfU1RBUlQ6XG4gICAgICAgIC8vIFdhaXQgZm9yIHBsYXllcnMgdG8gc3RhcnRcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgR2hvc3RQZXBwZXJTdGF0ZS5HQU1FX1dJTjogLy8gZmFsbHRocm91Z2hcbiAgICAgIGNhc2UgR2hvc3RQZXBwZXJTdGF0ZS5NT1ZJTkc6XG4gICAgICAgIGNvbnN0IG5ld0JvYXJkID0gZ2FtZVN0YXRlLmdldEJvYXJkKCk7XG4gICAgICAgIGlmIChuZXdCb2FyZCAmJiBuZXdCb2FyZCAhPT0gYm9hcmQpIHtcbiAgICAgICAgICBzZXRCb2FyZChuZXdCb2FyZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdUdXJuQ291bnQgPSBnYW1lU3RhdGUuZ2V0VHVybkNvdW50KCkgPz8gMDtcbiAgICAgICAgaWYgKG5ld1R1cm5Db3VudCAhPT0gdHVybkNvdW50KSB7XG4gICAgICAgICAgaWYgKG5ld1R1cm5Db3VudCA9PT0gMSkge1xuICAgICAgICAgICAgc291bmRzWydwdXp6bGUvZ2hvc3RwZXBwZXIvYmdtJ10ucGxheSgnZnVsbCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzZXRUdXJuQ291bnQobmV3VHVybkNvdW50KTtcbiAgICAgICAgICBzZXRDdXJyZW50VHVybihnYW1lU3RhdGUuZ2V0Q3VycmVudFR1cm4oKSA/PyBQbGF5ZXJDb2xvci5SRUQpO1xuICAgICAgICAgIHNldE9tZW5NaW5pZ2FtZShudWxsKTtcbiAgICAgICAgICBzZXRPbWVuRW5kVGljaygwKTtcbiAgICAgICAgICBzZXRPbWVuVHlwZShPbWVuVHlwZS5VTktOT1dOX09NRU4pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlIHBsYXllciBwb3NpdGlvbnMuXG4gICAgICAgIGlmIChuZXdQbGF5ZXJzLmxlbmd0aCkge1xuICAgICAgICAgIHNldFBsYXllcnMobmV3UGxheWVycyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgR2hvc3RQZXBwZXJTdGF0ZS5PTUVOOlxuICAgICAgICAvLyBVcGRhdGUgcGxheWVyIHBvc2l0aW9ucy5cbiAgICAgICAgaWYgKG5ld1BsYXllcnMubGVuZ3RoKSB7XG4gICAgICAgICAgc2V0UGxheWVycyhuZXdQbGF5ZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG5ld09tZW5UeXBlID0gZ2FtZVN0YXRlLmdldEN1cnJlbnRPbWVuKCk7XG4gICAgICAgIGlmIChuZXdPbWVuVHlwZSAmJiBuZXdPbWVuVHlwZSAhPT0gb21lblR5cGUpIHtcbiAgICAgICAgICBzZXRPbWVuVHlwZShuZXdPbWVuVHlwZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdNaW5pZ2FtZSA9IGdhbWVTdGF0ZS5nZXRPbWVuTWluaWdhbWUoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG5ld01pbmlnYW1lICYmXG4gICAgICAgICAgKCFvbWVuTWluaWdhbWUgfHxcbiAgICAgICAgICAgIG9tZW5NaW5pZ2FtZS5nZXRTZWxlY3RlZEluZGV4KCkgIT09XG4gICAgICAgICAgICAgIG5ld01pbmlnYW1lLmdldFNlbGVjdGVkSW5kZXgoKSB8fFxuICAgICAgICAgICAgb21lbk1pbmlnYW1lLmdldFNjb3JlKCkgIT09IG5ld01pbmlnYW1lLmdldFNjb3JlKCkgfHxcbiAgICAgICAgICAgIG9tZW5NaW5pZ2FtZS5nZXRJbnB1dCgpICE9PSBuZXdNaW5pZ2FtZS5nZXRJbnB1dCgpIHx8XG4gICAgICAgICAgICBvbWVuTWluaWdhbWUuZ2V0QW5zd2VyKCkgIT09IG5ld01pbmlnYW1lLmdldEFuc3dlcigpIHx8XG4gICAgICAgICAgICBvbWVuTWluaWdhbWUuZ2V0VGhyZXNob2xkKCkgIT09IG5ld01pbmlnYW1lLmdldFRocmVzaG9sZCgpKVxuICAgICAgICApIHtcbiAgICAgICAgICBzZXRPbWVuRW5kVGljayhnYW1lU3RhdGUuZ2V0T21lbkVuZFRpY2soKSk7XG4gICAgICAgICAgc2V0T21lbk1pbmlnYW1lKG5ld01pbmlnYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0sIFtnYW1lU3RhdGVdKTtcblxuICAvLyBQYWludCBmcmFtZXMgb24gdGhlIGNhbnZhcy5cbiAgY29uc3QgcmVuZGVyID0gKHRpY2spID0+IHtcbiAgICBpZiAoaXNMb2FkaW5nIHx8IGlzU291bmRMb2FkaW5nIHx8IGlzR2FtZU92ZXIoZ2FtZVN0YXRlUmVmLmN1cnJlbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY3R4ID0gY2FudmFzUmVmLmN1cnJlbnQuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgc2NyZWVuRGltZW5zaW9ucy53aWR0aCwgc2NyZWVuRGltZW5zaW9ucy5oZWlnaHQpO1xuICAgIGNvbnN0IHN0YXRlID1cbiAgICAgIGdhbWVTdGF0ZVJlZi5jdXJyZW50Py5nZXRTdGF0ZSgpID8/IEdob3N0UGVwcGVyU3RhdGUuV0FJVElOR19GT1JfU1RBUlQ7XG5cbiAgICBpZiAoc3RhdGUgPT09IEdob3N0UGVwcGVyU3RhdGUuV0FJVElOR19GT1JfU1RBUlQpIHtcbiAgICAgIHJlbmRlclRpdGxlKGN0eCwgaW1hZ2VzWyd0aXRsZSddLCBzY3JlZW5EaW1lbnNpb25zKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgYm9hcmQgJiZcbiAgICAgIChzdGF0ZSA9PT0gR2hvc3RQZXBwZXJTdGF0ZS5NT1ZJTkcgfHwgc3RhdGUgPT09IEdob3N0UGVwcGVyU3RhdGUuR0FNRV9XSU4pXG4gICAgKSB7XG4gICAgICByZW5kZXJCb2FyZChjdHgsIGJvYXJkLCBpbWFnZXNbJ3RpbGUnXSwgaW1hZ2VzWydjcm93J10sIHNjcmVlbkRpbWVuc2lvbnMpO1xuICAgICAgcGxheWVycy5mb3JFYWNoKChwbGF5ZXIsIGkpID0+IHtcbiAgICAgICAgaWYgKCFwbGF5ZXIuZ2V0SXNEZWFkKCkpIHtcbiAgICAgICAgICByZW5kZXJEb2xsKFxuICAgICAgICAgICAgY3R4LFxuICAgICAgICAgICAgYm9hcmQsXG4gICAgICAgICAgICBwbGF5ZXIsXG4gICAgICAgICAgICBpbWFnZXNbJ3BsYXllcnMnXSxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBzY3JlZW5EaW1lbnNpb25zXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gY3VycmVudFBsYXllcikge1xuICAgICAgICAgIC8vIFNob3cgdGhlIGN1cnJlbnQgcGxheWVyIGluIHRoZSBjb3JuZXIuXG4gICAgICAgICAgY29uc3QgdGlsZVNpemUgPSBnZXRUaWxlU2l6ZShib2FyZCwgc2NyZWVuRGltZW5zaW9ucyk7XG4gICAgICAgICAgcmVuZGVyRG9sbChcbiAgICAgICAgICAgIGN0eCxcbiAgICAgICAgICAgIGJvYXJkLFxuICAgICAgICAgICAgcGxheWVyLFxuICAgICAgICAgICAgaW1hZ2VzWydwbGF5ZXJzJ10sXG4gICAgICAgICAgICBjdXJyZW50UGxheWVyLFxuICAgICAgICAgICAgc2NyZWVuRGltZW5zaW9ucyxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgc2NyZWVuRGltZW5zaW9ucy53aWR0aCAtIHRpbGVTaXplIC8gNCAtIDE2LFxuICAgICAgICAgICAgICBzY3JlZW5EaW1lbnNpb25zLmhlaWdodCAtIHRpbGVTaXplIC8gNCAtIDE2LFxuICAgICAgICAgICAgXVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgdXNlQW5pbWF0aW9uRnJhbWUocmVuZGVyLCB0aWNrUmVmLCBbYm9hcmQsIHBsYXllcnNdKTtcblxuICBjb25zdCBzdGF0ZSA9IGdhbWVTdGF0ZT8uZ2V0U3RhdGUoKSA/PyBHaG9zdFBlcHBlclN0YXRlLldBSVRJTkdfRk9SX1NUQVJUO1xuICBjb25zdCBzdGF0dXMgPVxuICAgIGdhbWVTdGF0ZT8uZ2V0QmFzZVN0YXRlKCkuZ2V0U3RhdHVzKCkgPz8gR2FtZVN0YXR1cy5XQUlUSU5HX0ZPUl9TVEFSVDtcbiAgY29uc3QgcGxheWVyc0xpc3QgPSBnYW1lU3RhdGU/LmdldEJhc2VTdGF0ZSgpLmdldFBsYXllcnNMaXN0KCkgPz8gW107XG4gIGNvbnN0IHRpY2sgPSBnYW1lU3RhdGU/LmdldEJhc2VTdGF0ZSgpLmdldFRpY2soKSA/PyAwO1xuXG4gIGlmIChpc0xvYWRpbmcgfHwgaXNTb3VuZExvYWRpbmcpIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJtZXNzYWdlIGFicy1jZW50ZXIgd2hpdGVcIj5IYXVudGluZyBob3VzZXMuLi48L2Rpdj47XG4gIH1cblxuICBjb25zdCB0aWxlU2l6ZSA9IGJvYXJkID8gZ2V0VGlsZVNpemUoYm9hcmQsIHNjcmVlbkRpbWVuc2lvbnMpIDogMDtcblxuICBjb25zdCB7IGNsYXNzTmFtZTogbG9iYnlDbGFzc05hbWUsIHN0eWxlczogbG9iYnlTdHlsZXMgfSA9IGNzcy5yZXNvbHZlYFxuICAgIGRpdiB7XG4gICAgICBjb2xvcjogI2ZmZjtcbiAgICAgIHRvcDogNzUlO1xuICAgIH1cbiAgYDtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7Z2FtZU92ZXIgPyAoXG4gICAgICAgIDw+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3aW5Mb3NlIG1lc3NhZ2UgY2VudGVyXCI+XG4gICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgR0FNRSB7c3RhdHVzID09PSBHYW1lU3RhdHVzLkNPTVBMRVRFX0xPU1MgPyAnT1ZFUicgOiAnQ09NUExFVEUnfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90dG9tIG1lc3NhZ2UgY2VudGVyXCI+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm1lbnUtYnV0dG9uXCIgb25DbGljaz17b25SZXN0YXJ0fT5cbiAgICAgICAgICAgICAgQmFjayB0byBsb2JieVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvPlxuICAgICAgKSA6IHN0YXRlID09PSBHaG9zdFBlcHBlclN0YXRlLldBSVRJTkdfRk9SX1NUQVJUICYmIHRpY2sgPT09IDAgPyAoXG4gICAgICAgIDxMb2JieVxuICAgICAgICAgIHBsYXllclN0YXJ0ZWQ9e3BsYXllclN0YXJ0ZWR9XG4gICAgICAgICAgaXNDb25uZWN0ZWQ9e2lzQ29ubmVjdGVkfVxuICAgICAgICAgIHBsYXllcnM9e3BsYXllcnNMaXN0fVxuICAgICAgICAgIGN1cnJlbnRQbGF5ZXI9e2N1cnJlbnRQbGF5ZXJ9XG4gICAgICAgICAgcGxheWVyU3ByaXRlPXt7XG4gICAgICAgICAgICB1cmw6IGltYWdlc1sncGxheWVycyddLnNyYyxcbiAgICAgICAgICAgIHdpZHRoOiBzY3JlZW5EaW1lbnNpb25zLndpZHRoIC8gMTAsXG4gICAgICAgICAgICBoZWlnaHQ6IHNjcmVlbkRpbWVuc2lvbnMud2lkdGggLyAxMCxcbiAgICAgICAgICB9fVxuICAgICAgICAgIHN0YXJ0QnV0dG9uPXtcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwibWVudS1idXR0b25cIiBvbkNsaWNrPXtvblN0YXJ0R2FtZX0+XG4gICAgICAgICAgICAgIFJlYWR5IHRvIHN0YXJ0XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uZmlybUJ1dHRvbj17XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm1lbnUtYnV0dG9uXCIgb25DbGljaz17b25TdGFydEdhbWV9PlxuICAgICAgICAgICAgICBTdGFydCBnYW1lXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVqb2luQnV0dG9uPXtcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwibWVudS1idXR0b25cIiBvbkNsaWNrPXtyZXN0YXJ0R2FtZX0+XG4gICAgICAgICAgICAgIFJlam9pbiBsb2JieVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgfVxuICAgICAgICAgIGNsYXNzTmFtZT17bG9iYnlDbGFzc05hbWV9XG4gICAgICAgIC8+XG4gICAgICApIDogKFxuICAgICAgICBzdGF0ZSA+PSBHaG9zdFBlcHBlclN0YXRlLk1PVklORyAmJiAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIHsvKiBBZGQgZW1wdHkgc3BhbiB0byB0cmlnZ2VyIGxvYWRpbmcgZm9udCAqL31cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInBpZ3BlblwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDxGYWRlciBuYW1lPVwidWktZmFkZVwiPlxuICAgICAgICAgICAgICB7c3RhdGUgPT09IEdob3N0UGVwcGVyU3RhdGUuT01FTiAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSBwbGF5ZXJzXCI+XG4gICAgICAgICAgICAgICAgICB7cGxheWVycy5tYXAoKHBsYXllciwgaSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICAgICAga2V5PXtgcGxheWVyLSR7aX1gfVxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17cGxheWVyLmdldElzRGVhZCgpID8gJ2RlYWQnIDogJyd9XG4gICAgICAgICAgICAgICAgICAgICAgc3JjPXtpbWFnZXNbRE9MTF9JTUFHRVNbcGxheWVyLmdldERvbGwoKV1dLnNyY31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICkpfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICB7LyogVE9ETzogc2hvdyBVSSBtZXNzYWdlcyBpbiBhIHByZXR0eSBiYW5uZXIgKi99XG4gICAgICAgICAgICAgIHtzaG93Q3VycmVudFR1cm4gJiYgY3VycmVudFR1cm4gIT09IG51bGwgJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidWkgYWJzLWNlbnRlciBiYW5uZXJcIiBrZXk9XCJ0dXJuLWluZGljYXRvclwiPlxuICAgICAgICAgICAgICAgICAgPGgxPlxuICAgICAgICAgICAgICAgICAgICBUdXJuIHt0dXJuQ291bnR9OiB7RE9MTF9OQU1FU1tjdXJyZW50VHVybl19J3MgdHVybiFcbiAgICAgICAgICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIHtvbWVuTmFtZSAmJiAoXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ1aSBhYnMtY2VudGVyIGJhbm5lclwiIGtleT1cIm9tZW5cIj5cbiAgICAgICAgICAgICAgICAgIDxoMz5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzc05hbWU9XCJjcm93XCIgYWx0PVwiQ3Jvd1wiIHNyYz17aW1hZ2VzWydjcm93J10uc3JjfSAvPlxuICAgICAgICAgICAgICAgICAgICBPbWVuIGZvdW5kIVxuICAgICAgICAgICAgICAgICAgPC9oMz5cbiAgICAgICAgICAgICAgICAgIDxoMT57b21lbk5hbWV9PC9oMT5cbiAgICAgICAgICAgICAgICAgIDxoMz5cbiAgICAgICAgICAgICAgICAgICAge0RPTExfTkFNRVNbY3VycmVudFR1cm4hXX0gdnMuIHtUUkFJVE9SX05BTUV9XG4gICAgICAgICAgICAgICAgICA8L2gzPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICB7c3RhdGUgPT09IEdob3N0UGVwcGVyU3RhdGUuR0FNRV9XSU4gJiYgKFxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidWkgYWJzLWNlbnRlciBiYW5uZXJcIiBrZXk9XCJ3aW4tdGV4dFwiPlxuICAgICAgICAgICAgICAgICAgPGgzPkl0ZW0gZm91bmQhPC9oMz5cbiAgICAgICAgICAgICAgICAgIDxoMT5Gcm9udCBkb29yIGtleSBvYnRhaW5lZDwvaDE+XG4gICAgICAgICAgICAgICAgICA8cD5cbiAgICAgICAgICAgICAgICAgICAgV2l0aCBhIHNjcmVhbSwgdGhlIHRyYWl0b3IgUmFxdWVsbGUgbGF1bmNoZXMgaGVyc2VsZiBhdCB5b3UsXG4gICAgICAgICAgICAgICAgICAgIGJ1dCB5b3UgbWFuYWdlIHRvIHNsaXAgYXdheS4gQ2x1dGNoaW5nIHRoZSBrZXkgdG8gdGhlIGZyb250XG4gICAgICAgICAgICAgICAgICAgIGRvb3IsIHlvdSB0dXJuIHRoZSBsb2NrIGFuZCBzdHVtYmxlIG91dHNpZGUsIGxlYXZpbmcgYmVoaW5kXG4gICAgICAgICAgICAgICAgICAgIHRoZSBkYXJrLCBkYXJrIG9tZW5zLi4uXG4gICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICA8aDM+WU9VIEhBVkUgRVNDQVBFRCBUSEUgTUFOU0lPTi48L2gzPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICB7c3RhdGUgIT09IEdob3N0UGVwcGVyU3RhdGUuR0FNRV9XSU4gJiYgb21lbk1pbmlnYW1lICYmIChcbiAgICAgICAgICAgICAgICA8TWluaWdhbWVcbiAgICAgICAgICAgICAgICAgIG9tZW5NaW5pZ2FtZT17b21lbk1pbmlnYW1lfVxuICAgICAgICAgICAgICAgICAgb21lblR5cGU9e29tZW5UeXBlfVxuICAgICAgICAgICAgICAgICAgY3VycmVudFR1cm49e2N1cnJlbnRUdXJuIX1cbiAgICAgICAgICAgICAgICAgIGlzQ3VycmVudFR1cm49e2N1cnJlbnRQbGF5ZXIgPT09IGN1cnJlbnRUdXJufVxuICAgICAgICAgICAgICAgICAgb25JbnB1dD17b25JbnB1dH1cbiAgICAgICAgICAgICAgICAgIHNjcmVlbkRpbWVuc2lvbnM9e3NjcmVlbkRpbWVuc2lvbnN9XG4gICAgICAgICAgICAgICAgICBzb3VuZHM9e3NvdW5kc31cbiAgICAgICAgICAgICAgICAgIHRpbWVyPXt0aW1lcn1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9GYWRlcj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidWkgdHVybi1jb3VudFwiPlxuICAgICAgICAgICAgICA8aDM+VHVybjoge3R1cm5Db3VudH08L2gzPlxuICAgICAgICAgICAgICB7Y3VycmVudFR1cm4gIT09IG51bGwgJiYgKFxuICAgICAgICAgICAgICAgIDxoMz5cbiAgICAgICAgICAgICAgICAgIEN1cnJlbnQgcGxheWVyOiB7RE9MTF9OQU1FU1tjdXJyZW50VHVybl19XG4gICAgICAgICAgICAgICAgICB7Y3VycmVudFR1cm4gPT09IGN1cnJlbnRQbGF5ZXIgPyAnICh5b3UpJyA6ICcnfVxuICAgICAgICAgICAgICAgIDwvaDM+XG4gICAgICAgICAgICAgICl9XG5cbiAgICAgICAgICAgICAge3N0YXRlID09PSBHaG9zdFBlcHBlclN0YXRlLk1PVklORyAmJiAhZ2FtZU92ZXIgJiYgKFxuICAgICAgICAgICAgICAgIDxoMz5BcnJvdyBrZXlzL1dBU0QgdG8gbW92ZTwvaDM+XG4gICAgICAgICAgICAgICl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8Lz5cbiAgICAgICAgKVxuICAgICAgKX1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuY2VudGVyIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICAgIHRvcDogNTAlO1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC5ib3R0b20ge1xuICAgICAgICAgIHRvcDogODAlO1xuICAgICAgICB9XG5cbiAgICAgICAgLm1lc3NhZ2Uge1xuICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMjVweDtcbiAgICAgICAgfVxuXG4gICAgICAgIC53aW5Mb3NlLm1lc3NhZ2Uge1xuICAgICAgICAgIGNvbG9yOiAke3N0YXR1cyA9PT0gR2FtZVN0YXR1cy5DT01QTEVURV9XSU4gPyAnZ3JlZW4nIDogJ3JlZCd9O1xuICAgICAgICAgIGZvbnQtc2l6ZTogNTBweDtcbiAgICAgICAgICB0b3A6IDIwJTtcbiAgICAgICAgfVxuXG4gICAgICAgIC51aSB7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICB9XG5cbiAgICAgICAgaDEsXG4gICAgICAgIGgzIHtcbiAgICAgICAgICBtYXJnaW46IDRweCAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLmNyb3cge1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogOHB4O1xuICAgICAgICAgIHdpZHRoOiA2MHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLnR1cm4tY291bnQge1xuICAgICAgICAgIGJvdHRvbTogMjBweDtcbiAgICAgICAgICBsZWZ0OiAyMHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgLnR1cm4tY291bnQgaDMge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMi41dm1pbjtcbiAgICAgICAgICBtYXJnaW46IDRweCAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLm1lbnUtYnV0dG9uIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgICAgY29sb3I6IHJlZDtcbiAgICAgICAgICBmb250LXNpemU6IDI0cHg7XG4gICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgaGVpZ2h0OiAzMnB4O1xuICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIH1cblxuICAgICAgICAubWVudS1idXR0b246aG92ZXIge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMjZweDtcbiAgICAgICAgfVxuXG4gICAgICAgIC5iYW5uZXIge1xuICAgICAgICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC43NSk7XG4gICAgICAgICAgY29sb3I6ICMwMDA7XG4gICAgICAgICAgcGFkZGluZzogOHB4O1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5wbGF5ZXJzIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC5wbGF5ZXJzIGltZyB7XG4gICAgICAgICAgd2lkdGg6ICR7c2NyZWVuRGltZW5zaW9ucy53aWR0aCAvIDh9cHg7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMnB4O1xuICAgICAgICAgIHRyYW5zaXRpb246IG9wYWNpdHkgZmlsdGVyIDMwMG1zIGVhc2UtaW4tb3V0O1xuICAgICAgICB9XG5cbiAgICAgICAgLnBsYXllcnMgaW1nLmRlYWQge1xuICAgICAgICAgIG9wYWNpdHk6IDYwJTtcbiAgICAgICAgICBmaWx0ZXI6IGdyYXlzY2FsZSgxKTtcbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgICAge2xvYmJ5U3R5bGVzfVxuICAgICAge2ZvbnRTdHlsZX1cbiAgICA8Lz5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgR2FtZTogR2hvc3RQZXBwZXJHYW1lLFxuICBTdGF0ZTogR2hvc3RQZXBwZXJHYW1lU3RhdGUsXG59O1xuIl19 */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/ghostpepper.tsx */\")), lobbyStyles, fontStyle);\n};\n\n_s2(GhostPepperGame, \"9IUWBbLNqty76O1iv+8iLcT91TU=\", false, function () {\n  return [utils_assets__WEBPACK_IMPORTED_MODULE_13__[\"useImages\"], utils_assets__WEBPACK_IMPORTED_MODULE_13__[\"useSounds\"], utils_timer__WEBPACK_IMPORTED_MODULE_11__[\"useTimer\"], utils_keyboard__WEBPACK_IMPORTED_MODULE_14__[\"useEventListener\"], utils_animation__WEBPACK_IMPORTED_MODULE_12__[\"useAnimationFrame\"]];\n});\n\n_c2 = GhostPepperGame;\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  Game: GhostPepperGame,\n  State: schema_protos_ghostpepper_pb__WEBPACK_IMPORTED_MODULE_7__[\"GhostPepperGameState\"]\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Minigame\");\n$RefreshReg$(_c2, \"GhostPepperGame\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/groupsolve/ghostpepper.tsx\n");

/***/ }),

/***/ "./components/groupsolve/lobby.tsx":
/*!*****************************************!*\
  !*** ./components/groupsolve/lobby.tsx ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ \"./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\nvar _this = undefined,\n    _jsxFileName = \"/vagrant/client/components/groupsolve/lobby.tsx\";\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement;\n\nvar MAX_PLAYERS = 6;\n\nvar Lobby = function Lobby(_ref) {\n  var playerStarted = _ref.playerStarted,\n      isConnected = _ref.isConnected,\n      title = _ref.title,\n      players = _ref.players,\n      currentPlayer = _ref.currentPlayer,\n      playerSprite = _ref.playerSprite,\n      startButton = _ref.startButton,\n      confirmButton = _ref.confirmButton,\n      rejoinButton = _ref.rejoinButton,\n      className = _ref.className,\n      _ref$requiredPlayers = _ref.requiredPlayers,\n      requiredPlayers = _ref$requiredPlayers === void 0 ? 1 : _ref$requiredPlayers,\n      props = Object(_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref, [\"playerStarted\", \"isConnected\", \"title\", \"players\", \"currentPlayer\", \"playerSprite\", \"startButton\", \"confirmButton\", \"rejoinButton\", \"className\", \"requiredPlayers\"]);\n\n  var allStarted = isConnected && players.every(function (player) {\n    return player.getReady();\n  }) && players.length >= requiredPlayers;\n  var playersNeeded = Math.max(requiredPlayers - 1, players.filter(function (player) {\n    return !player.getReady();\n  }).length);\n  return __jsx(\"div\", Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props, {\n    className: \"jsx-243751013\" + \" \" + (props && props.className != null && props.className || \"abs-center center \".concat(className !== null && className !== void 0 ? className : '')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }), title, allStarted ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, confirmButton, __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"Note: Once you begin a session, others won't be able to join until it ends.\")) : playerStarted && players.length >= requiredPlayers ? \"Waiting for \".concat(playersNeeded, \" other player\").concat(playersNeeded === 1 ? '' : 's', \" to join...\") : playerStarted ? \"(Minimum of \".concat(requiredPlayers, \" players required)\") : isConnected ? startButton : __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, rejoinButton, __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Game in session... \", __jsx(\"br\", {\n    className: \"jsx-243751013\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 32\n    }\n  }), \"Please wait for the current session to complete.\")), players.length > 0 && __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"(\", players.length, \" player\", players.length === 1 ? ' ' : 's ', \"in lobby)\"), playerSprite && __jsx(\"div\", {\n    className: \"jsx-243751013\" + \" \" + \"players flex-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, players.map(function (player, i) {\n    return __jsx(\"div\", {\n      key: i,\n      style: {\n        backgroundPosition: \"\".concat(i * 100 / (MAX_PLAYERS - 1), \"%\"),\n        backgroundImage: \"url(\".concat(playerSprite.url, \")\"),\n        backgroundSize: '600% 100%',\n        transform: \"scale(\".concat(i === currentPlayer ? 1 : 0.7, \")\"),\n        filter: player.getReady() ? 'none' : 'grayscale(1) opacity(80%)',\n        width: playerSprite.width,\n        height: playerSprite.height\n      },\n      className: \"jsx-243751013\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    });\n  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"243751013\",\n    __self: _this\n  }, \".small.jsx-243751013{font-size:1.8vmin;line-height:2.2vmin;margin-top:2.8vmin;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlHa0IsQUFHNkIsa0JBQ0Usb0JBQ0QsbUJBQ3JCIiwiZmlsZSI6Ii92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9nYW1lX3BiJztcbmltcG9ydCB7IGdldEltYWdlT2Zmc2V0IH0gZnJvbSAndXRpbHMvZ2FtZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHBsYXllclN0YXJ0ZWQ6IGJvb2xlYW47XG4gIGlzQ29ubmVjdGVkOiBib29sZWFuO1xuICB0aXRsZT86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcGxheWVyczogUGxheWVyW107XG4gIGN1cnJlbnRQbGF5ZXI6IG51bWJlcjtcbiAgcGxheWVyU3ByaXRlPzoge1xuICAgIHVybDogc3RyaW5nO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gIH07XG4gIHN0YXJ0QnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGNvbmZpcm1CdXR0b246IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcmVqb2luQnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIHJlcXVpcmVkUGxheWVycz86IG51bWJlcjtcbn1cblxuY29uc3QgTUFYX1BMQVlFUlMgPSA2O1xuXG5jb25zdCBMb2JieTogRnVuY3Rpb25Db21wb25lbnQ8XG4gIFByb3BzICYgT21pdDxSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+LCAndGl0bGUnPlxuPiA9ICh7XG4gIHBsYXllclN0YXJ0ZWQsXG4gIGlzQ29ubmVjdGVkLFxuICB0aXRsZSxcbiAgcGxheWVycyxcbiAgY3VycmVudFBsYXllcixcbiAgcGxheWVyU3ByaXRlLFxuICBzdGFydEJ1dHRvbixcbiAgY29uZmlybUJ1dHRvbixcbiAgcmVqb2luQnV0dG9uLFxuICBjbGFzc05hbWUsXG4gIHJlcXVpcmVkUGxheWVycyA9IDEsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGFsbFN0YXJ0ZWQgPVxuICAgIGlzQ29ubmVjdGVkICYmXG4gICAgcGxheWVycy5ldmVyeSgocGxheWVyKSA9PiBwbGF5ZXIuZ2V0UmVhZHkoKSkgJiZcbiAgICBwbGF5ZXJzLmxlbmd0aCA+PSByZXF1aXJlZFBsYXllcnM7XG5cbiAgY29uc3QgcGxheWVyc05lZWRlZCA9IE1hdGgubWF4KFxuICAgIHJlcXVpcmVkUGxheWVycyAtIDEsXG4gICAgcGxheWVycy5maWx0ZXIoKHBsYXllcikgPT4gIXBsYXllci5nZXRSZWFkeSgpKS5sZW5ndGhcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgYWJzLWNlbnRlciBjZW50ZXIgJHtjbGFzc05hbWUgPz8gJyd9YH0gey4uLnByb3BzfT5cbiAgICAgIHt0aXRsZX1cbiAgICAgIHthbGxTdGFydGVkID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtjb25maXJtQnV0dG9ufVxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgICBOb3RlOiBPbmNlIHlvdSBiZWdpbiBhIHNlc3Npb24sIG90aGVycyB3b24ndCBiZSBhYmxlIHRvIGpvaW4gdW50aWxcbiAgICAgICAgICAgIGl0IGVuZHMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiBwbGF5ZXJTdGFydGVkICYmIHBsYXllcnMubGVuZ3RoID49IHJlcXVpcmVkUGxheWVycyA/IChcbiAgICAgICAgYFdhaXRpbmcgZm9yICR7cGxheWVyc05lZWRlZH0gb3RoZXIgcGxheWVyJHtcbiAgICAgICAgICBwbGF5ZXJzTmVlZGVkID09PSAxID8gJycgOiAncydcbiAgICAgICAgfSB0byBqb2luLi4uYFxuICAgICAgKSA6IHBsYXllclN0YXJ0ZWQgPyAoXG4gICAgICAgIGAoTWluaW11bSBvZiAke3JlcXVpcmVkUGxheWVyc30gcGxheWVycyByZXF1aXJlZClgXG4gICAgICApIDogaXNDb25uZWN0ZWQgPyAoXG4gICAgICAgIHN0YXJ0QnV0dG9uXG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZWpvaW5CdXR0b259XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj5cbiAgICAgICAgICAgIEdhbWUgaW4gc2Vzc2lvbi4uLiA8YnIgLz5cbiAgICAgICAgICAgIFBsZWFzZSB3YWl0IGZvciB0aGUgY3VycmVudCBzZXNzaW9uIHRvIGNvbXBsZXRlLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3BsYXllcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgKHtwbGF5ZXJzLmxlbmd0aH0gcGxheWVye3BsYXllcnMubGVuZ3RoID09PSAxID8gJyAnIDogJ3MgJ31cbiAgICAgICAgICBpbiBsb2JieSlcbiAgICAgICAgPC9wPlxuICAgICAgKX1cbiAgICAgIHtwbGF5ZXJTcHJpdGUgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllcnMgZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICB7cGxheWVycy5tYXAoKHBsYXllciwgaSkgPT4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBgJHsoaSAqIDEwMCkgLyAoTUFYX1BMQVlFUlMgLSAxKX0lYCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwbGF5ZXJTcHJpdGUudXJsfSlgLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjAwJSAxMDAlJyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2kgPT09IGN1cnJlbnRQbGF5ZXIgPyAxIDogMC43fSlgLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogcGxheWVyLmdldFJlYWR5KClcbiAgICAgICAgICAgICAgICAgID8gJ25vbmUnXG4gICAgICAgICAgICAgICAgICA6ICdncmF5c2NhbGUoMSkgb3BhY2l0eSg4MCUpJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogcGxheWVyU3ByaXRlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGxheWVyU3ByaXRlLmhlaWdodCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuc21hbGwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS44dm1pbjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMi4ydm1pbjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAyLjh2bWluO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2JieTtcbiJdfQ== */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/lobby.tsx */\"));\n};\n\n_c = Lobby;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Lobby);\n\nvar _c;\n\n$RefreshReg$(_c, \"Lobby\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9ncm91cHNvbHZlL2xvYmJ5LnRzeD85NjdiIl0sIm5hbWVzIjpbIk1BWF9QTEFZRVJTIiwiTG9iYnkiLCJwbGF5ZXJTdGFydGVkIiwiaXNDb25uZWN0ZWQiLCJ0aXRsZSIsInBsYXllcnMiLCJjdXJyZW50UGxheWVyIiwicGxheWVyU3ByaXRlIiwic3RhcnRCdXR0b24iLCJjb25maXJtQnV0dG9uIiwicmVqb2luQnV0dG9uIiwiY2xhc3NOYW1lIiwicmVxdWlyZWRQbGF5ZXJzIiwicHJvcHMiLCJhbGxTdGFydGVkIiwiZXZlcnkiLCJwbGF5ZXIiLCJnZXRSZWFkeSIsImxlbmd0aCIsInBsYXllcnNOZWVkZWQiLCJNYXRoIiwibWF4IiwiZmlsdGVyIiwibWFwIiwiaSIsImJhY2tncm91bmRQb3NpdGlvbiIsImJhY2tncm91bmRJbWFnZSIsInVybCIsImJhY2tncm91bmRTaXplIiwidHJhbnNmb3JtIiwid2lkdGgiLCJoZWlnaHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBc0JBLElBQU1BLFdBQVcsR0FBRyxDQUFwQjs7QUFFQSxJQUFNQyxLQUVMLEdBQUcsU0FGRUEsS0FFRixPQWFFO0FBQUEsTUFaSkMsYUFZSSxRQVpKQSxhQVlJO0FBQUEsTUFYSkMsV0FXSSxRQVhKQSxXQVdJO0FBQUEsTUFWSkMsS0FVSSxRQVZKQSxLQVVJO0FBQUEsTUFUSkMsT0FTSSxRQVRKQSxPQVNJO0FBQUEsTUFSSkMsYUFRSSxRQVJKQSxhQVFJO0FBQUEsTUFQSkMsWUFPSSxRQVBKQSxZQU9JO0FBQUEsTUFOSkMsV0FNSSxRQU5KQSxXQU1JO0FBQUEsTUFMSkMsYUFLSSxRQUxKQSxhQUtJO0FBQUEsTUFKSkMsWUFJSSxRQUpKQSxZQUlJO0FBQUEsTUFISkMsU0FHSSxRQUhKQSxTQUdJO0FBQUEsa0NBRkpDLGVBRUk7QUFBQSxNQUZKQSxlQUVJLHFDQUZjLENBRWQ7QUFBQSxNQUREQyxLQUNDOztBQUNKLE1BQU1DLFVBQVUsR0FDZFgsV0FBVyxJQUNYRSxPQUFPLENBQUNVLEtBQVIsQ0FBYyxVQUFDQyxNQUFEO0FBQUEsV0FBWUEsTUFBTSxDQUFDQyxRQUFQLEVBQVo7QUFBQSxHQUFkLENBREEsSUFFQVosT0FBTyxDQUFDYSxNQUFSLElBQWtCTixlQUhwQjtBQUtBLE1BQU1PLGFBQWEsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQ3BCVCxlQUFlLEdBQUcsQ0FERSxFQUVwQlAsT0FBTyxDQUFDaUIsTUFBUixDQUFlLFVBQUNOLE1BQUQ7QUFBQSxXQUFZLENBQUNBLE1BQU0sQ0FBQ0MsUUFBUCxFQUFiO0FBQUEsR0FBZixFQUErQ0MsTUFGM0IsQ0FBdEI7QUFLQSxTQUNFLG9HQUE0REwsS0FBNUQ7QUFBQSwySEFBcUNGLFNBQXJDLGFBQXFDQSxTQUFyQyxjQUFxQ0EsU0FBckMsR0FBa0QsRUFBbEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUNHUCxLQURILEVBRUdVLFVBQVUsR0FDVCxtRUFDR0wsYUFESCxFQUVFO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1GQUZGLENBRFMsR0FRUFAsYUFBYSxJQUFJRyxPQUFPLENBQUNhLE1BQVIsSUFBa0JOLGVBQW5DLHlCQUNhTyxhQURiLDBCQUVBQSxhQUFhLEtBQUssQ0FBbEIsR0FBc0IsRUFBdEIsR0FBMkIsR0FGM0IsbUJBSUFqQixhQUFhLHlCQUNBVSxlQURBLDBCQUViVCxXQUFXLEdBQ2JLLFdBRGEsR0FHYixtRUFDR0UsWUFESCxFQUVFO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLDRCQUNxQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFEckIscURBRkYsQ0FuQkosRUEyQkdMLE9BQU8sQ0FBQ2EsTUFBUixHQUFpQixDQUFqQixJQUNDO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFVBQ0liLE9BQU8sQ0FBQ2EsTUFEWixhQUMyQmIsT0FBTyxDQUFDYSxNQUFSLEtBQW1CLENBQW5CLEdBQXVCLEdBQXZCLEdBQTZCLElBRHhELGNBNUJKLEVBaUNHWCxZQUFZLElBQ1g7QUFBQSx1Q0FBZSxxQkFBZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0dGLE9BQU8sQ0FBQ2tCLEdBQVIsQ0FBWSxVQUFDUCxNQUFELEVBQVNRLENBQVQ7QUFBQSxXQUNYO0FBQ0UsU0FBRyxFQUFFQSxDQURQO0FBRUUsV0FBSyxFQUFFO0FBQ0xDLDBCQUFrQixZQUFNRCxDQUFDLEdBQUcsR0FBTCxJQUFheEIsV0FBVyxHQUFHLENBQTNCLENBQUwsTUFEYjtBQUVMMEIsdUJBQWUsZ0JBQVNuQixZQUFZLENBQUNvQixHQUF0QixNQUZWO0FBR0xDLHNCQUFjLEVBQUUsV0FIWDtBQUlMQyxpQkFBUyxrQkFBV0wsQ0FBQyxLQUFLbEIsYUFBTixHQUFzQixDQUF0QixHQUEwQixHQUFyQyxNQUpKO0FBS0xnQixjQUFNLEVBQUVOLE1BQU0sQ0FBQ0MsUUFBUCxLQUNKLE1BREksR0FFSiwyQkFQQztBQVFMYSxhQUFLLEVBQUV2QixZQUFZLENBQUN1QixLQVJmO0FBU0xDLGNBQU0sRUFBRXhCLFlBQVksQ0FBQ3dCO0FBVGhCLE9BRlQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BRFc7QUFBQSxHQUFaLENBREgsQ0FsQ0o7QUFBQTtBQUFBO0FBQUEsMmpKQURGO0FBZ0VELENBMUZEOztLQUFNOUIsSztBQTRGU0Esb0VBQWYiLCJmaWxlIjoiLi9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9nYW1lX3BiJztcbmltcG9ydCB7IGdldEltYWdlT2Zmc2V0IH0gZnJvbSAndXRpbHMvZ2FtZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHBsYXllclN0YXJ0ZWQ6IGJvb2xlYW47XG4gIGlzQ29ubmVjdGVkOiBib29sZWFuO1xuICB0aXRsZT86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcGxheWVyczogUGxheWVyW107XG4gIGN1cnJlbnRQbGF5ZXI6IG51bWJlcjtcbiAgcGxheWVyU3ByaXRlPzoge1xuICAgIHVybDogc3RyaW5nO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gIH07XG4gIHN0YXJ0QnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGNvbmZpcm1CdXR0b246IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcmVqb2luQnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIHJlcXVpcmVkUGxheWVycz86IG51bWJlcjtcbn1cblxuY29uc3QgTUFYX1BMQVlFUlMgPSA2O1xuXG5jb25zdCBMb2JieTogRnVuY3Rpb25Db21wb25lbnQ8XG4gIFByb3BzICYgT21pdDxSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+LCAndGl0bGUnPlxuPiA9ICh7XG4gIHBsYXllclN0YXJ0ZWQsXG4gIGlzQ29ubmVjdGVkLFxuICB0aXRsZSxcbiAgcGxheWVycyxcbiAgY3VycmVudFBsYXllcixcbiAgcGxheWVyU3ByaXRlLFxuICBzdGFydEJ1dHRvbixcbiAgY29uZmlybUJ1dHRvbixcbiAgcmVqb2luQnV0dG9uLFxuICBjbGFzc05hbWUsXG4gIHJlcXVpcmVkUGxheWVycyA9IDEsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGFsbFN0YXJ0ZWQgPVxuICAgIGlzQ29ubmVjdGVkICYmXG4gICAgcGxheWVycy5ldmVyeSgocGxheWVyKSA9PiBwbGF5ZXIuZ2V0UmVhZHkoKSkgJiZcbiAgICBwbGF5ZXJzLmxlbmd0aCA+PSByZXF1aXJlZFBsYXllcnM7XG5cbiAgY29uc3QgcGxheWVyc05lZWRlZCA9IE1hdGgubWF4KFxuICAgIHJlcXVpcmVkUGxheWVycyAtIDEsXG4gICAgcGxheWVycy5maWx0ZXIoKHBsYXllcikgPT4gIXBsYXllci5nZXRSZWFkeSgpKS5sZW5ndGhcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgYWJzLWNlbnRlciBjZW50ZXIgJHtjbGFzc05hbWUgPz8gJyd9YH0gey4uLnByb3BzfT5cbiAgICAgIHt0aXRsZX1cbiAgICAgIHthbGxTdGFydGVkID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtjb25maXJtQnV0dG9ufVxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgICBOb3RlOiBPbmNlIHlvdSBiZWdpbiBhIHNlc3Npb24sIG90aGVycyB3b24ndCBiZSBhYmxlIHRvIGpvaW4gdW50aWxcbiAgICAgICAgICAgIGl0IGVuZHMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiBwbGF5ZXJTdGFydGVkICYmIHBsYXllcnMubGVuZ3RoID49IHJlcXVpcmVkUGxheWVycyA/IChcbiAgICAgICAgYFdhaXRpbmcgZm9yICR7cGxheWVyc05lZWRlZH0gb3RoZXIgcGxheWVyJHtcbiAgICAgICAgICBwbGF5ZXJzTmVlZGVkID09PSAxID8gJycgOiAncydcbiAgICAgICAgfSB0byBqb2luLi4uYFxuICAgICAgKSA6IHBsYXllclN0YXJ0ZWQgPyAoXG4gICAgICAgIGAoTWluaW11bSBvZiAke3JlcXVpcmVkUGxheWVyc30gcGxheWVycyByZXF1aXJlZClgXG4gICAgICApIDogaXNDb25uZWN0ZWQgPyAoXG4gICAgICAgIHN0YXJ0QnV0dG9uXG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZWpvaW5CdXR0b259XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj5cbiAgICAgICAgICAgIEdhbWUgaW4gc2Vzc2lvbi4uLiA8YnIgLz5cbiAgICAgICAgICAgIFBsZWFzZSB3YWl0IGZvciB0aGUgY3VycmVudCBzZXNzaW9uIHRvIGNvbXBsZXRlLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3BsYXllcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgKHtwbGF5ZXJzLmxlbmd0aH0gcGxheWVye3BsYXllcnMubGVuZ3RoID09PSAxID8gJyAnIDogJ3MgJ31cbiAgICAgICAgICBpbiBsb2JieSlcbiAgICAgICAgPC9wPlxuICAgICAgKX1cbiAgICAgIHtwbGF5ZXJTcHJpdGUgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllcnMgZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICB7cGxheWVycy5tYXAoKHBsYXllciwgaSkgPT4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBgJHsoaSAqIDEwMCkgLyAoTUFYX1BMQVlFUlMgLSAxKX0lYCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwbGF5ZXJTcHJpdGUudXJsfSlgLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjAwJSAxMDAlJyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2kgPT09IGN1cnJlbnRQbGF5ZXIgPyAxIDogMC43fSlgLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogcGxheWVyLmdldFJlYWR5KClcbiAgICAgICAgICAgICAgICAgID8gJ25vbmUnXG4gICAgICAgICAgICAgICAgICA6ICdncmF5c2NhbGUoMSkgb3BhY2l0eSg4MCUpJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogcGxheWVyU3ByaXRlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGxheWVyU3ByaXRlLmhlaWdodCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuc21hbGwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS44dm1pbjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMi4ydm1pbjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAyLjh2bWluO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2JieTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/groupsolve/lobby.tsx\n");

/***/ }),

/***/ "./schema/protos/ghostpepper_pb.js":
/*!*****************************************!*\
  !*** ./schema/protos/ghostpepper_pb.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {// source: ghostpepper.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = __webpack_require__(/*! google-protobuf */ \"./node_modules/google-protobuf/google-protobuf.js\");\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar game_pb = __webpack_require__(/*! ./game_pb.js */ \"./schema/protos/game_pb.js\");\n\ngoog.object.extend(proto, game_pb);\n\nvar math_pb = __webpack_require__(/*! ./math_pb.js */ \"./schema/protos/math_pb.js\");\n\ngoog.object.extend(proto, math_pb);\ngoog.exportSymbol('proto.Doll', null, global);\ngoog.exportSymbol('proto.GhostPepperGameAction', null, global);\ngoog.exportSymbol('proto.GhostPepperGameAction.ActionCase', null, global);\ngoog.exportSymbol('proto.GhostPepperGameState', null, global);\ngoog.exportSymbol('proto.GhostPepperGameState.GhostPepperState', null, global);\ngoog.exportSymbol('proto.HouseBoard', null, global);\ngoog.exportSymbol('proto.HousePlayer', null, global);\ngoog.exportSymbol('proto.HouseTile', null, global);\ngoog.exportSymbol('proto.OmenMinigame', null, global);\ngoog.exportSymbol('proto.OmenMinigame.OptionChoice', null, global);\ngoog.exportSymbol('proto.OmenType', null, global);\ngoog.exportSymbol('proto.RoomTile', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.HouseTile = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.HouseTile, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.HouseTile.displayName = 'proto.HouseTile';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.HousePlayer = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.HousePlayer, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.HousePlayer.displayName = 'proto.HousePlayer';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.HouseBoard = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.HouseBoard.repeatedFields_, null);\n};\n\ngoog.inherits(proto.HouseBoard, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.HouseBoard.displayName = 'proto.HouseBoard';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.OmenMinigame = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.OmenMinigame.repeatedFields_, null);\n};\n\ngoog.inherits(proto.OmenMinigame, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.OmenMinigame.displayName = 'proto.OmenMinigame';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.GhostPepperGameState = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.GhostPepperGameState.repeatedFields_, null);\n};\n\ngoog.inherits(proto.GhostPepperGameState, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.GhostPepperGameState.displayName = 'proto.GhostPepperGameState';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.GhostPepperGameAction = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.GhostPepperGameAction.oneofGroups_);\n};\n\ngoog.inherits(proto.GhostPepperGameAction, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.GhostPepperGameAction.displayName = 'proto.GhostPepperGameAction';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.HouseTile.prototype.toObject = function (opt_includeInstance) {\n    return proto.HouseTile.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.HouseTile} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.HouseTile.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      room: jspb.Message.getFieldWithDefault(msg, 1, 0),\n      position: (f = msg.getPosition()) && math_pb.Coordinate.toObject(includeInstance, f),\n      doors: jspb.Message.getFieldWithDefault(msg, 3, 0),\n      visible: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),\n      omenSolved: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.HouseTile}\n */\n\n\nproto.HouseTile.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.HouseTile();\n  return proto.HouseTile.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.HouseTile} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.HouseTile}\n */\n\n\nproto.HouseTile.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!proto.RoomTile} */\n        reader.readEnum();\n        msg.setRoom(value);\n        break;\n\n      case 2:\n        var value = new math_pb.Coordinate();\n        reader.readMessage(value, math_pb.Coordinate.deserializeBinaryFromReader);\n        msg.setPosition(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setDoors(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setVisible(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setOmenSolved(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.HouseTile.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.HouseTile.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.HouseTile} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.HouseTile.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getRoom();\n\n  if (f !== 0.0) {\n    writer.writeEnum(1, f);\n  }\n\n  f = message.getPosition();\n\n  if (f != null) {\n    writer.writeMessage(2, f, math_pb.Coordinate.serializeBinaryToWriter);\n  }\n\n  f = message.getDoors();\n\n  if (f !== 0) {\n    writer.writeInt32(3, f);\n  }\n\n  f = message.getVisible();\n\n  if (f) {\n    writer.writeBool(4, f);\n  }\n\n  f = message.getOmenSolved();\n\n  if (f) {\n    writer.writeBool(5, f);\n  }\n};\n/**\n * optional RoomTile room = 1;\n * @return {!proto.RoomTile}\n */\n\n\nproto.HouseTile.prototype.getRoom = function () {\n  return (\n    /** @type {!proto.RoomTile} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/**\n * @param {!proto.RoomTile} value\n * @return {!proto.HouseTile} returns this\n */\n\n\nproto.HouseTile.prototype.setRoom = function (value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n/**\n * optional Coordinate position = 2;\n * @return {?proto.Coordinate}\n */\n\n\nproto.HouseTile.prototype.getPosition = function () {\n  return (\n    /** @type{?proto.Coordinate} */\n    jspb.Message.getWrapperField(this, math_pb.Coordinate, 2)\n  );\n};\n/**\n * @param {?proto.Coordinate|undefined} value\n * @return {!proto.HouseTile} returns this\n*/\n\n\nproto.HouseTile.prototype.setPosition = function (value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.HouseTile} returns this\n */\n\n\nproto.HouseTile.prototype.clearPosition = function () {\n  return this.setPosition(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.HouseTile.prototype.hasPosition = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional int32 doors = 3;\n * @return {number}\n */\n\n\nproto.HouseTile.prototype.getDoors = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.HouseTile} returns this\n */\n\n\nproto.HouseTile.prototype.setDoors = function (value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n/**\n * optional bool visible = 4;\n * @return {boolean}\n */\n\n\nproto.HouseTile.prototype.getVisible = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 4, false)\n  );\n};\n/**\n * @param {boolean} value\n * @return {!proto.HouseTile} returns this\n */\n\n\nproto.HouseTile.prototype.setVisible = function (value) {\n  return jspb.Message.setProto3BooleanField(this, 4, value);\n};\n/**\n * optional bool omen_solved = 5;\n * @return {boolean}\n */\n\n\nproto.HouseTile.prototype.getOmenSolved = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 5, false)\n  );\n};\n/**\n * @param {boolean} value\n * @return {!proto.HouseTile} returns this\n */\n\n\nproto.HouseTile.prototype.setOmenSolved = function (value) {\n  return jspb.Message.setProto3BooleanField(this, 5, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.HousePlayer.prototype.toObject = function (opt_includeInstance) {\n    return proto.HousePlayer.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.HousePlayer} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.HousePlayer.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      doll: jspb.Message.getFieldWithDefault(msg, 1, 0),\n      position: (f = msg.getPosition()) && math_pb.Coordinate.toObject(includeInstance, f),\n      isDead: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.HousePlayer}\n */\n\n\nproto.HousePlayer.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.HousePlayer();\n  return proto.HousePlayer.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.HousePlayer} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.HousePlayer}\n */\n\n\nproto.HousePlayer.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!proto.Doll} */\n        reader.readEnum();\n        msg.setDoll(value);\n        break;\n\n      case 2:\n        var value = new math_pb.Coordinate();\n        reader.readMessage(value, math_pb.Coordinate.deserializeBinaryFromReader);\n        msg.setPosition(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {boolean} */\n        reader.readBool();\n        msg.setIsDead(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.HousePlayer.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.HousePlayer.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.HousePlayer} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.HousePlayer.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getDoll();\n\n  if (f !== 0.0) {\n    writer.writeEnum(1, f);\n  }\n\n  f = message.getPosition();\n\n  if (f != null) {\n    writer.writeMessage(2, f, math_pb.Coordinate.serializeBinaryToWriter);\n  }\n\n  f = message.getIsDead();\n\n  if (f) {\n    writer.writeBool(3, f);\n  }\n};\n/**\n * optional Doll doll = 1;\n * @return {!proto.Doll}\n */\n\n\nproto.HousePlayer.prototype.getDoll = function () {\n  return (\n    /** @type {!proto.Doll} */\n    jspb.Message.getFieldWithDefault(this, 1, 0)\n  );\n};\n/**\n * @param {!proto.Doll} value\n * @return {!proto.HousePlayer} returns this\n */\n\n\nproto.HousePlayer.prototype.setDoll = function (value) {\n  return jspb.Message.setProto3EnumField(this, 1, value);\n};\n/**\n * optional Coordinate position = 2;\n * @return {?proto.Coordinate}\n */\n\n\nproto.HousePlayer.prototype.getPosition = function () {\n  return (\n    /** @type{?proto.Coordinate} */\n    jspb.Message.getWrapperField(this, math_pb.Coordinate, 2)\n  );\n};\n/**\n * @param {?proto.Coordinate|undefined} value\n * @return {!proto.HousePlayer} returns this\n*/\n\n\nproto.HousePlayer.prototype.setPosition = function (value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.HousePlayer} returns this\n */\n\n\nproto.HousePlayer.prototype.clearPosition = function () {\n  return this.setPosition(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.HousePlayer.prototype.hasPosition = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional bool is_dead = 3;\n * @return {boolean}\n */\n\n\nproto.HousePlayer.prototype.getIsDead = function () {\n  return (\n    /** @type {boolean} */\n    jspb.Message.getBooleanFieldWithDefault(this, 3, false)\n  );\n};\n/**\n * @param {boolean} value\n * @return {!proto.HousePlayer} returns this\n */\n\n\nproto.HousePlayer.prototype.setIsDead = function (value) {\n  return jspb.Message.setProto3BooleanField(this, 3, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.HouseBoard.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.HouseBoard.prototype.toObject = function (opt_includeInstance) {\n    return proto.HouseBoard.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.HouseBoard} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.HouseBoard.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      tilesList: jspb.Message.toObjectList(msg.getTilesList(), proto.HouseTile.toObject, includeInstance),\n      width: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      height: jspb.Message.getFieldWithDefault(msg, 3, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.HouseBoard}\n */\n\n\nproto.HouseBoard.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.HouseBoard();\n  return proto.HouseBoard.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.HouseBoard} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.HouseBoard}\n */\n\n\nproto.HouseBoard.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new proto.HouseTile();\n        reader.readMessage(value, proto.HouseTile.deserializeBinaryFromReader);\n        msg.addTiles(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setWidth(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setHeight(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.HouseBoard.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.HouseBoard.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.HouseBoard} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.HouseBoard.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getTilesList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(1, f, proto.HouseTile.serializeBinaryToWriter);\n  }\n\n  f = message.getWidth();\n\n  if (f !== 0) {\n    writer.writeInt32(2, f);\n  }\n\n  f = message.getHeight();\n\n  if (f !== 0) {\n    writer.writeInt32(3, f);\n  }\n};\n/**\n * repeated HouseTile tiles = 1;\n * @return {!Array<!proto.HouseTile>}\n */\n\n\nproto.HouseBoard.prototype.getTilesList = function () {\n  return (\n    /** @type{!Array<!proto.HouseTile>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.HouseTile, 1)\n  );\n};\n/**\n * @param {!Array<!proto.HouseTile>} value\n * @return {!proto.HouseBoard} returns this\n*/\n\n\nproto.HouseBoard.prototype.setTilesList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 1, value);\n};\n/**\n * @param {!proto.HouseTile=} opt_value\n * @param {number=} opt_index\n * @return {!proto.HouseTile}\n */\n\n\nproto.HouseBoard.prototype.addTiles = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.HouseTile, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.HouseBoard} returns this\n */\n\n\nproto.HouseBoard.prototype.clearTilesList = function () {\n  return this.setTilesList([]);\n};\n/**\n * optional int32 width = 2;\n * @return {number}\n */\n\n\nproto.HouseBoard.prototype.getWidth = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.HouseBoard} returns this\n */\n\n\nproto.HouseBoard.prototype.setWidth = function (value) {\n  return jspb.Message.setProto3IntField(this, 2, value);\n};\n/**\n * optional int32 height = 3;\n * @return {number}\n */\n\n\nproto.HouseBoard.prototype.getHeight = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.HouseBoard} returns this\n */\n\n\nproto.HouseBoard.prototype.setHeight = function (value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.OmenMinigame.repeatedFields_ = [2];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.OmenMinigame.prototype.toObject = function (opt_includeInstance) {\n    return proto.OmenMinigame.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.OmenMinigame} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.OmenMinigame.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      question: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      optionsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n      selectedIndex: jspb.Message.getFieldWithDefault(msg, 3, 0),\n      input: jspb.Message.getFieldWithDefault(msg, 4, \"\"),\n      answer: jspb.Message.getFieldWithDefault(msg, 5, \"\"),\n      score: jspb.Message.getFieldWithDefault(msg, 6, 0),\n      threshold: jspb.Message.getFieldWithDefault(msg, 7, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.OmenMinigame}\n */\n\n\nproto.OmenMinigame.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.OmenMinigame();\n  return proto.OmenMinigame.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.OmenMinigame} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.OmenMinigame}\n */\n\n\nproto.OmenMinigame.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setQuestion(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.addOptions(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setSelectedIndex(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setInput(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setAnswer(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setScore(value);\n        break;\n\n      case 7:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setThreshold(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.OmenMinigame.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.OmenMinigame.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.OmenMinigame} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.OmenMinigame.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getQuestion();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getOptionsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedString(2, f);\n  }\n\n  f = message.getSelectedIndex();\n\n  if (f !== 0) {\n    writer.writeInt32(3, f);\n  }\n\n  f = message.getInput();\n\n  if (f.length > 0) {\n    writer.writeString(4, f);\n  }\n\n  f = message.getAnswer();\n\n  if (f.length > 0) {\n    writer.writeString(5, f);\n  }\n\n  f = message.getScore();\n\n  if (f !== 0) {\n    writer.writeInt32(6, f);\n  }\n\n  f = message.getThreshold();\n\n  if (f !== 0) {\n    writer.writeInt32(7, f);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.OmenMinigame.OptionChoice = {\n  CHOICE_NORMAL: 0,\n  CORRECT: 1,\n  INCORRECT: 2\n};\n/**\n * optional string question = 1;\n * @return {string}\n */\n\nproto.OmenMinigame.prototype.getQuestion = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.OmenMinigame} returns this\n */\n\n\nproto.OmenMinigame.prototype.setQuestion = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * repeated string options = 2;\n * @return {!Array<string>}\n */\n\n\nproto.OmenMinigame.prototype.getOptionsList = function () {\n  return (\n    /** @type {!Array<string>} */\n    jspb.Message.getRepeatedField(this, 2)\n  );\n};\n/**\n * @param {!Array<string>} value\n * @return {!proto.OmenMinigame} returns this\n */\n\n\nproto.OmenMinigame.prototype.setOptionsList = function (value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n/**\n * @param {string} value\n * @param {number=} opt_index\n * @return {!proto.OmenMinigame} returns this\n */\n\n\nproto.OmenMinigame.prototype.addOptions = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.OmenMinigame} returns this\n */\n\n\nproto.OmenMinigame.prototype.clearOptionsList = function () {\n  return this.setOptionsList([]);\n};\n/**\n * optional int32 selected_index = 3;\n * @return {number}\n */\n\n\nproto.OmenMinigame.prototype.getSelectedIndex = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.OmenMinigame} returns this\n */\n\n\nproto.OmenMinigame.prototype.setSelectedIndex = function (value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n/**\n * optional string input = 4;\n * @return {string}\n */\n\n\nproto.OmenMinigame.prototype.getInput = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 4, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.OmenMinigame} returns this\n */\n\n\nproto.OmenMinigame.prototype.setInput = function (value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n/**\n * optional string answer = 5;\n * @return {string}\n */\n\n\nproto.OmenMinigame.prototype.getAnswer = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 5, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.OmenMinigame} returns this\n */\n\n\nproto.OmenMinigame.prototype.setAnswer = function (value) {\n  return jspb.Message.setProto3StringField(this, 5, value);\n};\n/**\n * optional int32 score = 6;\n * @return {number}\n */\n\n\nproto.OmenMinigame.prototype.getScore = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 6, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.OmenMinigame} returns this\n */\n\n\nproto.OmenMinigame.prototype.setScore = function (value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n/**\n * optional int32 threshold = 7;\n * @return {number}\n */\n\n\nproto.OmenMinigame.prototype.getThreshold = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 7, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.OmenMinigame} returns this\n */\n\n\nproto.OmenMinigame.prototype.setThreshold = function (value) {\n  return jspb.Message.setProto3IntField(this, 7, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.GhostPepperGameState.repeatedFields_ = [4];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.GhostPepperGameState.prototype.toObject = function (opt_includeInstance) {\n    return proto.GhostPepperGameState.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.GhostPepperGameState} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.GhostPepperGameState.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      baseState: (f = msg.getBaseState()) && game_pb.GameState.toObject(includeInstance, f),\n      state: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      board: (f = msg.getBoard()) && proto.HouseBoard.toObject(includeInstance, f),\n      playersList: jspb.Message.toObjectList(msg.getPlayersList(), proto.HousePlayer.toObject, includeInstance),\n      currentTurn: jspb.Message.getFieldWithDefault(msg, 5, 0),\n      currentOmen: jspb.Message.getFieldWithDefault(msg, 6, 0),\n      omenMinigame: (f = msg.getOmenMinigame()) && proto.OmenMinigame.toObject(includeInstance, f),\n      numOmens: jspb.Message.getFieldWithDefault(msg, 8, 0),\n      turnCount: jspb.Message.getFieldWithDefault(msg, 9, 0),\n      omenEndTick: jspb.Message.getFieldWithDefault(msg, 10, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.GhostPepperGameState}\n */\n\n\nproto.GhostPepperGameState.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.GhostPepperGameState();\n  return proto.GhostPepperGameState.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.GhostPepperGameState} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.GhostPepperGameState}\n */\n\n\nproto.GhostPepperGameState.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new game_pb.GameState();\n        reader.readMessage(value, game_pb.GameState.deserializeBinaryFromReader);\n        msg.setBaseState(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.GhostPepperGameState.GhostPepperState} */\n        reader.readEnum();\n        msg.setState(value);\n        break;\n\n      case 3:\n        var value = new proto.HouseBoard();\n        reader.readMessage(value, proto.HouseBoard.deserializeBinaryFromReader);\n        msg.setBoard(value);\n        break;\n\n      case 4:\n        var value = new proto.HousePlayer();\n        reader.readMessage(value, proto.HousePlayer.deserializeBinaryFromReader);\n        msg.addPlayers(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {!proto.PlayerColor} */\n        reader.readEnum();\n        msg.setCurrentTurn(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {!proto.OmenType} */\n        reader.readEnum();\n        msg.setCurrentOmen(value);\n        break;\n\n      case 7:\n        var value = new proto.OmenMinigame();\n        reader.readMessage(value, proto.OmenMinigame.deserializeBinaryFromReader);\n        msg.setOmenMinigame(value);\n        break;\n\n      case 8:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setNumOmens(value);\n        break;\n\n      case 9:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setTurnCount(value);\n        break;\n\n      case 10:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setOmenEndTick(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.GhostPepperGameState.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.GhostPepperGameState.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.GhostPepperGameState} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.GhostPepperGameState.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getBaseState();\n\n  if (f != null) {\n    writer.writeMessage(1, f, game_pb.GameState.serializeBinaryToWriter);\n  }\n\n  f = message.getState();\n\n  if (f !== 0.0) {\n    writer.writeEnum(2, f);\n  }\n\n  f = message.getBoard();\n\n  if (f != null) {\n    writer.writeMessage(3, f, proto.HouseBoard.serializeBinaryToWriter);\n  }\n\n  f = message.getPlayersList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(4, f, proto.HousePlayer.serializeBinaryToWriter);\n  }\n\n  f = message.getCurrentTurn();\n\n  if (f !== 0.0) {\n    writer.writeEnum(5, f);\n  }\n\n  f = message.getCurrentOmen();\n\n  if (f !== 0.0) {\n    writer.writeEnum(6, f);\n  }\n\n  f = message.getOmenMinigame();\n\n  if (f != null) {\n    writer.writeMessage(7, f, proto.OmenMinigame.serializeBinaryToWriter);\n  }\n\n  f = message.getNumOmens();\n\n  if (f !== 0) {\n    writer.writeInt32(8, f);\n  }\n\n  f = message.getTurnCount();\n\n  if (f !== 0) {\n    writer.writeInt32(9, f);\n  }\n\n  f = message.getOmenEndTick();\n\n  if (f !== 0) {\n    writer.writeInt32(10, f);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.GhostPepperGameState.GhostPepperState = {\n  WAITING_FOR_START: 0,\n  MOVING: 2,\n  OMEN: 3,\n  GAME_WIN: 4\n};\n/**\n * optional GameState base_state = 1;\n * @return {?proto.GameState}\n */\n\nproto.GhostPepperGameState.prototype.getBaseState = function () {\n  return (\n    /** @type{?proto.GameState} */\n    jspb.Message.getWrapperField(this, game_pb.GameState, 1)\n  );\n};\n/**\n * @param {?proto.GameState|undefined} value\n * @return {!proto.GhostPepperGameState} returns this\n*/\n\n\nproto.GhostPepperGameState.prototype.setBaseState = function (value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.GhostPepperGameState} returns this\n */\n\n\nproto.GhostPepperGameState.prototype.clearBaseState = function () {\n  return this.setBaseState(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.GhostPepperGameState.prototype.hasBaseState = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional GhostPepperState state = 2;\n * @return {!proto.GhostPepperGameState.GhostPepperState}\n */\n\n\nproto.GhostPepperGameState.prototype.getState = function () {\n  return (\n    /** @type {!proto.GhostPepperGameState.GhostPepperState} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {!proto.GhostPepperGameState.GhostPepperState} value\n * @return {!proto.GhostPepperGameState} returns this\n */\n\n\nproto.GhostPepperGameState.prototype.setState = function (value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n/**\n * optional HouseBoard board = 3;\n * @return {?proto.HouseBoard}\n */\n\n\nproto.GhostPepperGameState.prototype.getBoard = function () {\n  return (\n    /** @type{?proto.HouseBoard} */\n    jspb.Message.getWrapperField(this, proto.HouseBoard, 3)\n  );\n};\n/**\n * @param {?proto.HouseBoard|undefined} value\n * @return {!proto.GhostPepperGameState} returns this\n*/\n\n\nproto.GhostPepperGameState.prototype.setBoard = function (value) {\n  return jspb.Message.setWrapperField(this, 3, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.GhostPepperGameState} returns this\n */\n\n\nproto.GhostPepperGameState.prototype.clearBoard = function () {\n  return this.setBoard(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.GhostPepperGameState.prototype.hasBoard = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * repeated HousePlayer players = 4;\n * @return {!Array<!proto.HousePlayer>}\n */\n\n\nproto.GhostPepperGameState.prototype.getPlayersList = function () {\n  return (\n    /** @type{!Array<!proto.HousePlayer>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.HousePlayer, 4)\n  );\n};\n/**\n * @param {!Array<!proto.HousePlayer>} value\n * @return {!proto.GhostPepperGameState} returns this\n*/\n\n\nproto.GhostPepperGameState.prototype.setPlayersList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 4, value);\n};\n/**\n * @param {!proto.HousePlayer=} opt_value\n * @param {number=} opt_index\n * @return {!proto.HousePlayer}\n */\n\n\nproto.GhostPepperGameState.prototype.addPlayers = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.HousePlayer, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.GhostPepperGameState} returns this\n */\n\n\nproto.GhostPepperGameState.prototype.clearPlayersList = function () {\n  return this.setPlayersList([]);\n};\n/**\n * optional PlayerColor current_turn = 5;\n * @return {!proto.PlayerColor}\n */\n\n\nproto.GhostPepperGameState.prototype.getCurrentTurn = function () {\n  return (\n    /** @type {!proto.PlayerColor} */\n    jspb.Message.getFieldWithDefault(this, 5, 0)\n  );\n};\n/**\n * @param {!proto.PlayerColor} value\n * @return {!proto.GhostPepperGameState} returns this\n */\n\n\nproto.GhostPepperGameState.prototype.setCurrentTurn = function (value) {\n  return jspb.Message.setProto3EnumField(this, 5, value);\n};\n/**\n * optional OmenType current_omen = 6;\n * @return {!proto.OmenType}\n */\n\n\nproto.GhostPepperGameState.prototype.getCurrentOmen = function () {\n  return (\n    /** @type {!proto.OmenType} */\n    jspb.Message.getFieldWithDefault(this, 6, 0)\n  );\n};\n/**\n * @param {!proto.OmenType} value\n * @return {!proto.GhostPepperGameState} returns this\n */\n\n\nproto.GhostPepperGameState.prototype.setCurrentOmen = function (value) {\n  return jspb.Message.setProto3EnumField(this, 6, value);\n};\n/**\n * optional OmenMinigame omen_minigame = 7;\n * @return {?proto.OmenMinigame}\n */\n\n\nproto.GhostPepperGameState.prototype.getOmenMinigame = function () {\n  return (\n    /** @type{?proto.OmenMinigame} */\n    jspb.Message.getWrapperField(this, proto.OmenMinigame, 7)\n  );\n};\n/**\n * @param {?proto.OmenMinigame|undefined} value\n * @return {!proto.GhostPepperGameState} returns this\n*/\n\n\nproto.GhostPepperGameState.prototype.setOmenMinigame = function (value) {\n  return jspb.Message.setWrapperField(this, 7, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.GhostPepperGameState} returns this\n */\n\n\nproto.GhostPepperGameState.prototype.clearOmenMinigame = function () {\n  return this.setOmenMinigame(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.GhostPepperGameState.prototype.hasOmenMinigame = function () {\n  return jspb.Message.getField(this, 7) != null;\n};\n/**\n * optional int32 num_omens = 8;\n * @return {number}\n */\n\n\nproto.GhostPepperGameState.prototype.getNumOmens = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 8, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.GhostPepperGameState} returns this\n */\n\n\nproto.GhostPepperGameState.prototype.setNumOmens = function (value) {\n  return jspb.Message.setProto3IntField(this, 8, value);\n};\n/**\n * optional int32 turn_count = 9;\n * @return {number}\n */\n\n\nproto.GhostPepperGameState.prototype.getTurnCount = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 9, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.GhostPepperGameState} returns this\n */\n\n\nproto.GhostPepperGameState.prototype.setTurnCount = function (value) {\n  return jspb.Message.setProto3IntField(this, 9, value);\n};\n/**\n * optional int32 omen_end_tick = 10;\n * @return {number}\n */\n\n\nproto.GhostPepperGameState.prototype.getOmenEndTick = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 10, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.GhostPepperGameState} returns this\n */\n\n\nproto.GhostPepperGameState.prototype.setOmenEndTick = function (value) {\n  return jspb.Message.setProto3IntField(this, 10, value);\n};\n/**\n * Oneof group definitions for this message. Each group defines the field\n * numbers belonging to that group. When of these fields' value is set, all\n * other fields in the group are cleared. During deserialization, if multiple\n * fields are encountered for a group, only the last value seen will be kept.\n * @private {!Array<!Array<number>>}\n * @const\n */\n\n\nproto.GhostPepperGameAction.oneofGroups_ = [[2, 3]];\n/**\n * @enum {number}\n */\n\nproto.GhostPepperGameAction.ActionCase = {\n  ACTION_NOT_SET: 0,\n  MOVE: 2,\n  INPUT: 3\n};\n/**\n * @return {proto.GhostPepperGameAction.ActionCase}\n */\n\nproto.GhostPepperGameAction.prototype.getActionCase = function () {\n  return (\n    /** @type {proto.GhostPepperGameAction.ActionCase} */\n    jspb.Message.computeOneofCase(this, proto.GhostPepperGameAction.oneofGroups_[0])\n  );\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.GhostPepperGameAction.prototype.toObject = function (opt_includeInstance) {\n    return proto.GhostPepperGameAction.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.GhostPepperGameAction} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.GhostPepperGameAction.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      baseAction: (f = msg.getBaseAction()) && game_pb.GameAction.toObject(includeInstance, f),\n      move: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      input: jspb.Message.getFieldWithDefault(msg, 3, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.GhostPepperGameAction}\n */\n\n\nproto.GhostPepperGameAction.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.GhostPepperGameAction();\n  return proto.GhostPepperGameAction.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.GhostPepperGameAction} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.GhostPepperGameAction}\n */\n\n\nproto.GhostPepperGameAction.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new game_pb.GameAction();\n        reader.readMessage(value, game_pb.GameAction.deserializeBinaryFromReader);\n        msg.setBaseAction(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.Direction} */\n        reader.readEnum();\n        msg.setMove(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setInput(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.GhostPepperGameAction.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.GhostPepperGameAction.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.GhostPepperGameAction} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.GhostPepperGameAction.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getBaseAction();\n\n  if (f != null) {\n    writer.writeMessage(1, f, game_pb.GameAction.serializeBinaryToWriter);\n  }\n\n  f =\n  /** @type {!proto.Direction} */\n  jspb.Message.getField(message, 2);\n\n  if (f != null) {\n    writer.writeEnum(2, f);\n  }\n\n  f =\n  /** @type {string} */\n  jspb.Message.getField(message, 3);\n\n  if (f != null) {\n    writer.writeString(3, f);\n  }\n};\n/**\n * optional GameAction base_action = 1;\n * @return {?proto.GameAction}\n */\n\n\nproto.GhostPepperGameAction.prototype.getBaseAction = function () {\n  return (\n    /** @type{?proto.GameAction} */\n    jspb.Message.getWrapperField(this, game_pb.GameAction, 1)\n  );\n};\n/**\n * @param {?proto.GameAction|undefined} value\n * @return {!proto.GhostPepperGameAction} returns this\n*/\n\n\nproto.GhostPepperGameAction.prototype.setBaseAction = function (value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.GhostPepperGameAction} returns this\n */\n\n\nproto.GhostPepperGameAction.prototype.clearBaseAction = function () {\n  return this.setBaseAction(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.GhostPepperGameAction.prototype.hasBaseAction = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional Direction move = 2;\n * @return {!proto.Direction}\n */\n\n\nproto.GhostPepperGameAction.prototype.getMove = function () {\n  return (\n    /** @type {!proto.Direction} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {!proto.Direction} value\n * @return {!proto.GhostPepperGameAction} returns this\n */\n\n\nproto.GhostPepperGameAction.prototype.setMove = function (value) {\n  return jspb.Message.setOneofField(this, 2, proto.GhostPepperGameAction.oneofGroups_[0], value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.GhostPepperGameAction} returns this\n */\n\n\nproto.GhostPepperGameAction.prototype.clearMove = function () {\n  return jspb.Message.setOneofField(this, 2, proto.GhostPepperGameAction.oneofGroups_[0], undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.GhostPepperGameAction.prototype.hasMove = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional string input = 3;\n * @return {string}\n */\n\n\nproto.GhostPepperGameAction.prototype.getInput = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 3, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.GhostPepperGameAction} returns this\n */\n\n\nproto.GhostPepperGameAction.prototype.setInput = function (value) {\n  return jspb.Message.setOneofField(this, 3, proto.GhostPepperGameAction.oneofGroups_[0], value);\n};\n/**\n * Clears the field making it undefined.\n * @return {!proto.GhostPepperGameAction} returns this\n */\n\n\nproto.GhostPepperGameAction.prototype.clearInput = function () {\n  return jspb.Message.setOneofField(this, 3, proto.GhostPepperGameAction.oneofGroups_[0], undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.GhostPepperGameAction.prototype.hasInput = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * @enum {number}\n */\n\n\nproto.OmenType = {\n  UNKNOWN_OMEN: 0,\n  MATH: 1,\n  MEMORY: 2,\n  ANAGRAMS: 3,\n  PIGPEN: 4,\n  PASSCODE: 5,\n  VERBAL_MEMORY: 6\n};\n/**\n * @enum {number}\n */\n\nproto.Doll = {\n  UNKNOWN_DOLL: 0,\n  BARBIE: 1,\n  KEN: 2,\n  MIDGE: 3,\n  RYAN: 4,\n  STACIE: 5,\n  TAWNY: 6\n};\n/**\n * @enum {number}\n */\n\nproto.RoomTile = {\n  UNKNOWN_ROOM: 0,\n  ENTRANCE_HALL: 1,\n  JUNK_ROOM: 2,\n  LARDER: 3,\n  VAULT: 4,\n  CATACOMBS: 5,\n  PENTAGRAM_CHAMBER: 6,\n  RESEARCH_LABORATORY: 7\n};\ngoog.object.extend(exports, proto);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./schema/protos/ghostpepper_pb.js\n");

/***/ }),

/***/ "./utils/animation.ts":
/*!****************************!*\
  !*** ./utils/animation.ts ***!
  \****************************/
/*! exports provided: useAnimationFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useAnimationFrame\", function() { return useAnimationFrame; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\n\n/**\n * Sets up a callback to run every animation frame.\n * Must provide a tick ref which will be passed into the callback.\n */\n\nvar useAnimationFrame = function useAnimationFrame(callback, tickRef, deps) {\n  _s();\n\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  var requestRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n  var previousTimeRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n\n  var animate = function animate(time) {\n    if (previousTimeRef.current !== undefined) {\n      var deltaTime = time - previousTimeRef.current;\n      tickRef.current += deltaTime / 100;\n      callback(tickRef.current);\n    }\n\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n    requestRef.current = requestAnimationFrame(animate);\n    return function () {\n      return cancelAnimationFrame(requestRef.current);\n    };\n  }, [deps]);\n};\n\n_s(useAnimationFrame, \"z8M7fn6QAiYOb97lWpO8m/pmXa0=\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvYW5pbWF0aW9uLnRzP2ExMTUiXSwibmFtZXMiOlsidXNlQW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsInRpY2tSZWYiLCJkZXBzIiwicmVxdWVzdFJlZiIsInVzZVJlZiIsInByZXZpb3VzVGltZVJlZiIsImFuaW1hdGUiLCJ0aW1lIiwiY3VycmVudCIsInVuZGVmaW5lZCIsImRlbHRhVGltZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVzZUVmZmVjdCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUVBOzs7OztBQUlPLElBQU1BLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FDL0JDLFFBRCtCLEVBRS9CQyxPQUYrQixFQUcvQkMsSUFIK0IsRUFJNUI7QUFBQTs7QUFDSDtBQUNBO0FBQ0EsTUFBTUMsVUFBVSxHQUFHQyxvREFBTSxFQUF6QjtBQUNBLE1BQU1DLGVBQWUsR0FBR0Qsb0RBQU0sRUFBOUI7O0FBRUEsTUFBTUUsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBQ0MsSUFBRCxFQUFVO0FBQ3hCLFFBQUlGLGVBQWUsQ0FBQ0csT0FBaEIsS0FBNEJDLFNBQWhDLEVBQTJDO0FBQ3pDLFVBQU1DLFNBQVMsR0FBR0gsSUFBSSxHQUFHRixlQUFlLENBQUNHLE9BQXpDO0FBQ0FQLGFBQU8sQ0FBQ08sT0FBUixJQUFtQkUsU0FBUyxHQUFHLEdBQS9CO0FBQ0FWLGNBQVEsQ0FBQ0MsT0FBTyxDQUFDTyxPQUFULENBQVI7QUFDRDs7QUFDREgsbUJBQWUsQ0FBQ0csT0FBaEIsR0FBMEJELElBQTFCO0FBQ0FKLGNBQVUsQ0FBQ0ssT0FBWCxHQUFxQkcscUJBQXFCLENBQUNMLE9BQUQsQ0FBMUM7QUFDRCxHQVJEOztBQVVBTSx5REFBUyxDQUFDLFlBQU07QUFDZFQsY0FBVSxDQUFDSyxPQUFYLEdBQXFCRyxxQkFBcUIsQ0FBQ0wsT0FBRCxDQUExQztBQUNBLFdBQU87QUFBQSxhQUFNTyxvQkFBb0IsQ0FBQ1YsVUFBVSxDQUFDSyxPQUFaLENBQTFCO0FBQUEsS0FBUDtBQUNELEdBSFEsRUFHTixDQUFDTixJQUFELENBSE0sQ0FBVDtBQUlELENBeEJNOztHQUFNSCxpQiIsImZpbGUiOiIuL3V0aWxzL2FuaW1hdGlvbi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIFNldHMgdXAgYSBjYWxsYmFjayB0byBydW4gZXZlcnkgYW5pbWF0aW9uIGZyYW1lLlxuICogTXVzdCBwcm92aWRlIGEgdGljayByZWYgd2hpY2ggd2lsbCBiZSBwYXNzZWQgaW50byB0aGUgY2FsbGJhY2suXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VBbmltYXRpb25GcmFtZSA9IChcbiAgY2FsbGJhY2s6ICh0aWNrOiBudW1iZXIpID0+IHZvaWQsXG4gIHRpY2tSZWY6IFJlYWN0Lk11dGFibGVSZWZPYmplY3Q8bnVtYmVyPixcbiAgZGVwczogUmVhY3QuRGVwZW5kZW5jeUxpc3RcbikgPT4ge1xuICAvLyBVc2UgdXNlUmVmIGZvciBtdXRhYmxlIHZhcmlhYmxlcyB0aGF0IHdlIHdhbnQgdG8gcGVyc2lzdFxuICAvLyB3aXRob3V0IHRyaWdnZXJpbmcgYSByZS1yZW5kZXIgb24gdGhlaXIgY2hhbmdlXG4gIGNvbnN0IHJlcXVlc3RSZWYgPSB1c2VSZWY8bnVtYmVyIHwgdW5kZWZpbmVkPigpO1xuICBjb25zdCBwcmV2aW91c1RpbWVSZWYgPSB1c2VSZWY8bnVtYmVyIHwgdW5kZWZpbmVkPigpO1xuXG4gIGNvbnN0IGFuaW1hdGUgPSAodGltZSkgPT4ge1xuICAgIGlmIChwcmV2aW91c1RpbWVSZWYuY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBkZWx0YVRpbWUgPSB0aW1lIC0gcHJldmlvdXNUaW1lUmVmLmN1cnJlbnQ7XG4gICAgICB0aWNrUmVmLmN1cnJlbnQgKz0gZGVsdGFUaW1lIC8gMTAwO1xuICAgICAgY2FsbGJhY2sodGlja1JlZi5jdXJyZW50KTtcbiAgICB9XG4gICAgcHJldmlvdXNUaW1lUmVmLmN1cnJlbnQgPSB0aW1lO1xuICAgIHJlcXVlc3RSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlcXVlc3RSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgICByZXR1cm4gKCkgPT4gY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVxdWVzdFJlZi5jdXJyZW50ISk7XG4gIH0sIFtkZXBzXSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./utils/animation.ts\n");

/***/ })

}]);