(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[6],{

/***/ "./components/groupsolve/banana.tsx":
/*!******************************************!*\
  !*** ./components/groupsolve/banana.tsx ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react_draggable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-draggable */ \"./node_modules/react-draggable/build/cjs/cjs.js\");\n/* harmony import */ var react_draggable__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react_draggable__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var components_groupsolve_lobby__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! components/groupsolve/lobby */ \"./components/groupsolve/lobby.tsx\");\n/* harmony import */ var schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! schema/protos/banana_pb */ \"./schema/protos/banana_pb.js\");\n/* harmony import */ var schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! schema/protos/game_pb */ \"./schema/protos/game_pb.js\");\n/* harmony import */ var schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var utils_assets__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! utils/assets */ \"./utils/assets.ts\");\n/* harmony import */ var utils_timer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! utils/timer */ \"./utils/timer.tsx\");\n/* harmony import */ var utils_game__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! utils/game */ \"./utils/game.ts\");\n/* harmony import */ var utils_animation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! utils/animation */ \"./utils/animation.ts\");\n\n\nvar _BOP_SOUNDS,\n    _this = undefined,\n    _jsxFileName = \"/vagrant/client/components/groupsolve/banana.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement;\n\n\n\n\n\n\n\n\n\n\nvar BananaState = schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BananaGameState\"].BananaState;\nvar TWO_PI = Math.PI * 2;\nvar WARNINGS = ['', 'WARNING: FOG AHEAD', 'WARNING: TURBULENT SEAS', 'WARNING: WHO LET THE DOGS OUT?', 'WARNING: ANIMALS GONE WILD', 'WARNING: AUDITORY INTERFERENCE'];\nvar BOP_SOUNDS = (_BOP_SOUNDS = {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_BOP_SOUNDS, schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BopAction\"].BOP, 'bop'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_BOP_SOUNDS, schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BopAction\"].TWIST, 'twist'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_BOP_SOUNDS, schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BopAction\"].SPIN, 'spin'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_BOP_SOUNDS, schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BopAction\"].FLICK, 'flick'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_BOP_SOUNDS, schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BopAction\"].PULL, 'pull'), _BOP_SOUNDS);\nvar BANANA_SOUND_EFFECTS = [// Base words\n{\n  src: 'puzzle/banana/words',\n  sprite: {\n    bop: [0, 500],\n    twist: [500, 600],\n    spin: [1100, 600],\n    pull: [1700, 500],\n    flick: [2200, 700],\n    shoot: [2900, 600],\n    sink: [3500, 600],\n    gun: [4100, 600],\n    dodge: [4700, 500],\n    steer: [5200, 600],\n    barricade: [5800, 800],\n    sail: [6600, 600],\n    scuttle: [7200, 800],\n    anchor: [8000, 500],\n    plunder: [8500, 700],\n    captain: [9200, 800],\n    plank: [10000, 600],\n    belay: [10600, 600],\n    pillage: [11200, 700],\n    commandeer: [11900, 900],\n    sweep: [12800, 700],\n    flag: [13500, 700],\n    bomb: [14200, 600],\n    detonate: [14800, 800],\n    explode: [15600, 800],\n    detect: [16400, 700],\n    defuse: [17100, 800],\n    scan: [17900, 700],\n    torpedo: [18600, 900],\n    submerge: [19500, 900],\n    ballast: [20400, 700],\n    dive: [21100, 600],\n    propeller: [21700, 800],\n    sonar: [22500, 800],\n    surface: [23300, 900],\n    launch: [24200, 600],\n    fly: [24800, 600],\n    land: [25400, 600],\n    deploy: [26000, 700],\n    pilot: [26700, 600],\n    escort: [27300, 700]\n  }\n}, // Sound effects\n{\n  src: 'puzzle/banana/effects',\n  sprite: {\n    bop: [0, 500],\n    twist: [500, 500],\n    spin: [1000, 600],\n    flick: [1600, 550],\n    pull: [2150, 450],\n    pass: [2600, 1400]\n  }\n}, // Animal sounds\n{\n  src: 'puzzle/banana/sounds',\n  sprite: {\n    moo: [0, 900],\n    chirp: [900, 500],\n    woof: [1400, 500],\n    meow: [1900, 800],\n    neigh: [2700, 1100],\n    quack: [3900, 600],\n    honk: [4500, 700],\n    caw: [5200, 550],\n    rattle: [5750, 700],\n    arf: [6500, 700],\n    oink: [7200, 700],\n    hoot: [7900, 900],\n    trumpet: [8800, 1300],\n    baaa: [10100, 950],\n    ribbit: [11100, 700],\n    click: [11800, 1100],\n    roar: [12900, 1500],\n    gobble: [14400, 1100],\n    cockadoodledoo: [15500, 2000],\n    cluck: [17500, 1000],\n    heehaw: [18500, 1200],\n    howl: [19700, 1700],\n    growl: [21400, 1500],\n    hiss: [22900, 1800],\n    screech: [24700, 1100],\n    buzz: [25800, 800],\n    laugh: [26600, 900],\n    'oo-aa': [27500, 1000],\n    squeak: [28500, 500],\n    coo: [29000, 1400]\n  }\n}];\n\nvar getAngle = function getAngle(_ref, _ref2) {\n  var x1 = _ref.x,\n      y1 = _ref.y;\n  var x2 = _ref2.x,\n      y2 = _ref2.y;\n  var dot = x1 * x2 + y1 * y2;\n  var det = x1 * y2 - y1 * x2;\n  var angle = Math.atan2(det, dot) / Math.PI * 180;\n  return (angle + 360) % 360;\n};\n\nvar renderTitle = function renderTitle(ctx, sprite, screenDimensions) {\n  ctx.drawImage(sprite, 0, 0, screenDimensions.width, screenDimensions.height);\n};\n\nvar renderBackground = function renderBackground(ctx, screenDimensions) {\n  ctx.fillStyle = '#0b264a';\n  ctx.fillRect(0, 0, screenDimensions.width, screenDimensions.height);\n}; // Construct an anagram using Fisher-Yates shuffle\n\n\nvar anagram = function anagram(word) {\n  var result = word;\n\n  while (result === word) {\n    var a = word.split('');\n    var n = a.length;\n\n    for (var i = n - 1; i > 0; i--) {\n      var j = Math.floor(Math.random() * (i + 1));\n      var tmp = a[i];\n      a[i] = a[j];\n      a[j] = tmp;\n    }\n\n    result = a.join('');\n  }\n\n  return result;\n};\n\nvar transformBoard = function transformBoard(board, level) {\n  if (level === 2 || level === 4) {\n    board.setBop(anagram(board.getBop()));\n    board.setPull(anagram(board.getPull()));\n    board.setSpin(anagram(board.getSpin()));\n    board.setTwist(anagram(board.getTwist()));\n    board.setFlick(anagram(board.getFlick()));\n  }\n\n  return board;\n};\n\nvar BananaGame = function BananaGame(_ref3) {\n  _s();\n\n  var _gameState$getBaseSta3, _gameState$getState, _gameState$getBaseSta4, _gameState$getBaseSta5;\n\n  var canvasRef = _ref3.canvasRef,\n      gameState = _ref3.gameState,\n      isConnected = _ref3.isConnected,\n      setLoading = _ref3.setLoading,\n      currentPlayer = _ref3.currentPlayer,\n      sendMessage = _ref3.sendMessage,\n      restartGame = _ref3.restartGame,\n      screenDimensions = _ref3.screenDimensions;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(false),\n      playerStarted = _useState[0],\n      setPlayerStarted = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(null),\n      board = _useState2[0],\n      setBoard = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(new schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"Instruction\"]()),\n      instructions = _useState3[0],\n      setInstructions = _useState3[1];\n\n  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(0),\n      level = _useState4[0],\n      setLevel = _useState4[1];\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(0),\n      progress = _useState5[0],\n      setProgress = _useState5[1];\n\n  var _useState6 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(0),\n      health = _useState6[0],\n      setHealth = _useState6[1];\n\n  var _useState7 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(0),\n      rotateAngle = _useState7[0],\n      setRotateAngle = _useState7[1];\n\n  var _useState8 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(false),\n      flicked = _useState8[0],\n      setFlicked = _useState8[1];\n\n  var _useState9 = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(false),\n      gameOver = _useState9[0],\n      setGameOver = _useState9[1];\n\n  var pullValue = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useRef\"])(1);\n  var rotateStartAngle = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useRef\"])(0);\n  var rotateCenterPos = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useRef\"])({\n    x: 0,\n    y: 0\n  });\n  var rotateStartVector = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useRef\"])({\n    x: 0,\n    y: 0\n  });\n\n  var _useImages = Object(utils_assets__WEBPACK_IMPORTED_MODULE_7__[\"useImages\"])('puzzle/banana/', ['bop', 'blue', 'green', 'orange', 'yellow', 'level', 'title', 'gameover', 'win']),\n      isLoading = _useImages.isLoading,\n      images = _useImages.images;\n\n  var _useSounds = Object(utils_assets__WEBPACK_IMPORTED_MODULE_7__[\"useSounds\"])('', [].concat(BANANA_SOUND_EFFECTS, [utils_assets__WEBPACK_IMPORTED_MODULE_7__[\"MAIN_SOUND_EFFECTS\"]])),\n      isSoundLoading = _useSounds.isLoading,\n      sounds = _useSounds.sounds;\n\n  Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useEffect\"])(function () {\n    if (!isLoading && !isSoundLoading) {\n      setLoading(false);\n    }\n  }, [isLoading, isSoundLoading]); // Refs for use in animation frames.\n\n  var gameStateRef = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useRef\"])(null);\n  var tickRef = Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useRef\"])(0);\n\n  var cleanup = function cleanup() {\n    setPlayerStarted(false);\n    gameStateRef.current = null;\n    tickRef.current = 0;\n  };\n\n  var onStartGame = function onStartGame() {\n    var action = new schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BananaGameAction\"]();\n    var baseAction = new schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameAction\"]();\n    baseAction.setAction(schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"Action\"].START_GAME);\n    action.setBaseAction(baseAction);\n    sendMessage(action);\n    setPlayerStarted(true);\n    sounds['public/mainsfx'].play('select');\n  };\n\n  var onRestart = function onRestart() {\n    if (Object(utils_game__WEBPACK_IMPORTED_MODULE_9__[\"isGameOver\"])(gameStateRef.current)) {\n      sounds['public/mainsfx'].play('select');\n      cleanup();\n      restartGame();\n    }\n  };\n\n  var onAction = function onAction(bopAction, value) {\n    var _gameStateRef$current;\n\n    if (((_gameStateRef$current = gameStateRef.current) === null || _gameStateRef$current === void 0 ? void 0 : _gameStateRef$current.getState()) !== BananaState.PLAYING) {\n      return;\n    }\n\n    var action = new schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BananaGameAction\"]();\n    action.setBopAction(bopAction);\n\n    if (value !== undefined) {\n      action.setValue(value);\n    }\n\n    sendMessage(action);\n    sounds['puzzle/banana/effects'].volume(0.2);\n    sounds['puzzle/banana/effects'].play(BOP_SOUNDS[bopAction]);\n  }; // Update client state on every websocket message.\n\n\n  Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useEffect\"])(function () {\n    var _gameState$getBaseSta, _gameState$getBaseSta2, _gameState$getProgres, _gameState$getHealth;\n\n    gameStateRef.current = gameState;\n    tickRef.current = (_gameState$getBaseSta = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getTick()) !== null && _gameState$getBaseSta !== void 0 ? _gameState$getBaseSta : 0;\n\n    if (!gameState || !isConnected || isLoading || isSoundLoading || gameOver) {\n      return;\n    }\n\n    if (Object(utils_game__WEBPACK_IMPORTED_MODULE_9__[\"isGameOver\"])(gameState)) {\n      sounds['public/mainsfx'].play(gameState.getBaseState().getStatus() === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'win' : 'loss');\n      setGameOver(true);\n      return;\n    }\n\n    switch (gameState.getState()) {\n      case BananaState.WAITING_FOR_START:\n        // Wait for players to start\n        break;\n\n      case BananaState.LEVEL_TRANSITION:\n        var newLevel = (_gameState$getBaseSta2 = gameState.getBaseState().getLevel()) !== null && _gameState$getBaseSta2 !== void 0 ? _gameState$getBaseSta2 : 0;\n\n        if (newLevel !== level) {\n          setLevel(newLevel);\n        }\n\n        var newBoard = gameState.getBoardsList()[currentPlayer];\n\n        if (newBoard && newBoard !== board) {\n          setBoard(transformBoard(newBoard, newLevel));\n          setInstructions(new schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"Instruction\"]());\n          setRotateAngle(0);\n          pullValue.current = 1;\n        }\n\n        break;\n\n      case BananaState.PLAYING:\n        var newInstructions = gameState.getInstructionsList()[currentPlayer];\n\n        if ((newInstructions === null || newInstructions === void 0 ? void 0 : newInstructions.getVerb()) !== instructions.getVerb()) {\n          setInstructions(newInstructions);\n\n          if (newInstructions.getVerb()) {\n            var verb = newInstructions.getVerb();\n\n            if (level < 3) {\n              sounds['puzzle/banana/words'].play(verb);\n            } else {\n              sounds['puzzle/banana/sounds'].play(verb);\n            }\n          }\n        }\n\n        setProgress((_gameState$getProgres = gameState.getProgress()) !== null && _gameState$getProgres !== void 0 ? _gameState$getProgres : 0);\n        setHealth((_gameState$getHealth = gameState.getHealth()) !== null && _gameState$getHealth !== void 0 ? _gameState$getHealth : 0);\n        break;\n    }\n  }, [gameState]); // Paint frames on the canvas.\n\n  var render = function render(tick) {\n    var _gameStateRef$current2, _gameStateRef$current3, _gameStateRef$current4, _gameStateRef$current5, _gameStateRef$current6;\n\n    if (isLoading || isSoundLoading) {\n      return;\n    }\n\n    var ctx = canvasRef.current.getContext('2d');\n    var status = (_gameStateRef$current2 = (_gameStateRef$current3 = gameStateRef.current) === null || _gameStateRef$current3 === void 0 ? void 0 : (_gameStateRef$current4 = _gameStateRef$current3.getBaseState()) === null || _gameStateRef$current4 === void 0 ? void 0 : _gameStateRef$current4.getStatus()) !== null && _gameStateRef$current2 !== void 0 ? _gameStateRef$current2 : schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].WAITING_FOR_START;\n    var state = (_gameStateRef$current5 = (_gameStateRef$current6 = gameStateRef.current) === null || _gameStateRef$current6 === void 0 ? void 0 : _gameStateRef$current6.getState()) !== null && _gameStateRef$current5 !== void 0 ? _gameStateRef$current5 : BananaState.WAITING_FOR_START;\n    ctx.clearRect(0, 0, screenDimensions.width, screenDimensions.height);\n\n    if (state === BananaState.WAITING_FOR_START) {\n      renderTitle(ctx, images['title'], screenDimensions);\n    } else if (state === BananaState.LEVEL_TRANSITION) {\n      renderTitle(ctx, images['level'], screenDimensions);\n    } else if (status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_LOSS) {\n      renderTitle(ctx, images['gameover'], screenDimensions);\n    } else if (status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN) {\n      renderTitle(ctx, images['win'], screenDimensions);\n    } else {\n      renderBackground(ctx, screenDimensions);\n    }\n  };\n\n  Object(utils_animation__WEBPACK_IMPORTED_MODULE_10__[\"useAnimationFrame\"])(render, tickRef, [board]);\n  var status = (_gameState$getBaseSta3 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getStatus()) !== null && _gameState$getBaseSta3 !== void 0 ? _gameState$getBaseSta3 : schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].WAITING_FOR_START;\n  var state = (_gameState$getState = gameState === null || gameState === void 0 ? void 0 : gameState.getState()) !== null && _gameState$getState !== void 0 ? _gameState$getState : BananaState.WAITING_FOR_START;\n  var players = (_gameState$getBaseSta4 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getPlayersList()) !== null && _gameState$getBaseSta4 !== void 0 ? _gameState$getBaseSta4 : [];\n  var tick = (_gameState$getBaseSta5 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getTick()) !== null && _gameState$getBaseSta5 !== void 0 ? _gameState$getBaseSta5 : 0;\n\n  if (isLoading || isSoundLoading) {\n    return __jsx(\"div\", {\n      className: \"abs-center white\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  var dragDistance = Math.round(screenDimensions.width / 25);\n  var _styles$className = {\n    styles: __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {\n      id: \"3538008974\"\n    }, \"div.jsx-3538008974{color:#fff;top:80%;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvYmFuYW5hLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwWHdFLEFBR2tCLFdBQ0gsUUFDViIsImZpbGUiOiIvdmFncmFudC9jbGllbnQvY29tcG9uZW50cy9ncm91cHNvbHZlL2JhbmFuYS50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IERyYWdnYWJsZSBmcm9tICdyZWFjdC1kcmFnZ2FibGUnO1xuaW1wb3J0IGNzcyBmcm9tICdzdHlsZWQtanN4L2Nzcyc7XG5cbmltcG9ydCBMb2JieSBmcm9tICdjb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnknO1xuaW1wb3J0IFNoYWRvd0ltYWdlIGZyb20gJ2NvbXBvbmVudHMvc2hhZG93X2ltYWdlJztcbmltcG9ydCB7XG4gIEJvcEFjdGlvbixcbiAgQm9wQWN0aW9uTWFwLFxuICBCb3BCb2FyZCxcbiAgQmFuYW5hR2FtZUFjdGlvbixcbiAgQmFuYW5hR2FtZVN0YXRlLFxuICBJbnN0cnVjdGlvbixcbn0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9iYW5hbmFfcGInO1xuaW1wb3J0IHsgQWN0aW9uLCBHYW1lQWN0aW9uLCBHYW1lU3RhdHVzIH0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9nYW1lX3BiJztcbmltcG9ydCB7IFByb3RvRW51bSB9IGZyb20gJ3R5cGVzJztcbmltcG9ydCB7IE1BSU5fU09VTkRfRUZGRUNUUywgU3ByaXRlLCB1c2VJbWFnZXMsIHVzZVNvdW5kcyB9IGZyb20gJ3V0aWxzL2Fzc2V0cyc7XG5pbXBvcnQgeyBkaXNwbGF5VGltZUxlZnQgfSBmcm9tICd1dGlscy90aW1lcic7XG5pbXBvcnQgeyBpc0dhbWVPdmVyIH0gZnJvbSAndXRpbHMvZ2FtZSc7XG5pbXBvcnQgeyB1c2VBbmltYXRpb25GcmFtZSB9IGZyb20gJ3V0aWxzL2FuaW1hdGlvbic7XG5jb25zdCB7IEJhbmFuYVN0YXRlIH0gPSBCYW5hbmFHYW1lU3RhdGU7XG5cbmNvbnN0IFRXT19QSSA9IE1hdGguUEkgKiAyO1xuXG5jb25zdCBXQVJOSU5HUyA9IFtcbiAgJycsXG4gICdXQVJOSU5HOiBGT0cgQUhFQUQnLFxuICAnV0FSTklORzogVFVSQlVMRU5UIFNFQVMnLFxuICAnV0FSTklORzogV0hPIExFVCBUSEUgRE9HUyBPVVQ/JyxcbiAgJ1dBUk5JTkc6IEFOSU1BTFMgR09ORSBXSUxEJyxcbiAgJ1dBUk5JTkc6IEFVRElUT1JZIElOVEVSRkVSRU5DRScsXG5dO1xuXG5jb25zdCBCT1BfU09VTkRTOiBSZWNvcmQ8UHJvdG9FbnVtPEJvcEFjdGlvbk1hcD4sIHN0cmluZz4gPSB7XG4gIFtCb3BBY3Rpb24uQk9QXTogJ2JvcCcsXG4gIFtCb3BBY3Rpb24uVFdJU1RdOiAndHdpc3QnLFxuICBbQm9wQWN0aW9uLlNQSU5dOiAnc3BpbicsXG4gIFtCb3BBY3Rpb24uRkxJQ0tdOiAnZmxpY2snLFxuICBbQm9wQWN0aW9uLlBVTExdOiAncHVsbCcsXG59O1xuXG5jb25zdCBCQU5BTkFfU09VTkRfRUZGRUNUUzogKHN0cmluZyB8IFNwcml0ZSlbXSA9IFtcbiAgLy8gQmFzZSB3b3Jkc1xuICB7XG4gICAgc3JjOiAncHV6emxlL2JhbmFuYS93b3JkcycsXG4gICAgc3ByaXRlOiB7XG4gICAgICBib3A6IFswLCA1MDBdLFxuICAgICAgdHdpc3Q6IFs1MDAsIDYwMF0sXG4gICAgICBzcGluOiBbMTEwMCwgNjAwXSxcbiAgICAgIHB1bGw6IFsxNzAwLCA1MDBdLFxuICAgICAgZmxpY2s6IFsyMjAwLCA3MDBdLFxuICAgICAgc2hvb3Q6IFsyOTAwLCA2MDBdLFxuICAgICAgc2luazogWzM1MDAsIDYwMF0sXG4gICAgICBndW46IFs0MTAwLCA2MDBdLFxuICAgICAgZG9kZ2U6IFs0NzAwLCA1MDBdLFxuICAgICAgc3RlZXI6IFs1MjAwLCA2MDBdLFxuICAgICAgYmFycmljYWRlOiBbNTgwMCwgODAwXSxcbiAgICAgIHNhaWw6IFs2NjAwLCA2MDBdLFxuICAgICAgc2N1dHRsZTogWzcyMDAsIDgwMF0sXG4gICAgICBhbmNob3I6IFs4MDAwLCA1MDBdLFxuICAgICAgcGx1bmRlcjogWzg1MDAsIDcwMF0sXG4gICAgICBjYXB0YWluOiBbOTIwMCwgODAwXSxcbiAgICAgIHBsYW5rOiBbMTAwMDAsIDYwMF0sXG4gICAgICBiZWxheTogWzEwNjAwLCA2MDBdLFxuICAgICAgcGlsbGFnZTogWzExMjAwLCA3MDBdLFxuICAgICAgY29tbWFuZGVlcjogWzExOTAwLCA5MDBdLFxuICAgICAgc3dlZXA6IFsxMjgwMCwgNzAwXSxcbiAgICAgIGZsYWc6IFsxMzUwMCwgNzAwXSxcbiAgICAgIGJvbWI6IFsxNDIwMCwgNjAwXSxcbiAgICAgIGRldG9uYXRlOiBbMTQ4MDAsIDgwMF0sXG4gICAgICBleHBsb2RlOiBbMTU2MDAsIDgwMF0sXG4gICAgICBkZXRlY3Q6IFsxNjQwMCwgNzAwXSxcbiAgICAgIGRlZnVzZTogWzE3MTAwLCA4MDBdLFxuICAgICAgc2NhbjogWzE3OTAwLCA3MDBdLFxuICAgICAgdG9ycGVkbzogWzE4NjAwLCA5MDBdLFxuICAgICAgc3VibWVyZ2U6IFsxOTUwMCwgOTAwXSxcbiAgICAgIGJhbGxhc3Q6IFsyMDQwMCwgNzAwXSxcbiAgICAgIGRpdmU6IFsyMTEwMCwgNjAwXSxcbiAgICAgIHByb3BlbGxlcjogWzIxNzAwLCA4MDBdLFxuICAgICAgc29uYXI6IFsyMjUwMCwgODAwXSxcbiAgICAgIHN1cmZhY2U6IFsyMzMwMCwgOTAwXSxcbiAgICAgIGxhdW5jaDogWzI0MjAwLCA2MDBdLFxuICAgICAgZmx5OiBbMjQ4MDAsIDYwMF0sXG4gICAgICBsYW5kOiBbMjU0MDAsIDYwMF0sXG4gICAgICBkZXBsb3k6IFsyNjAwMCwgNzAwXSxcbiAgICAgIHBpbG90OiBbMjY3MDAsIDYwMF0sXG4gICAgICBlc2NvcnQ6IFsyNzMwMCwgNzAwXSxcbiAgICB9LFxuICB9LFxuICAvLyBTb3VuZCBlZmZlY3RzXG4gIHtcbiAgICBzcmM6ICdwdXp6bGUvYmFuYW5hL2VmZmVjdHMnLFxuICAgIHNwcml0ZToge1xuICAgICAgYm9wOiBbMCwgNTAwXSxcbiAgICAgIHR3aXN0OiBbNTAwLCA1MDBdLFxuICAgICAgc3BpbjogWzEwMDAsIDYwMF0sXG4gICAgICBmbGljazogWzE2MDAsIDU1MF0sXG4gICAgICBwdWxsOiBbMjE1MCwgNDUwXSxcbiAgICAgIHBhc3M6IFsyNjAwLCAxNDAwXSxcbiAgICB9LFxuICB9LFxuICAvLyBBbmltYWwgc291bmRzXG4gIHtcbiAgICBzcmM6ICdwdXp6bGUvYmFuYW5hL3NvdW5kcycsXG4gICAgc3ByaXRlOiB7XG4gICAgICBtb286IFswLCA5MDBdLFxuICAgICAgY2hpcnA6IFs5MDAsIDUwMF0sXG4gICAgICB3b29mOiBbMTQwMCwgNTAwXSxcbiAgICAgIG1lb3c6IFsxOTAwLCA4MDBdLFxuICAgICAgbmVpZ2g6IFsyNzAwLCAxMTAwXSxcbiAgICAgIHF1YWNrOiBbMzkwMCwgNjAwXSxcbiAgICAgIGhvbms6IFs0NTAwLCA3MDBdLFxuICAgICAgY2F3OiBbNTIwMCwgNTUwXSxcbiAgICAgIHJhdHRsZTogWzU3NTAsIDcwMF0sXG4gICAgICBhcmY6IFs2NTAwLCA3MDBdLFxuICAgICAgb2luazogWzcyMDAsIDcwMF0sXG4gICAgICBob290OiBbNzkwMCwgOTAwXSxcbiAgICAgIHRydW1wZXQ6IFs4ODAwLCAxMzAwXSxcbiAgICAgIGJhYWE6IFsxMDEwMCwgOTUwXSxcbiAgICAgIHJpYmJpdDogWzExMTAwLCA3MDBdLFxuICAgICAgY2xpY2s6IFsxMTgwMCwgMTEwMF0sXG4gICAgICByb2FyOiBbMTI5MDAsIDE1MDBdLFxuICAgICAgZ29iYmxlOiBbMTQ0MDAsIDExMDBdLFxuICAgICAgY29ja2Fkb29kbGVkb286IFsxNTUwMCwgMjAwMF0sXG4gICAgICBjbHVjazogWzE3NTAwLCAxMDAwXSxcbiAgICAgIGhlZWhhdzogWzE4NTAwLCAxMjAwXSxcbiAgICAgIGhvd2w6IFsxOTcwMCwgMTcwMF0sXG4gICAgICBncm93bDogWzIxNDAwLCAxNTAwXSxcbiAgICAgIGhpc3M6IFsyMjkwMCwgMTgwMF0sXG4gICAgICBzY3JlZWNoOiBbMjQ3MDAsIDExMDBdLFxuICAgICAgYnV6ejogWzI1ODAwLCA4MDBdLFxuICAgICAgbGF1Z2g6IFsyNjYwMCwgOTAwXSxcbiAgICAgICdvby1hYSc6IFsyNzUwMCwgMTAwMF0sXG4gICAgICBzcXVlYWs6IFsyODUwMCwgNTAwXSxcbiAgICAgIGNvbzogWzI5MDAwLCAxNDAwXSxcbiAgICB9LFxuICB9LFxuXTtcblxuY29uc3QgZ2V0QW5nbGUgPSAoeyB4OiB4MSwgeTogeTEgfSwgeyB4OiB4MiwgeTogeTIgfSkgPT4ge1xuICBjb25zdCBkb3QgPSB4MSAqIHgyICsgeTEgKiB5MjtcbiAgY29uc3QgZGV0ID0geDEgKiB5MiAtIHkxICogeDI7XG4gIGNvbnN0IGFuZ2xlID0gKE1hdGguYXRhbjIoZGV0LCBkb3QpIC8gTWF0aC5QSSkgKiAxODA7XG4gIHJldHVybiAoYW5nbGUgKyAzNjApICUgMzYwO1xufTtcblxuY29uc3QgcmVuZGVyVGl0bGUgPSAoY3R4LCBzcHJpdGUsIHNjcmVlbkRpbWVuc2lvbnMpID0+IHtcbiAgY3R4LmRyYXdJbWFnZShzcHJpdGUsIDAsIDAsIHNjcmVlbkRpbWVuc2lvbnMud2lkdGgsIHNjcmVlbkRpbWVuc2lvbnMuaGVpZ2h0KTtcbn07XG5cbmNvbnN0IHJlbmRlckJhY2tncm91bmQgPSAoY3R4LCBzY3JlZW5EaW1lbnNpb25zKSA9PiB7XG4gIGN0eC5maWxsU3R5bGUgPSAnIzBiMjY0YSc7XG4gIGN0eC5maWxsUmVjdCgwLCAwLCBzY3JlZW5EaW1lbnNpb25zLndpZHRoLCBzY3JlZW5EaW1lbnNpb25zLmhlaWdodCk7XG59O1xuXG4vLyBDb25zdHJ1Y3QgYW4gYW5hZ3JhbSB1c2luZyBGaXNoZXItWWF0ZXMgc2h1ZmZsZVxuY29uc3QgYW5hZ3JhbSA9ICh3b3JkOiBzdHJpbmcpID0+IHtcbiAgbGV0IHJlc3VsdCA9IHdvcmQ7XG4gIHdoaWxlIChyZXN1bHQgPT09IHdvcmQpIHtcbiAgICBjb25zdCBhID0gd29yZC5zcGxpdCgnJyk7XG4gICAgY29uc3QgbiA9IGEubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IG4gLSAxOyBpID4gMDsgaS0tKSB7XG4gICAgICBjb25zdCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XG4gICAgICBjb25zdCB0bXAgPSBhW2ldO1xuICAgICAgYVtpXSA9IGFbal07XG4gICAgICBhW2pdID0gdG1wO1xuICAgIH1cbiAgICByZXN1bHQgPSBhLmpvaW4oJycpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5jb25zdCB0cmFuc2Zvcm1Cb2FyZCA9IChib2FyZDogQm9wQm9hcmQsIGxldmVsOiBudW1iZXIpID0+IHtcbiAgaWYgKGxldmVsID09PSAyIHx8IGxldmVsID09PSA0KSB7XG4gICAgYm9hcmQuc2V0Qm9wKGFuYWdyYW0oYm9hcmQuZ2V0Qm9wKCkpKTtcbiAgICBib2FyZC5zZXRQdWxsKGFuYWdyYW0oYm9hcmQuZ2V0UHVsbCgpKSk7XG4gICAgYm9hcmQuc2V0U3BpbihhbmFncmFtKGJvYXJkLmdldFNwaW4oKSkpO1xuICAgIGJvYXJkLnNldFR3aXN0KGFuYWdyYW0oYm9hcmQuZ2V0VHdpc3QoKSkpO1xuICAgIGJvYXJkLnNldEZsaWNrKGFuYWdyYW0oYm9hcmQuZ2V0RmxpY2soKSkpO1xuICB9XG5cbiAgcmV0dXJuIGJvYXJkO1xufTtcblxuY29uc3QgQmFuYW5hR2FtZSA9ICh7XG4gIGNhbnZhc1JlZixcbiAgZ2FtZVN0YXRlLFxuICBpc0Nvbm5lY3RlZCxcbiAgc2V0TG9hZGluZyxcbiAgY3VycmVudFBsYXllcixcbiAgc2VuZE1lc3NhZ2UsXG4gIHJlc3RhcnRHYW1lLFxuICBzY3JlZW5EaW1lbnNpb25zLFxufSkgPT4ge1xuICBjb25zdCBbcGxheWVyU3RhcnRlZCwgc2V0UGxheWVyU3RhcnRlZF0gPSB1c2VTdGF0ZTxib29sZWFuPihmYWxzZSk7XG4gIGNvbnN0IFtib2FyZCwgc2V0Qm9hcmRdID0gdXNlU3RhdGU8Qm9wQm9hcmQgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2luc3RydWN0aW9ucywgc2V0SW5zdHJ1Y3Rpb25zXSA9IHVzZVN0YXRlPEluc3RydWN0aW9uPihcbiAgICBuZXcgSW5zdHJ1Y3Rpb24oKVxuICApO1xuICBjb25zdCBbbGV2ZWwsIHNldExldmVsXSA9IHVzZVN0YXRlPG51bWJlcj4oMCk7XG4gIGNvbnN0IFtwcm9ncmVzcywgc2V0UHJvZ3Jlc3NdID0gdXNlU3RhdGU8bnVtYmVyPigwKTtcbiAgY29uc3QgW2hlYWx0aCwgc2V0SGVhbHRoXSA9IHVzZVN0YXRlPG51bWJlcj4oMCk7XG4gIGNvbnN0IFtyb3RhdGVBbmdsZSwgc2V0Um90YXRlQW5nbGVdID0gdXNlU3RhdGU8bnVtYmVyPigwKTtcbiAgY29uc3QgW2ZsaWNrZWQsIHNldEZsaWNrZWRdID0gdXNlU3RhdGU8Ym9vbGVhbj4oZmFsc2UpO1xuICBjb25zdCBbZ2FtZU92ZXIsIHNldEdhbWVPdmVyXSA9IHVzZVN0YXRlPGJvb2xlYW4+KGZhbHNlKTtcblxuICBjb25zdCBwdWxsVmFsdWUgPSB1c2VSZWY8bnVtYmVyPigxKTtcbiAgY29uc3Qgcm90YXRlU3RhcnRBbmdsZSA9IHVzZVJlZjxudW1iZXI+KDApO1xuICBjb25zdCByb3RhdGVDZW50ZXJQb3MgPSB1c2VSZWY8eyB4OiBudW1iZXI7IHk6IG51bWJlciB9Pih7IHg6IDAsIHk6IDAgfSk7XG4gIGNvbnN0IHJvdGF0ZVN0YXJ0VmVjdG9yID0gdXNlUmVmPHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfT4oeyB4OiAwLCB5OiAwIH0pO1xuXG4gIGNvbnN0IHsgaXNMb2FkaW5nLCBpbWFnZXMgfSA9IHVzZUltYWdlcygncHV6emxlL2JhbmFuYS8nLCBbXG4gICAgJ2JvcCcsXG4gICAgJ2JsdWUnLFxuICAgICdncmVlbicsXG4gICAgJ29yYW5nZScsXG4gICAgJ3llbGxvdycsXG4gICAgJ2xldmVsJyxcbiAgICAndGl0bGUnLFxuICAgICdnYW1lb3ZlcicsXG4gICAgJ3dpbicsXG4gIF0pO1xuXG4gIGNvbnN0IHsgaXNMb2FkaW5nOiBpc1NvdW5kTG9hZGluZywgc291bmRzIH0gPSB1c2VTb3VuZHMoJycsIFtcbiAgICAuLi5CQU5BTkFfU09VTkRfRUZGRUNUUyxcbiAgICBNQUlOX1NPVU5EX0VGRkVDVFMsXG4gIF0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFpc0xvYWRpbmcgJiYgIWlzU291bmRMb2FkaW5nKSB7XG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG4gIH0sIFtpc0xvYWRpbmcsIGlzU291bmRMb2FkaW5nXSk7XG5cbiAgLy8gUmVmcyBmb3IgdXNlIGluIGFuaW1hdGlvbiBmcmFtZXMuXG4gIGNvbnN0IGdhbWVTdGF0ZVJlZiA9IHVzZVJlZjxCYW5hbmFHYW1lU3RhdGUgfCBudWxsPihudWxsKTtcbiAgY29uc3QgdGlja1JlZiA9IHVzZVJlZjxudW1iZXI+KDApO1xuXG4gIGNvbnN0IGNsZWFudXAgPSAoKSA9PiB7XG4gICAgc2V0UGxheWVyU3RhcnRlZChmYWxzZSk7XG4gICAgZ2FtZVN0YXRlUmVmLmN1cnJlbnQgPSBudWxsO1xuICAgIHRpY2tSZWYuY3VycmVudCA9IDA7XG4gIH07XG5cbiAgY29uc3Qgb25TdGFydEdhbWUgPSAoKSA9PiB7XG4gICAgY29uc3QgYWN0aW9uID0gbmV3IEJhbmFuYUdhbWVBY3Rpb24oKTtcbiAgICBjb25zdCBiYXNlQWN0aW9uID0gbmV3IEdhbWVBY3Rpb24oKTtcbiAgICBiYXNlQWN0aW9uLnNldEFjdGlvbihBY3Rpb24uU1RBUlRfR0FNRSk7XG4gICAgYWN0aW9uLnNldEJhc2VBY3Rpb24oYmFzZUFjdGlvbik7XG4gICAgc2VuZE1lc3NhZ2UoYWN0aW9uKTtcbiAgICBzZXRQbGF5ZXJTdGFydGVkKHRydWUpO1xuICAgIHNvdW5kc1sncHVibGljL21haW5zZngnXS5wbGF5KCdzZWxlY3QnKTtcbiAgfTtcblxuICBjb25zdCBvblJlc3RhcnQgPSAoKSA9PiB7XG4gICAgaWYgKGlzR2FtZU92ZXIoZ2FtZVN0YXRlUmVmLmN1cnJlbnQpKSB7XG4gICAgICBzb3VuZHNbJ3B1YmxpYy9tYWluc2Z4J10ucGxheSgnc2VsZWN0Jyk7XG4gICAgICBjbGVhbnVwKCk7XG4gICAgICByZXN0YXJ0R2FtZSgpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvbkFjdGlvbiA9IChib3BBY3Rpb246IFByb3RvRW51bTxCb3BBY3Rpb25NYXA+LCB2YWx1ZT86IG51bWJlcikgPT4ge1xuICAgIGlmIChnYW1lU3RhdGVSZWYuY3VycmVudD8uZ2V0U3RhdGUoKSAhPT0gQmFuYW5hU3RhdGUuUExBWUlORykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGFjdGlvbiA9IG5ldyBCYW5hbmFHYW1lQWN0aW9uKCk7XG4gICAgYWN0aW9uLnNldEJvcEFjdGlvbihib3BBY3Rpb24pO1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBhY3Rpb24uc2V0VmFsdWUodmFsdWUpO1xuICAgIH1cbiAgICBzZW5kTWVzc2FnZShhY3Rpb24pO1xuXG4gICAgc291bmRzWydwdXp6bGUvYmFuYW5hL2VmZmVjdHMnXS52b2x1bWUoMC4yKTtcbiAgICBzb3VuZHNbJ3B1enpsZS9iYW5hbmEvZWZmZWN0cyddLnBsYXkoQk9QX1NPVU5EU1tib3BBY3Rpb25dKTtcbiAgfTtcblxuICAvLyBVcGRhdGUgY2xpZW50IHN0YXRlIG9uIGV2ZXJ5IHdlYnNvY2tldCBtZXNzYWdlLlxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGdhbWVTdGF0ZVJlZi5jdXJyZW50ID0gZ2FtZVN0YXRlO1xuICAgIHRpY2tSZWYuY3VycmVudCA9IGdhbWVTdGF0ZT8uZ2V0QmFzZVN0YXRlKCkuZ2V0VGljaygpID8/IDA7XG4gICAgaWYgKCFnYW1lU3RhdGUgfHwgIWlzQ29ubmVjdGVkIHx8IGlzTG9hZGluZyB8fCBpc1NvdW5kTG9hZGluZyB8fCBnYW1lT3Zlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0dhbWVPdmVyKGdhbWVTdGF0ZSkpIHtcbiAgICAgIHNvdW5kc1sncHVibGljL21haW5zZngnXS5wbGF5KFxuICAgICAgICBnYW1lU3RhdGUuZ2V0QmFzZVN0YXRlKCkuZ2V0U3RhdHVzKCkgPT09IEdhbWVTdGF0dXMuQ09NUExFVEVfV0lOXG4gICAgICAgICAgPyAnd2luJ1xuICAgICAgICAgIDogJ2xvc3MnXG4gICAgICApO1xuICAgICAgc2V0R2FtZU92ZXIodHJ1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3dpdGNoIChnYW1lU3RhdGUuZ2V0U3RhdGUoKSkge1xuICAgICAgY2FzZSBCYW5hbmFTdGF0ZS5XQUlUSU5HX0ZPUl9TVEFSVDpcbiAgICAgICAgLy8gV2FpdCBmb3IgcGxheWVycyB0byBzdGFydFxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBCYW5hbmFTdGF0ZS5MRVZFTF9UUkFOU0lUSU9OOlxuICAgICAgICBjb25zdCBuZXdMZXZlbCA9IGdhbWVTdGF0ZS5nZXRCYXNlU3RhdGUoKS5nZXRMZXZlbCgpID8/IDA7XG4gICAgICAgIGlmIChuZXdMZXZlbCAhPT0gbGV2ZWwpIHtcbiAgICAgICAgICBzZXRMZXZlbChuZXdMZXZlbCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBuZXdCb2FyZCA9IGdhbWVTdGF0ZS5nZXRCb2FyZHNMaXN0KClbY3VycmVudFBsYXllcl07XG4gICAgICAgIGlmIChuZXdCb2FyZCAmJiBuZXdCb2FyZCAhPT0gYm9hcmQpIHtcbiAgICAgICAgICBzZXRCb2FyZCh0cmFuc2Zvcm1Cb2FyZChuZXdCb2FyZCwgbmV3TGV2ZWwpKTtcbiAgICAgICAgICBzZXRJbnN0cnVjdGlvbnMobmV3IEluc3RydWN0aW9uKCkpO1xuICAgICAgICAgIHNldFJvdGF0ZUFuZ2xlKDApO1xuICAgICAgICAgIHB1bGxWYWx1ZS5jdXJyZW50ID0gMTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBCYW5hbmFTdGF0ZS5QTEFZSU5HOlxuICAgICAgICBjb25zdCBuZXdJbnN0cnVjdGlvbnMgPSBnYW1lU3RhdGUuZ2V0SW5zdHJ1Y3Rpb25zTGlzdCgpW2N1cnJlbnRQbGF5ZXJdO1xuICAgICAgICBpZiAobmV3SW5zdHJ1Y3Rpb25zPy5nZXRWZXJiKCkgIT09IGluc3RydWN0aW9ucy5nZXRWZXJiKCkpIHtcbiAgICAgICAgICBzZXRJbnN0cnVjdGlvbnMobmV3SW5zdHJ1Y3Rpb25zKTtcbiAgICAgICAgICBpZiAobmV3SW5zdHJ1Y3Rpb25zLmdldFZlcmIoKSkge1xuICAgICAgICAgICAgY29uc3QgdmVyYiA9IG5ld0luc3RydWN0aW9ucy5nZXRWZXJiKCk7XG4gICAgICAgICAgICBpZiAobGV2ZWwgPCAzKSB7XG4gICAgICAgICAgICAgIHNvdW5kc1sncHV6emxlL2JhbmFuYS93b3JkcyddLnBsYXkodmVyYik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzb3VuZHNbJ3B1enpsZS9iYW5hbmEvc291bmRzJ10ucGxheSh2ZXJiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzZXRQcm9ncmVzcyhnYW1lU3RhdGUuZ2V0UHJvZ3Jlc3MoKSA/PyAwKTtcbiAgICAgICAgc2V0SGVhbHRoKGdhbWVTdGF0ZS5nZXRIZWFsdGgoKSA/PyAwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9LCBbZ2FtZVN0YXRlXSk7XG5cbiAgLy8gUGFpbnQgZnJhbWVzIG9uIHRoZSBjYW52YXMuXG4gIGNvbnN0IHJlbmRlciA9ICh0aWNrKSA9PiB7XG4gICAgaWYgKGlzTG9hZGluZyB8fCBpc1NvdW5kTG9hZGluZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGN0eCA9IGNhbnZhc1JlZi5jdXJyZW50LmdldENvbnRleHQoJzJkJyk7XG4gICAgY29uc3Qgc3RhdHVzID1cbiAgICAgIGdhbWVTdGF0ZVJlZi5jdXJyZW50Py5nZXRCYXNlU3RhdGUoKT8uZ2V0U3RhdHVzKCkgPz9cbiAgICAgIEdhbWVTdGF0dXMuV0FJVElOR19GT1JfU1RBUlQ7XG4gICAgY29uc3Qgc3RhdGUgPVxuICAgICAgZ2FtZVN0YXRlUmVmLmN1cnJlbnQ/LmdldFN0YXRlKCkgPz8gQmFuYW5hU3RhdGUuV0FJVElOR19GT1JfU1RBUlQ7XG5cbiAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHNjcmVlbkRpbWVuc2lvbnMud2lkdGgsIHNjcmVlbkRpbWVuc2lvbnMuaGVpZ2h0KTtcbiAgICBpZiAoc3RhdGUgPT09IEJhbmFuYVN0YXRlLldBSVRJTkdfRk9SX1NUQVJUKSB7XG4gICAgICByZW5kZXJUaXRsZShjdHgsIGltYWdlc1sndGl0bGUnXSwgc2NyZWVuRGltZW5zaW9ucyk7XG4gICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gQmFuYW5hU3RhdGUuTEVWRUxfVFJBTlNJVElPTikge1xuICAgICAgcmVuZGVyVGl0bGUoY3R4LCBpbWFnZXNbJ2xldmVsJ10sIHNjcmVlbkRpbWVuc2lvbnMpO1xuICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBHYW1lU3RhdHVzLkNPTVBMRVRFX0xPU1MpIHtcbiAgICAgIHJlbmRlclRpdGxlKGN0eCwgaW1hZ2VzWydnYW1lb3ZlciddLCBzY3JlZW5EaW1lbnNpb25zKTtcbiAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gR2FtZVN0YXR1cy5DT01QTEVURV9XSU4pIHtcbiAgICAgIHJlbmRlclRpdGxlKGN0eCwgaW1hZ2VzWyd3aW4nXSwgc2NyZWVuRGltZW5zaW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbmRlckJhY2tncm91bmQoY3R4LCBzY3JlZW5EaW1lbnNpb25zKTtcbiAgICB9XG4gIH07XG5cbiAgdXNlQW5pbWF0aW9uRnJhbWUocmVuZGVyLCB0aWNrUmVmLCBbYm9hcmRdKTtcblxuICBjb25zdCBzdGF0dXMgPVxuICAgIGdhbWVTdGF0ZT8uZ2V0QmFzZVN0YXRlKCkuZ2V0U3RhdHVzKCkgPz8gR2FtZVN0YXR1cy5XQUlUSU5HX0ZPUl9TVEFSVDtcbiAgY29uc3Qgc3RhdGUgPSBnYW1lU3RhdGU/LmdldFN0YXRlKCkgPz8gQmFuYW5hU3RhdGUuV0FJVElOR19GT1JfU1RBUlQ7XG4gIGNvbnN0IHBsYXllcnMgPSBnYW1lU3RhdGU/LmdldEJhc2VTdGF0ZSgpLmdldFBsYXllcnNMaXN0KCkgPz8gW107XG4gIGNvbnN0IHRpY2sgPSBnYW1lU3RhdGU/LmdldEJhc2VTdGF0ZSgpLmdldFRpY2soKSA/PyAwO1xuXG4gIGlmIChpc0xvYWRpbmcgfHwgaXNTb3VuZExvYWRpbmcpIHtcbiAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9XCJhYnMtY2VudGVyIHdoaXRlXCI+TG9hZGluZy4uLjwvZGl2PjtcbiAgfVxuXG4gIGNvbnN0IGRyYWdEaXN0YW5jZSA9IE1hdGgucm91bmQoc2NyZWVuRGltZW5zaW9ucy53aWR0aCAvIDI1KTtcblxuICBjb25zdCB7IGNsYXNzTmFtZTogbG9iYnlDbGFzc05hbWUsIHN0eWxlczogbG9iYnlTdHlsZXMgfSA9IGNzcy5yZXNvbHZlYFxuICAgIGRpdiB7XG4gICAgICBjb2xvcjogI2ZmZjtcbiAgICAgIHRvcDogODAlO1xuICAgIH1cbiAgYDtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICB7aXNHYW1lT3ZlcihnYW1lU3RhdGUpID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwid2luTG9zZSBtZXNzYWdlIGNlbnRlclwiPlxuICAgICAgICAgICAgPHA+XG4gICAgICAgICAgICAgIHtzdGF0dXMgPT09IEdhbWVTdGF0dXMuQ09NUExFVEVfV0lOXG4gICAgICAgICAgICAgICAgPyAnQkFUVExFU0hJUCBXT04hJ1xuICAgICAgICAgICAgICAgIDogJ0dBTUUgT1ZFUid9XG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJib3R0b20gbWVzc2FnZSBjZW50ZXJcIj5cbiAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17b25SZXN0YXJ0fT5SZXN0YXJ0PC9idXR0b24+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvPlxuICAgICAgKSA6IHN0YXRlID09PSBCYW5hbmFTdGF0ZS5XQUlUSU5HX0ZPUl9TVEFSVCA/IChcbiAgICAgICAgPExvYmJ5XG4gICAgICAgICAgcGxheWVyU3RhcnRlZD17cGxheWVyU3RhcnRlZH1cbiAgICAgICAgICBpc0Nvbm5lY3RlZD17aXNDb25uZWN0ZWR9XG4gICAgICAgICAgcGxheWVycz17cGxheWVyc31cbiAgICAgICAgICBjdXJyZW50UGxheWVyPXtjdXJyZW50UGxheWVyfVxuICAgICAgICAgIHN0YXJ0QnV0dG9uPXtcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwic3RhcnRcIiBvbkNsaWNrPXtvblN0YXJ0R2FtZX0+XG4gICAgICAgICAgICAgIFJlYWR5IHRvIHN0YXJ0XG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICB9XG4gICAgICAgICAgY29uZmlybUJ1dHRvbj17XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cInN0YXJ0XCIgb25DbGljaz17b25TdGFydEdhbWV9PlxuICAgICAgICAgICAgICBTdGFydCBnYW1lXG4gICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVqb2luQnV0dG9uPXtcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwic3RhcnRcIiBvbkNsaWNrPXtyZXN0YXJ0R2FtZX0+XG4gICAgICAgICAgICAgIFJlam9pbiBsb2JieVxuICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlcXVpcmVkUGxheWVycz17Mn1cbiAgICAgICAgICBjbGFzc05hbWU9e2xvYmJ5Q2xhc3NOYW1lfVxuICAgICAgICAvPlxuICAgICAgKSA6IHN0YXRlID09PSBCYW5hbmFTdGF0ZS5MRVZFTF9UUkFOU0lUSU9OID8gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxldmVsXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0b3Agd2F2ZSBvdmVybGF5XCI+XG4gICAgICAgICAgICA8aDI+V0FWRSB7bGV2ZWwgKyAxfSBBUFBST0FDSElORzwvaDI+XG4gICAgICAgICAgICA8aDM+WW91ciByb2xlOiB7Ym9hcmQ/LmdldFNoaXAoKX08L2gzPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYm90dG9tIG92ZXJsYXlcIj5cbiAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJyZWRcIj57V0FSTklOR1NbbGV2ZWxdfTwvaDM+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSA6IChcbiAgICAgICAgc3RhdGUgPT09IEJhbmFuYVN0YXRlLlBMQVlJTkcgJiZcbiAgICAgICAgYm9hcmQgJiYgKFxuICAgICAgICAgIDw+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRvcCBvdmVybGF5XCI+XG4gICAgICAgICAgICAgIDxkaXY+V2F2ZSB7bGV2ZWwgKyAxfTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImJvdHRvbSBvdmVybGF5XCI+XG4gICAgICAgICAgICAgIEluc3RydWN0aW9uczp7JyAnfVxuICAgICAgICAgICAgICB7aW5zdHJ1Y3Rpb25zLmdldFRleHQoKSA/IChcbiAgICAgICAgICAgICAgICA8c3Bhbj57aW5zdHJ1Y3Rpb25zLmdldFRleHQoKX08L3NwYW4+XG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgaW5zdHJ1Y3Rpb25zLmdldFZlcmIoKSAmJiAoXG4gICAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAge2xldmVsID09PSAwID8gaW5zdHJ1Y3Rpb25zLmdldFZlcmIoKSA6ICc/Pz8nfSBpdFxuICAgICAgICAgICAgICAgICAgICB7aW5zdHJ1Y3Rpb25zLmdldFZhbHVlKClcbiAgICAgICAgICAgICAgICAgICAgICA/IGAgdG8gJHtpbnN0cnVjdGlvbnMuZ2V0VmFsdWUoKX1gXG4gICAgICAgICAgICAgICAgICAgICAgOiAnJ31cbiAgICAgICAgICAgICAgICAgICAgIXsnICd9XG4gICAgICAgICAgICAgICAgICAgIHtpbnN0cnVjdGlvbnMuZ2V0RXhwaXJ5VGljaygpID4gMCAmJlxuICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlUaW1lTGVmdChpbnN0cnVjdGlvbnMuZ2V0RXhwaXJ5VGljaygpIC0gdGljaywgMTApfVxuICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInB1bGwgYnV0dG9uXCI+XG4gICAgICAgICAgICAgIDxEcmFnZ2FibGVcbiAgICAgICAgICAgICAgICBheGlzPVwieFwiXG4gICAgICAgICAgICAgICAgYm91bmRzPXt7IGxlZnQ6IGRyYWdEaXN0YW5jZSwgcmlnaHQ6IGRyYWdEaXN0YW5jZSAqIDUgfX1cbiAgICAgICAgICAgICAgICBkZWZhdWx0UG9zaXRpb249e3sgeDogZHJhZ0Rpc3RhbmNlLCB5OiAwIH19XG4gICAgICAgICAgICAgICAgcG9zaXRpb25PZmZzZXQ9e3sgeDogLWRyYWdEaXN0YW5jZSAvIDQsIHk6IDAgfX1cbiAgICAgICAgICAgICAgICBncmlkPXtbZHJhZ0Rpc3RhbmNlLCAwXX1cbiAgICAgICAgICAgICAgICBvbkRyYWc9eyhlLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICBwdWxsVmFsdWUuY3VycmVudCA9IE1hdGguZmxvb3IoZGF0YS54IC8gZHJhZ0Rpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIG9uU3RvcD17KCkgPT4gb25BY3Rpb24oQm9wQWN0aW9uLlBVTEwsIHB1bGxWYWx1ZS5jdXJyZW50KX1cbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgIHNyYz17aW1hZ2VzWydibHVlJ10uc3JjfVxuICAgICAgICAgICAgICAgICAgYWx0PXtgJHtib2FyZC5nZXRQdWxsKCl9IGl0IWB9XG4gICAgICAgICAgICAgICAgICBkcmFnZ2FibGU9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjEwMCVcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvRHJhZ2dhYmxlPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic3BpbiBidXR0b25cIlxuICAgICAgICAgICAgICBzdHlsZT17e1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogYHJvdGF0ZSgke3JvdGF0ZUFuZ2xlfWRlZylgLFxuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8RHJhZ2dhYmxlXG4gICAgICAgICAgICAgICAgYXhpcz1cIm5vbmVcIlxuICAgICAgICAgICAgICAgIG9uU3RhcnQ9eyhlLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCB7IGNsaWVudFgsIGNsaWVudFkgfSA9IGUgYXMgTW91c2VFdmVudDtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY3QgPSAoZS50YXJnZXQgYXMgRWxlbWVudCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICAgICAgICByb3RhdGVTdGFydEFuZ2xlLmN1cnJlbnQgPSByb3RhdGVBbmdsZTtcbiAgICAgICAgICAgICAgICAgIHJvdGF0ZUNlbnRlclBvcy5jdXJyZW50LnggPSByZWN0LmxlZnQgKyByZWN0LndpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICAgIHJvdGF0ZUNlbnRlclBvcy5jdXJyZW50LnkgPSByZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgIHJvdGF0ZVN0YXJ0VmVjdG9yLmN1cnJlbnQueCA9XG4gICAgICAgICAgICAgICAgICAgIGNsaWVudFggLSByb3RhdGVDZW50ZXJQb3MuY3VycmVudC54O1xuICAgICAgICAgICAgICAgICAgcm90YXRlU3RhcnRWZWN0b3IuY3VycmVudC55ID1cbiAgICAgICAgICAgICAgICAgICAgY2xpZW50WSAtIHJvdGF0ZUNlbnRlclBvcy5jdXJyZW50Lnk7XG4gICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICBvbkRyYWc9eyhlLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICBjb25zdCB7IGNsaWVudFgsIGNsaWVudFkgfSA9IGUgYXMgTW91c2VFdmVudDtcbiAgICAgICAgICAgICAgICAgIC8vIENsYW1wIHRoZSBtYXhpbXVtIGFtb3VudCB0aGF0IHdlIGNhbiBtb3ZlIHBlciBmcmFtZS5cbiAgICAgICAgICAgICAgICAgIGNvbnN0IHJvdGF0ZVZlY3RvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogY2xpZW50WCAtIHJvdGF0ZUNlbnRlclBvcy5jdXJyZW50LngsXG4gICAgICAgICAgICAgICAgICAgIHk6IGNsaWVudFkgLSByb3RhdGVDZW50ZXJQb3MuY3VycmVudC55LFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIHNldFJvdGF0ZUFuZ2xlKFxuICAgICAgICAgICAgICAgICAgICAoZ2V0QW5nbGUocm90YXRlU3RhcnRWZWN0b3IuY3VycmVudCwgcm90YXRlVmVjdG9yKSArXG4gICAgICAgICAgICAgICAgICAgICAgcm90YXRlU3RhcnRBbmdsZS5jdXJyZW50KSAlXG4gICAgICAgICAgICAgICAgICAgICAgMzYwXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgb25TdG9wPXsoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAvLyBTbmFwIHRvIHRoZSBuZWFyZXN0IGdlYXJcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGdlYXJOdW1iZXIgPSBNYXRoLnJvdW5kKHJvdGF0ZUFuZ2xlIC8gNDUpICUgODtcbiAgICAgICAgICAgICAgICAgIHNldFJvdGF0ZUFuZ2xlKGdlYXJOdW1iZXIgKiA0NSk7XG4gICAgICAgICAgICAgICAgICBvbkFjdGlvbihCb3BBY3Rpb24uU1BJTiwgZ2Vhck51bWJlciArIDEpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgICBzcmM9e2ltYWdlc1snb3JhbmdlJ10uc3JjfVxuICAgICAgICAgICAgICAgICAgYWx0PXtgJHtib2FyZC5nZXRTcGluKCl9IGl0IWB9XG4gICAgICAgICAgICAgICAgICBkcmFnZ2FibGU9XCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgICB3aWR0aD1cIjEwMCVcIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvRHJhZ2dhYmxlPlxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cInR3aXN0IGJ1dHRvblwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQWN0aW9uKEJvcEFjdGlvbi5UV0lTVCl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBzcmM9e2ltYWdlc1sneWVsbG93J10uc3JjfVxuICAgICAgICAgICAgICAgIGFsdD17YCR7Ym9hcmQuZ2V0VHdpc3QoKX0gaXQhYH1cbiAgICAgICAgICAgICAgICB3aWR0aD1cIjEwMCVcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9hPlxuXG4gICAgICAgICAgICA8YVxuICAgICAgICAgICAgICBjbGFzc05hbWU9e2BmbGljayBidXR0b24gJHtmbGlja2VkID8gJ29uJyA6ICcnfWB9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRGbGlja2VkKCFmbGlja2VkKTtcbiAgICAgICAgICAgICAgICBvbkFjdGlvbihCb3BBY3Rpb24uRkxJQ0spO1xuICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgc3JjPXtpbWFnZXNbJ2dyZWVuJ10uc3JjfVxuICAgICAgICAgICAgICAgIGFsdD17YCR7Ym9hcmQuZ2V0RmxpY2soKX0gaXQhYH1cbiAgICAgICAgICAgICAgICB3aWR0aD1cIjEwMCVcIlxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9hPlxuXG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cImJvYXJkXCIgc3JjPXtpbWFnZXNbJ2JvcCddLnNyY30gYWx0PVwiXCIgd2lkdGg9XCI4MCVcIiAvPlxuXG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImFicy1jZW50ZXIgYm9wIGJ1dHRvblwiXG4gICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG9uQWN0aW9uKEJvcEFjdGlvbi5CT1ApfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICB7Ym9hcmQuZ2V0Qm9wKCl9IGl0IVxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicHVsbC10ZXh0IHRleHRcIj57Ym9hcmQuZ2V0UHVsbCgpfSBpdCE8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic3Bpbi10ZXh0IHRleHRcIj57Ym9hcmQuZ2V0U3BpbigpfSBpdCE8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxpY2stdGV4dCB0ZXh0XCI+e2JvYXJkLmdldEZsaWNrKCl9IGl0ITwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0d2lzdC10ZXh0IHRleHRcIj57Ym9hcmQuZ2V0VHdpc3QoKX0gaXQhPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2VudGVyIGhlYWx0aC1vdmVybGF5XCJcbiAgICAgICAgICAgICAgc3R5bGU9e3tcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBgcmdiYSgyNTUsMCwwLCR7XG4gICAgICAgICAgICAgICAgICBoZWFsdGggPD0gNiA/ICg3IC0gaGVhbHRoKSAvIDIwIDogMFxuICAgICAgICAgICAgICAgIH0pYCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgPC8+XG4gICAgICAgIClcbiAgICAgICl9XG5cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgLmNlbnRlciB7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICByaWdodDogMDtcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIH1cblxuICAgICAgICAub3ZlcmxheSB7XG4gICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgZm9udC1zaXplOiAyNXB4O1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5oZWFsdGgtb3ZlcmxheSB7XG4gICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1dHRvbiB7XG4gICAgICAgICAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjE1KTtcbiAgICAgICAgICBib3JkZXItY29sb3I6ICNmZmY7XG4gICAgICAgICAgY29sb3I6ICNmZmY7XG4gICAgICAgICAgcGFkZGluZzogNHB4IDE2cHg7XG4gICAgICAgICAgZm9udC1zaXplOiAyNHB4O1xuICAgICAgICB9XG5cbiAgICAgICAgYnV0dG9uOm5vdCguc3RhcnQpIHtcbiAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLmJ1dHRvbiB7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xuICAgICAgICB9XG5cbiAgICAgICAgLmJ1dHRvbjpob3ZlcixcbiAgICAgICAgLmJ1dHRvbjpmb2N1cyB7XG4gICAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgLmJ1dHRvbjpob3ZlciBpbWcge1xuICAgICAgICAgIGZpbHRlcjogYnJpZ2h0bmVzcyg4NSUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaW1nIHtcbiAgICAgICAgICB1c2VyLWRyYWc6IG5vbmU7XG4gICAgICAgIH1cblxuICAgICAgICAudG9wIHtcbiAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgICAgcGFkZGluZzogMTZweDtcbiAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaDIge1xuICAgICAgICAgIGZvbnQtc2l6ZTogM3ZtaW47XG4gICAgICAgICAgbWFyZ2luOiA4cHggMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGgzIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiA4cHg7XG4gICAgICAgICAgZm9udC1zaXplOiAyLjV2bWluO1xuICAgICAgICB9XG5cbiAgICAgICAgLndhdmUge1xuICAgICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgLm1lc3NhZ2Uge1xuICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMjVweDtcbiAgICAgICAgICB0b3A6IDQwJTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5ib3R0b20ge1xuICAgICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgICBwYWRkaW5nOiAxNnB4O1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICBsZWZ0OiAwO1xuICAgICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLmJvdHRvbS5tZXNzYWdlIHtcbiAgICAgICAgICB0b3A6IDgwJTtcbiAgICAgICAgfVxuXG4gICAgICAgIC53aW5Mb3NlLm1lc3NhZ2Uge1xuICAgICAgICAgIGNvbG9yOiAke3N0YXR1cyA9PT0gR2FtZVN0YXR1cy5DT01QTEVURV9XSU4gPyAnZ3JlZW4nIDogJ3JlZCd9O1xuICAgICAgICAgIGZvbnQtc2l6ZTogNTBweDtcbiAgICAgICAgICB0ZXh0LXNoYWRvdzogMnB4IDJweCAycHggIzAwMDtcbiAgICAgICAgICB0b3A6IDIwJTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5ib3Age1xuICAgICAgICAgIGJhY2tncm91bmQ6ICMwMDA7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgICBjb2xvcjogI2ZmZjtcbiAgICAgICAgICBmb250LXNpemU6IDI0cHg7XG4gICAgICAgICAgaGVpZ2h0OiAyNyU7XG4gICAgICAgICAgd2lkdGg6IDIwJTtcbiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgICAgIH1cblxuICAgICAgICAuYm9wOmZvY3VzLFxuICAgICAgICAuYm9wOmhvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjIyO1xuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC5wdWxsIHtcbiAgICAgICAgICBib3R0b206IDclO1xuICAgICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgICB3aWR0aDogMzAlO1xuICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNzUlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5wdWxsIGltZzpmb2N1cyxcbiAgICAgICAgLnB1bGwgaW1nOmhvdmVyIHtcbiAgICAgICAgICBjdXJzb3I6IGUtcmVzaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgLnNwaW4ge1xuICAgICAgICAgIGxlZnQ6IDc2JTtcbiAgICAgICAgICB0b3A6IDMzJTtcbiAgICAgICAgICB3aWR0aDogMTglO1xuICAgICAgICB9XG5cbiAgICAgICAgLnNwaW4gaW1nOmZvY3VzLFxuICAgICAgICAuc3BpbiBpbWc6aG92ZXIge1xuICAgICAgICAgIGN1cnNvcjogbndzZS1yZXNpemU7IC8vIFRPRE86IGFkZCBjdXN0b20gcm90YXRlIGN1cnNvclxuICAgICAgICB9XG5cbiAgICAgICAgLnR3aXN0IHtcbiAgICAgICAgICBib3R0b206IDQ0JTtcbiAgICAgICAgICBsZWZ0OiA3JTtcbiAgICAgICAgICB3aWR0aDogMTUlO1xuICAgICAgICB9XG5cbiAgICAgICAgLmZsaWNrIHtcbiAgICAgICAgICB0b3A6IDEzJTtcbiAgICAgICAgICByaWdodDogNDMuNSU7XG4gICAgICAgICAgd2lkdGg6IDE4JTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5mbGljay5vbiB7XG4gICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoNHB4LCAyMHB4KSByb3RhdGUoLTIwZGVnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5ib2FyZCB7XG4gICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgICAgIGxlZnQ6IDUwJTtcbiAgICAgICAgICB0b3A6IDUwJTtcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC5wdWxsLXRleHQge1xuICAgICAgICAgIGJvdHRvbTogMjIlO1xuICAgICAgICAgIHJpZ2h0OiA1NyU7XG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMjBkZWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLnNwaW4tdGV4dCB7XG4gICAgICAgICAgdG9wOiA0OCU7XG4gICAgICAgICAgcmlnaHQ6IDE3JTtcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMzVkZWcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLmZsaWNrLXRleHQge1xuICAgICAgICAgIHRvcDogMTclO1xuICAgICAgICAgIGxlZnQ6IDU2JTtcbiAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxOGRlZyk7XG4gICAgICAgIH1cblxuICAgICAgICAudHdpc3QtdGV4dCB7XG4gICAgICAgICAgdG9wOiA0NiU7XG4gICAgICAgICAgbGVmdDogMjAlO1xuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKC0zNWRlZyk7XG4gICAgICAgIH1cblxuICAgICAgICAudGV4dCB7XG4gICAgICAgICAgZm9udC1zaXplOiAyMHB4O1xuICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgICAge2xvYmJ5U3R5bGVzfVxuICAgIDwvPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBHYW1lOiBCYW5hbmFHYW1lLFxuICBTdGF0ZTogQmFuYW5hR2FtZVN0YXRlLFxufTtcbiJdfQ== */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/banana.tsx */\"),\n    className: \"jsx-3538008974\"\n  },\n      lobbyClassName = _styles$className.className,\n      lobbyStyles = _styles$className.styles;\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_2___default.a.Fragment, null, Object(utils_game__WEBPACK_IMPORTED_MODULE_9__[\"isGameOver\"])(gameState) ? __jsx(react__WEBPACK_IMPORTED_MODULE_2___default.a.Fragment, null, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"winLose message center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 13\n    }\n  }, status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'BATTLESHIP WON!' : 'GAME OVER')), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"bottom message center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    onClick: onRestart,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 13\n    }\n  }, \"Restart\"))) : state === BananaState.WAITING_FOR_START ? __jsx(components_groupsolve_lobby__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n    playerStarted: playerStarted,\n    isConnected: isConnected,\n    players: players,\n    currentPlayer: currentPlayer,\n    startButton: __jsx(\"button\", {\n      onClick: onStartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"start\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 13\n      }\n    }, \"Ready to start\"),\n    confirmButton: __jsx(\"button\", {\n      onClick: onStartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"start\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 13\n      }\n    }, \"Start game\"),\n    rejoinButton: __jsx(\"button\", {\n      onClick: restartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"start\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 13\n      }\n    }, \"Rejoin lobby\"),\n    requiredPlayers: 2,\n    className: lobbyClassName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 9\n    }\n  }) : state === BananaState.LEVEL_TRANSITION ? __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"level\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"top wave overlay\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 11\n    }\n  }, __jsx(\"h2\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 13\n    }\n  }, \"WAVE \", level + 1, \" APPROACHING\"), __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 13\n    }\n  }, \"Your role: \", board === null || board === void 0 ? void 0 : board.getShip())), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"bottom overlay\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 11\n    }\n  }, __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"red\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 13\n    }\n  }, WARNINGS[level]))) : state === BananaState.PLAYING && board && __jsx(react__WEBPACK_IMPORTED_MODULE_2___default.a.Fragment, null, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"top overlay\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 15\n    }\n  }, \"Wave \", level + 1)), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"bottom overlay\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 13\n    }\n  }, \"Instructions:\", ' ', instructions.getText() ? __jsx(\"span\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 17\n    }\n  }, instructions.getText()) : instructions.getVerb() && __jsx(\"span\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 19\n    }\n  }, level === 0 ? instructions.getVerb() : '???', \" it\", instructions.getValue() ? \" to \".concat(instructions.getValue()) : '', \"!\", ' ', instructions.getExpiryTick() > 0 && Object(utils_timer__WEBPACK_IMPORTED_MODULE_8__[\"displayTimeLeft\"])(instructions.getExpiryTick() - tick, 10))), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"pull button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 13\n    }\n  }, __jsx(react_draggable__WEBPACK_IMPORTED_MODULE_3___default.a, {\n    axis: \"x\",\n    bounds: {\n      left: dragDistance,\n      right: dragDistance * 5\n    },\n    defaultPosition: {\n      x: dragDistance,\n      y: 0\n    },\n    positionOffset: {\n      x: -dragDistance / 4,\n      y: 0\n    },\n    grid: [dragDistance, 0],\n    onDrag: function onDrag(e, data) {\n      pullValue.current = Math.floor(data.x / dragDistance);\n    },\n    onStop: function onStop() {\n      return onAction(schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BopAction\"].PULL, pullValue.current);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 15\n    }\n  }, __jsx(\"img\", {\n    src: images['blue'].src,\n    alt: \"\".concat(board.getPull(), \" it!\"),\n    draggable: \"false\",\n    width: \"100%\",\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 17\n    }\n  }))), __jsx(\"div\", {\n    style: {\n      transform: \"rotate(\".concat(rotateAngle, \"deg)\")\n    },\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"spin button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 13\n    }\n  }, __jsx(react_draggable__WEBPACK_IMPORTED_MODULE_3___default.a, {\n    axis: \"none\",\n    onStart: function onStart(e, data) {\n      var _ref4 = e,\n          clientX = _ref4.clientX,\n          clientY = _ref4.clientY;\n      var rect = e.target.getBoundingClientRect();\n      rotateStartAngle.current = rotateAngle;\n      rotateCenterPos.current.x = rect.left + rect.width / 2;\n      rotateCenterPos.current.y = rect.top + rect.height / 2;\n      rotateStartVector.current.x = clientX - rotateCenterPos.current.x;\n      rotateStartVector.current.y = clientY - rotateCenterPos.current.y;\n    },\n    onDrag: function onDrag(e, data) {\n      var _ref5 = e,\n          clientX = _ref5.clientX,\n          clientY = _ref5.clientY; // Clamp the maximum amount that we can move per frame.\n\n      var rotateVector = {\n        x: clientX - rotateCenterPos.current.x,\n        y: clientY - rotateCenterPos.current.y\n      };\n      setRotateAngle((getAngle(rotateStartVector.current, rotateVector) + rotateStartAngle.current) % 360);\n    },\n    onStop: function onStop() {\n      // Snap to the nearest gear\n      var gearNumber = Math.round(rotateAngle / 45) % 8;\n      setRotateAngle(gearNumber * 45);\n      onAction(schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BopAction\"].SPIN, gearNumber + 1);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 15\n    }\n  }, __jsx(\"img\", {\n    src: images['orange'].src,\n    alt: \"\".concat(board.getSpin(), \" it!\"),\n    draggable: \"false\",\n    width: \"100%\",\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 17\n    }\n  }))), __jsx(\"a\", {\n    onClick: function onClick() {\n      return onAction(schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BopAction\"].TWIST);\n    },\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"twist button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 13\n    }\n  }, __jsx(\"img\", {\n    src: images['yellow'].src,\n    alt: \"\".concat(board.getTwist(), \" it!\"),\n    width: \"100%\",\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 15\n    }\n  })), __jsx(\"a\", {\n    onClick: function onClick() {\n      setFlicked(!flicked);\n      onAction(schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BopAction\"].FLICK);\n    },\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"flick button \".concat(flicked ? 'on' : ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 13\n    }\n  }, __jsx(\"img\", {\n    src: images['green'].src,\n    alt: \"\".concat(board.getFlick(), \" it!\"),\n    width: \"100%\",\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 548,\n      columnNumber: 15\n    }\n  })), __jsx(\"img\", {\n    src: images['bop'].src,\n    alt: \"\",\n    width: \"80%\",\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"board\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    onClick: function onClick() {\n      return onAction(schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BopAction\"].BOP);\n    },\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"abs-center bop button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 557,\n      columnNumber: 13\n    }\n  }, board.getBop(), \" it!\"), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"pull-text text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 13\n    }\n  }, board.getPull(), \" it!\"), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"spin-text text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 565,\n      columnNumber: 13\n    }\n  }, board.getSpin(), \" it!\"), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"flick-text text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 13\n    }\n  }, board.getFlick(), \" it!\"), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"twist-text text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 13\n    }\n  }, board.getTwist(), \" it!\"), __jsx(\"div\", {\n    style: {\n      background: \"rgba(255,0,0,\".concat(health <= 6 ? (7 - health) / 20 : 0, \")\")\n    },\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a.dynamic([[\"3953511242\", [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"center health-overlay\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 13\n    }\n  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_1___default.a, {\n    id: \"3953511242\",\n    dynamic: [status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red'],\n    __self: _this\n  }, \".center.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:absolute;left:0;right:0;text-align:center;}.overlay.__jsx-style-dynamic-selector{color:#fff;font-size:25px;position:absolute;}.health-overlay.__jsx-style-dynamic-selector{top:0;bottom:0;}button.__jsx-style-dynamic-selector{background:rgba(0,0,0,0.15);border-color:#fff;color:#fff;padding:4px 16px;font-size:24px;}button.__jsx-style-dynamic-selector:not(.start){position:absolute;-webkit-transform:translateX(-50%);-ms-transform:translateX(-50%);transform:translateX(-50%);}.button.__jsx-style-dynamic-selector{position:absolute;pointer-events:auto;}.button.__jsx-style-dynamic-selector:hover,.button.__jsx-style-dynamic-selector:focus{cursor:pointer;}.button.__jsx-style-dynamic-selector:hover img.__jsx-style-dynamic-selector{-webkit-filter:brightness(85%);filter:brightness(85%);}img.__jsx-style-dynamic-selector{-webkit-user-drag:none;-moz-user-drag:none;-ms-user-drag:none;user-drag:none;}.top.__jsx-style-dynamic-selector{top:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;padding:16px;left:0;right:0;}h2.__jsx-style-dynamic-selector{font-size:3vmin;margin:8px 0;}h3.__jsx-style-dynamic-selector{margin-top:8px;font-size:2.5vmin;}.wave.__jsx-style-dynamic-selector{-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;text-align:center;}.message.__jsx-style-dynamic-selector{color:#fff;font-size:25px;top:40%;}.bottom.__jsx-style-dynamic-selector{bottom:0;padding:16px;text-align:center;left:0;right:0;}.bottom.message.__jsx-style-dynamic-selector{top:80%;}.winLose.message.__jsx-style-dynamic-selector{color:\".concat(status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_6__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', \";font-size:50px;text-shadow:2px 2px 2px #000;top:20%;}.bop.__jsx-style-dynamic-selector{background:#000;border-radius:50%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;color:#fff;font-size:24px;height:27%;width:20%;text-align:center;}.bop.__jsx-style-dynamic-selector:focus,.bop.__jsx-style-dynamic-selector:hover{background-color:#222;cursor:pointer;}.pull.__jsx-style-dynamic-selector{bottom:7%;left:50%;width:30%;-webkit-transform:translateX(-75%);-ms-transform:translateX(-75%);transform:translateX(-75%);}.pull.__jsx-style-dynamic-selector img.__jsx-style-dynamic-selector:focus,.pull.__jsx-style-dynamic-selector img.__jsx-style-dynamic-selector:hover{cursor:e-resize;}.spin.__jsx-style-dynamic-selector{left:76%;top:33%;width:18%;}.spin.__jsx-style-dynamic-selector img.__jsx-style-dynamic-selector:focus,.spin.__jsx-style-dynamic-selector img.__jsx-style-dynamic-selector:hover{cursor:nwse-resize;}.twist.__jsx-style-dynamic-selector{bottom:44%;left:7%;width:15%;}.flick.__jsx-style-dynamic-selector{top:13%;right:43.5%;width:18%;}.flick.on.__jsx-style-dynamic-selector{-webkit-transform:translate(4px,20px) rotate(-20deg);-ms-transform:translate(4px,20px) rotate(-20deg);transform:translate(4px,20px) rotate(-20deg);}.board.__jsx-style-dynamic-selector{position:absolute;pointer-events:none;left:50%;top:50%;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);}.pull-text.__jsx-style-dynamic-selector{bottom:22%;right:57%;-webkit-transform:rotate(20deg);-ms-transform:rotate(20deg);transform:rotate(20deg);}.spin-text.__jsx-style-dynamic-selector{top:48%;right:17%;-webkit-transform:rotate(-35deg);-ms-transform:rotate(-35deg);transform:rotate(-35deg);}.flick-text.__jsx-style-dynamic-selector{top:17%;left:56%;-webkit-transform:rotate(18deg);-ms-transform:rotate(18deg);transform:rotate(18deg);}.twist-text.__jsx-style-dynamic-selector{top:46%;left:20%;-webkit-transform:rotate(-35deg);-ms-transform:rotate(-35deg);transform:rotate(-35deg);}.text.__jsx-style-dynamic-selector{font-size:20px;position:absolute;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/banana.tsx */\")), lobbyStyles);\n};\n\n_s(BananaGame, \"FgQZeYuoPOdIkluNIYQUwKMy1aw=\", false, function () {\n  return [utils_assets__WEBPACK_IMPORTED_MODULE_7__[\"useImages\"], utils_assets__WEBPACK_IMPORTED_MODULE_7__[\"useSounds\"], utils_animation__WEBPACK_IMPORTED_MODULE_10__[\"useAnimationFrame\"]];\n});\n\n_c = BananaGame;\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  Game: BananaGame,\n  State: schema_protos_banana_pb__WEBPACK_IMPORTED_MODULE_5__[\"BananaGameState\"]\n});\n\nvar _c;\n\n$RefreshReg$(_c, \"BananaGame\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/groupsolve/banana.tsx\n");

/***/ }),

/***/ "./components/groupsolve/lobby.tsx":
/*!*****************************************!*\
  !*** ./components/groupsolve/lobby.tsx ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ \"./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\nvar _this = undefined,\n    _jsxFileName = \"/vagrant/client/components/groupsolve/lobby.tsx\";\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement;\n\nvar MAX_PLAYERS = 6;\n\nvar Lobby = function Lobby(_ref) {\n  var playerStarted = _ref.playerStarted,\n      isConnected = _ref.isConnected,\n      title = _ref.title,\n      players = _ref.players,\n      currentPlayer = _ref.currentPlayer,\n      playerSprite = _ref.playerSprite,\n      startButton = _ref.startButton,\n      confirmButton = _ref.confirmButton,\n      rejoinButton = _ref.rejoinButton,\n      className = _ref.className,\n      _ref$requiredPlayers = _ref.requiredPlayers,\n      requiredPlayers = _ref$requiredPlayers === void 0 ? 1 : _ref$requiredPlayers,\n      props = Object(_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref, [\"playerStarted\", \"isConnected\", \"title\", \"players\", \"currentPlayer\", \"playerSprite\", \"startButton\", \"confirmButton\", \"rejoinButton\", \"className\", \"requiredPlayers\"]);\n\n  var allStarted = isConnected && players.every(function (player) {\n    return player.getReady();\n  }) && players.length >= requiredPlayers;\n  var playersNeeded = Math.max(requiredPlayers - 1, players.filter(function (player) {\n    return !player.getReady();\n  }).length);\n  return __jsx(\"div\", Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props, {\n    className: \"jsx-243751013\" + \" \" + (props && props.className != null && props.className || \"abs-center center \".concat(className !== null && className !== void 0 ? className : '')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }), title, allStarted ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, confirmButton, __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"Note: Once you begin a session, others won't be able to join until it ends.\")) : playerStarted && players.length >= requiredPlayers ? \"Waiting for \".concat(playersNeeded, \" other player\").concat(playersNeeded === 1 ? '' : 's', \" to join...\") : playerStarted ? \"(Minimum of \".concat(requiredPlayers, \" players required)\") : isConnected ? startButton : __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, rejoinButton, __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Game in session... \", __jsx(\"br\", {\n    className: \"jsx-243751013\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 32\n    }\n  }), \"Please wait for the current session to complete.\")), players.length > 0 && __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"(\", players.length, \" player\", players.length === 1 ? ' ' : 's ', \"in lobby)\"), playerSprite && __jsx(\"div\", {\n    className: \"jsx-243751013\" + \" \" + \"players flex-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, players.map(function (player, i) {\n    return __jsx(\"div\", {\n      key: i,\n      style: {\n        backgroundPosition: \"\".concat(i * 100 / (MAX_PLAYERS - 1), \"%\"),\n        backgroundImage: \"url(\".concat(playerSprite.url, \")\"),\n        backgroundSize: '600% 100%',\n        transform: \"scale(\".concat(i === currentPlayer ? 1 : 0.7, \")\"),\n        filter: player.getReady() ? 'none' : 'grayscale(1) opacity(80%)',\n        width: playerSprite.width,\n        height: playerSprite.height\n      },\n      className: \"jsx-243751013\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    });\n  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"243751013\",\n    __self: _this\n  }, \".small.jsx-243751013{font-size:1.8vmin;line-height:2.2vmin;margin-top:2.8vmin;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlHa0IsQUFHNkIsa0JBQ0Usb0JBQ0QsbUJBQ3JCIiwiZmlsZSI6Ii92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9nYW1lX3BiJztcbmltcG9ydCB7IGdldEltYWdlT2Zmc2V0IH0gZnJvbSAndXRpbHMvZ2FtZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHBsYXllclN0YXJ0ZWQ6IGJvb2xlYW47XG4gIGlzQ29ubmVjdGVkOiBib29sZWFuO1xuICB0aXRsZT86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcGxheWVyczogUGxheWVyW107XG4gIGN1cnJlbnRQbGF5ZXI6IG51bWJlcjtcbiAgcGxheWVyU3ByaXRlPzoge1xuICAgIHVybDogc3RyaW5nO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gIH07XG4gIHN0YXJ0QnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGNvbmZpcm1CdXR0b246IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcmVqb2luQnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIHJlcXVpcmVkUGxheWVycz86IG51bWJlcjtcbn1cblxuY29uc3QgTUFYX1BMQVlFUlMgPSA2O1xuXG5jb25zdCBMb2JieTogRnVuY3Rpb25Db21wb25lbnQ8XG4gIFByb3BzICYgT21pdDxSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+LCAndGl0bGUnPlxuPiA9ICh7XG4gIHBsYXllclN0YXJ0ZWQsXG4gIGlzQ29ubmVjdGVkLFxuICB0aXRsZSxcbiAgcGxheWVycyxcbiAgY3VycmVudFBsYXllcixcbiAgcGxheWVyU3ByaXRlLFxuICBzdGFydEJ1dHRvbixcbiAgY29uZmlybUJ1dHRvbixcbiAgcmVqb2luQnV0dG9uLFxuICBjbGFzc05hbWUsXG4gIHJlcXVpcmVkUGxheWVycyA9IDEsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGFsbFN0YXJ0ZWQgPVxuICAgIGlzQ29ubmVjdGVkICYmXG4gICAgcGxheWVycy5ldmVyeSgocGxheWVyKSA9PiBwbGF5ZXIuZ2V0UmVhZHkoKSkgJiZcbiAgICBwbGF5ZXJzLmxlbmd0aCA+PSByZXF1aXJlZFBsYXllcnM7XG5cbiAgY29uc3QgcGxheWVyc05lZWRlZCA9IE1hdGgubWF4KFxuICAgIHJlcXVpcmVkUGxheWVycyAtIDEsXG4gICAgcGxheWVycy5maWx0ZXIoKHBsYXllcikgPT4gIXBsYXllci5nZXRSZWFkeSgpKS5sZW5ndGhcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgYWJzLWNlbnRlciBjZW50ZXIgJHtjbGFzc05hbWUgPz8gJyd9YH0gey4uLnByb3BzfT5cbiAgICAgIHt0aXRsZX1cbiAgICAgIHthbGxTdGFydGVkID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtjb25maXJtQnV0dG9ufVxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgICBOb3RlOiBPbmNlIHlvdSBiZWdpbiBhIHNlc3Npb24sIG90aGVycyB3b24ndCBiZSBhYmxlIHRvIGpvaW4gdW50aWxcbiAgICAgICAgICAgIGl0IGVuZHMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiBwbGF5ZXJTdGFydGVkICYmIHBsYXllcnMubGVuZ3RoID49IHJlcXVpcmVkUGxheWVycyA/IChcbiAgICAgICAgYFdhaXRpbmcgZm9yICR7cGxheWVyc05lZWRlZH0gb3RoZXIgcGxheWVyJHtcbiAgICAgICAgICBwbGF5ZXJzTmVlZGVkID09PSAxID8gJycgOiAncydcbiAgICAgICAgfSB0byBqb2luLi4uYFxuICAgICAgKSA6IHBsYXllclN0YXJ0ZWQgPyAoXG4gICAgICAgIGAoTWluaW11bSBvZiAke3JlcXVpcmVkUGxheWVyc30gcGxheWVycyByZXF1aXJlZClgXG4gICAgICApIDogaXNDb25uZWN0ZWQgPyAoXG4gICAgICAgIHN0YXJ0QnV0dG9uXG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZWpvaW5CdXR0b259XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj5cbiAgICAgICAgICAgIEdhbWUgaW4gc2Vzc2lvbi4uLiA8YnIgLz5cbiAgICAgICAgICAgIFBsZWFzZSB3YWl0IGZvciB0aGUgY3VycmVudCBzZXNzaW9uIHRvIGNvbXBsZXRlLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3BsYXllcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgKHtwbGF5ZXJzLmxlbmd0aH0gcGxheWVye3BsYXllcnMubGVuZ3RoID09PSAxID8gJyAnIDogJ3MgJ31cbiAgICAgICAgICBpbiBsb2JieSlcbiAgICAgICAgPC9wPlxuICAgICAgKX1cbiAgICAgIHtwbGF5ZXJTcHJpdGUgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllcnMgZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICB7cGxheWVycy5tYXAoKHBsYXllciwgaSkgPT4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBgJHsoaSAqIDEwMCkgLyAoTUFYX1BMQVlFUlMgLSAxKX0lYCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwbGF5ZXJTcHJpdGUudXJsfSlgLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjAwJSAxMDAlJyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2kgPT09IGN1cnJlbnRQbGF5ZXIgPyAxIDogMC43fSlgLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogcGxheWVyLmdldFJlYWR5KClcbiAgICAgICAgICAgICAgICAgID8gJ25vbmUnXG4gICAgICAgICAgICAgICAgICA6ICdncmF5c2NhbGUoMSkgb3BhY2l0eSg4MCUpJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogcGxheWVyU3ByaXRlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGxheWVyU3ByaXRlLmhlaWdodCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuc21hbGwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS44dm1pbjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMi4ydm1pbjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAyLjh2bWluO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2JieTtcbiJdfQ== */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/lobby.tsx */\"));\n};\n\n_c = Lobby;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Lobby);\n\nvar _c;\n\n$RefreshReg$(_c, \"Lobby\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9ncm91cHNvbHZlL2xvYmJ5LnRzeD85NjdiIl0sIm5hbWVzIjpbIk1BWF9QTEFZRVJTIiwiTG9iYnkiLCJwbGF5ZXJTdGFydGVkIiwiaXNDb25uZWN0ZWQiLCJ0aXRsZSIsInBsYXllcnMiLCJjdXJyZW50UGxheWVyIiwicGxheWVyU3ByaXRlIiwic3RhcnRCdXR0b24iLCJjb25maXJtQnV0dG9uIiwicmVqb2luQnV0dG9uIiwiY2xhc3NOYW1lIiwicmVxdWlyZWRQbGF5ZXJzIiwicHJvcHMiLCJhbGxTdGFydGVkIiwiZXZlcnkiLCJwbGF5ZXIiLCJnZXRSZWFkeSIsImxlbmd0aCIsInBsYXllcnNOZWVkZWQiLCJNYXRoIiwibWF4IiwiZmlsdGVyIiwibWFwIiwiaSIsImJhY2tncm91bmRQb3NpdGlvbiIsImJhY2tncm91bmRJbWFnZSIsInVybCIsImJhY2tncm91bmRTaXplIiwidHJhbnNmb3JtIiwid2lkdGgiLCJoZWlnaHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBc0JBLElBQU1BLFdBQVcsR0FBRyxDQUFwQjs7QUFFQSxJQUFNQyxLQUVMLEdBQUcsU0FGRUEsS0FFRixPQWFFO0FBQUEsTUFaSkMsYUFZSSxRQVpKQSxhQVlJO0FBQUEsTUFYSkMsV0FXSSxRQVhKQSxXQVdJO0FBQUEsTUFWSkMsS0FVSSxRQVZKQSxLQVVJO0FBQUEsTUFUSkMsT0FTSSxRQVRKQSxPQVNJO0FBQUEsTUFSSkMsYUFRSSxRQVJKQSxhQVFJO0FBQUEsTUFQSkMsWUFPSSxRQVBKQSxZQU9JO0FBQUEsTUFOSkMsV0FNSSxRQU5KQSxXQU1JO0FBQUEsTUFMSkMsYUFLSSxRQUxKQSxhQUtJO0FBQUEsTUFKSkMsWUFJSSxRQUpKQSxZQUlJO0FBQUEsTUFISkMsU0FHSSxRQUhKQSxTQUdJO0FBQUEsa0NBRkpDLGVBRUk7QUFBQSxNQUZKQSxlQUVJLHFDQUZjLENBRWQ7QUFBQSxNQUREQyxLQUNDOztBQUNKLE1BQU1DLFVBQVUsR0FDZFgsV0FBVyxJQUNYRSxPQUFPLENBQUNVLEtBQVIsQ0FBYyxVQUFDQyxNQUFEO0FBQUEsV0FBWUEsTUFBTSxDQUFDQyxRQUFQLEVBQVo7QUFBQSxHQUFkLENBREEsSUFFQVosT0FBTyxDQUFDYSxNQUFSLElBQWtCTixlQUhwQjtBQUtBLE1BQU1PLGFBQWEsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQ3BCVCxlQUFlLEdBQUcsQ0FERSxFQUVwQlAsT0FBTyxDQUFDaUIsTUFBUixDQUFlLFVBQUNOLE1BQUQ7QUFBQSxXQUFZLENBQUNBLE1BQU0sQ0FBQ0MsUUFBUCxFQUFiO0FBQUEsR0FBZixFQUErQ0MsTUFGM0IsQ0FBdEI7QUFLQSxTQUNFLG9HQUE0REwsS0FBNUQ7QUFBQSwySEFBcUNGLFNBQXJDLGFBQXFDQSxTQUFyQyxjQUFxQ0EsU0FBckMsR0FBa0QsRUFBbEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUNHUCxLQURILEVBRUdVLFVBQVUsR0FDVCxtRUFDR0wsYUFESCxFQUVFO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1GQUZGLENBRFMsR0FRUFAsYUFBYSxJQUFJRyxPQUFPLENBQUNhLE1BQVIsSUFBa0JOLGVBQW5DLHlCQUNhTyxhQURiLDBCQUVBQSxhQUFhLEtBQUssQ0FBbEIsR0FBc0IsRUFBdEIsR0FBMkIsR0FGM0IsbUJBSUFqQixhQUFhLHlCQUNBVSxlQURBLDBCQUViVCxXQUFXLEdBQ2JLLFdBRGEsR0FHYixtRUFDR0UsWUFESCxFQUVFO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLDRCQUNxQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFEckIscURBRkYsQ0FuQkosRUEyQkdMLE9BQU8sQ0FBQ2EsTUFBUixHQUFpQixDQUFqQixJQUNDO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFVBQ0liLE9BQU8sQ0FBQ2EsTUFEWixhQUMyQmIsT0FBTyxDQUFDYSxNQUFSLEtBQW1CLENBQW5CLEdBQXVCLEdBQXZCLEdBQTZCLElBRHhELGNBNUJKLEVBaUNHWCxZQUFZLElBQ1g7QUFBQSx1Q0FBZSxxQkFBZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0dGLE9BQU8sQ0FBQ2tCLEdBQVIsQ0FBWSxVQUFDUCxNQUFELEVBQVNRLENBQVQ7QUFBQSxXQUNYO0FBQ0UsU0FBRyxFQUFFQSxDQURQO0FBRUUsV0FBSyxFQUFFO0FBQ0xDLDBCQUFrQixZQUFNRCxDQUFDLEdBQUcsR0FBTCxJQUFheEIsV0FBVyxHQUFHLENBQTNCLENBQUwsTUFEYjtBQUVMMEIsdUJBQWUsZ0JBQVNuQixZQUFZLENBQUNvQixHQUF0QixNQUZWO0FBR0xDLHNCQUFjLEVBQUUsV0FIWDtBQUlMQyxpQkFBUyxrQkFBV0wsQ0FBQyxLQUFLbEIsYUFBTixHQUFzQixDQUF0QixHQUEwQixHQUFyQyxNQUpKO0FBS0xnQixjQUFNLEVBQUVOLE1BQU0sQ0FBQ0MsUUFBUCxLQUNKLE1BREksR0FFSiwyQkFQQztBQVFMYSxhQUFLLEVBQUV2QixZQUFZLENBQUN1QixLQVJmO0FBU0xDLGNBQU0sRUFBRXhCLFlBQVksQ0FBQ3dCO0FBVGhCLE9BRlQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BRFc7QUFBQSxHQUFaLENBREgsQ0FsQ0o7QUFBQTtBQUFBO0FBQUEsMmpKQURGO0FBZ0VELENBMUZEOztLQUFNOUIsSztBQTRGU0Esb0VBQWYiLCJmaWxlIjoiLi9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9nYW1lX3BiJztcbmltcG9ydCB7IGdldEltYWdlT2Zmc2V0IH0gZnJvbSAndXRpbHMvZ2FtZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHBsYXllclN0YXJ0ZWQ6IGJvb2xlYW47XG4gIGlzQ29ubmVjdGVkOiBib29sZWFuO1xuICB0aXRsZT86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcGxheWVyczogUGxheWVyW107XG4gIGN1cnJlbnRQbGF5ZXI6IG51bWJlcjtcbiAgcGxheWVyU3ByaXRlPzoge1xuICAgIHVybDogc3RyaW5nO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gIH07XG4gIHN0YXJ0QnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGNvbmZpcm1CdXR0b246IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcmVqb2luQnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIHJlcXVpcmVkUGxheWVycz86IG51bWJlcjtcbn1cblxuY29uc3QgTUFYX1BMQVlFUlMgPSA2O1xuXG5jb25zdCBMb2JieTogRnVuY3Rpb25Db21wb25lbnQ8XG4gIFByb3BzICYgT21pdDxSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+LCAndGl0bGUnPlxuPiA9ICh7XG4gIHBsYXllclN0YXJ0ZWQsXG4gIGlzQ29ubmVjdGVkLFxuICB0aXRsZSxcbiAgcGxheWVycyxcbiAgY3VycmVudFBsYXllcixcbiAgcGxheWVyU3ByaXRlLFxuICBzdGFydEJ1dHRvbixcbiAgY29uZmlybUJ1dHRvbixcbiAgcmVqb2luQnV0dG9uLFxuICBjbGFzc05hbWUsXG4gIHJlcXVpcmVkUGxheWVycyA9IDEsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGFsbFN0YXJ0ZWQgPVxuICAgIGlzQ29ubmVjdGVkICYmXG4gICAgcGxheWVycy5ldmVyeSgocGxheWVyKSA9PiBwbGF5ZXIuZ2V0UmVhZHkoKSkgJiZcbiAgICBwbGF5ZXJzLmxlbmd0aCA+PSByZXF1aXJlZFBsYXllcnM7XG5cbiAgY29uc3QgcGxheWVyc05lZWRlZCA9IE1hdGgubWF4KFxuICAgIHJlcXVpcmVkUGxheWVycyAtIDEsXG4gICAgcGxheWVycy5maWx0ZXIoKHBsYXllcikgPT4gIXBsYXllci5nZXRSZWFkeSgpKS5sZW5ndGhcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgYWJzLWNlbnRlciBjZW50ZXIgJHtjbGFzc05hbWUgPz8gJyd9YH0gey4uLnByb3BzfT5cbiAgICAgIHt0aXRsZX1cbiAgICAgIHthbGxTdGFydGVkID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtjb25maXJtQnV0dG9ufVxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgICBOb3RlOiBPbmNlIHlvdSBiZWdpbiBhIHNlc3Npb24sIG90aGVycyB3b24ndCBiZSBhYmxlIHRvIGpvaW4gdW50aWxcbiAgICAgICAgICAgIGl0IGVuZHMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiBwbGF5ZXJTdGFydGVkICYmIHBsYXllcnMubGVuZ3RoID49IHJlcXVpcmVkUGxheWVycyA/IChcbiAgICAgICAgYFdhaXRpbmcgZm9yICR7cGxheWVyc05lZWRlZH0gb3RoZXIgcGxheWVyJHtcbiAgICAgICAgICBwbGF5ZXJzTmVlZGVkID09PSAxID8gJycgOiAncydcbiAgICAgICAgfSB0byBqb2luLi4uYFxuICAgICAgKSA6IHBsYXllclN0YXJ0ZWQgPyAoXG4gICAgICAgIGAoTWluaW11bSBvZiAke3JlcXVpcmVkUGxheWVyc30gcGxheWVycyByZXF1aXJlZClgXG4gICAgICApIDogaXNDb25uZWN0ZWQgPyAoXG4gICAgICAgIHN0YXJ0QnV0dG9uXG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZWpvaW5CdXR0b259XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj5cbiAgICAgICAgICAgIEdhbWUgaW4gc2Vzc2lvbi4uLiA8YnIgLz5cbiAgICAgICAgICAgIFBsZWFzZSB3YWl0IGZvciB0aGUgY3VycmVudCBzZXNzaW9uIHRvIGNvbXBsZXRlLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3BsYXllcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgKHtwbGF5ZXJzLmxlbmd0aH0gcGxheWVye3BsYXllcnMubGVuZ3RoID09PSAxID8gJyAnIDogJ3MgJ31cbiAgICAgICAgICBpbiBsb2JieSlcbiAgICAgICAgPC9wPlxuICAgICAgKX1cbiAgICAgIHtwbGF5ZXJTcHJpdGUgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllcnMgZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICB7cGxheWVycy5tYXAoKHBsYXllciwgaSkgPT4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBgJHsoaSAqIDEwMCkgLyAoTUFYX1BMQVlFUlMgLSAxKX0lYCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwbGF5ZXJTcHJpdGUudXJsfSlgLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjAwJSAxMDAlJyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2kgPT09IGN1cnJlbnRQbGF5ZXIgPyAxIDogMC43fSlgLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogcGxheWVyLmdldFJlYWR5KClcbiAgICAgICAgICAgICAgICAgID8gJ25vbmUnXG4gICAgICAgICAgICAgICAgICA6ICdncmF5c2NhbGUoMSkgb3BhY2l0eSg4MCUpJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogcGxheWVyU3ByaXRlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGxheWVyU3ByaXRlLmhlaWdodCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuc21hbGwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS44dm1pbjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMi4ydm1pbjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAyLjh2bWluO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2JieTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/groupsolve/lobby.tsx\n");

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/Draggable.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/Draggable.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"DraggableCore\", {\n  enumerable: true,\n  get: function get() {\n    return _DraggableCore.default;\n  }\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\"));\n\nvar _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\"));\n\nvar _classnames = _interopRequireDefault(__webpack_require__(/*! classnames */ \"./node_modules/classnames/index.js\"));\n\nvar _domFns = __webpack_require__(/*! ./utils/domFns */ \"./node_modules/react-draggable/build/cjs/utils/domFns.js\");\n\nvar _positionFns = __webpack_require__(/*! ./utils/positionFns */ \"./node_modules/react-draggable/build/cjs/utils/positionFns.js\");\n\nvar _shims = __webpack_require__(/*! ./utils/shims */ \"./node_modules/react-draggable/build/cjs/utils/shims.js\");\n\nvar _DraggableCore = _interopRequireDefault(__webpack_require__(/*! ./DraggableCore */ \"./node_modules/react-draggable/build/cjs/DraggableCore.js\"));\n\nvar _log = _interopRequireDefault(__webpack_require__(/*! ./utils/log */ \"./node_modules/react-draggable/build/cjs/utils/log.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n// Define <Draggable>\n//\nvar Draggable = /*#__PURE__*/function (_React$Component) {\n  _inherits(Draggable, _React$Component);\n\n  var _super = _createSuper(Draggable);\n\n  _createClass(Draggable, null, [{\n    key: \"getDerivedStateFromProps\",\n    // React 16.3+\n    // Arity (props, state)\n    value: function getDerivedStateFromProps(_ref, _ref2) {\n      var position = _ref.position;\n      var prevPropsPosition = _ref2.prevPropsPosition;\n\n      // Set x/y if a new position is provided in props that is different than the previous.\n      if (position && (!prevPropsPosition || position.x !== prevPropsPosition.x || position.y !== prevPropsPosition.y)) {\n        (0, _log.default)('Draggable: getDerivedStateFromProps %j', {\n          position: position,\n          prevPropsPosition: prevPropsPosition\n        });\n        return {\n          x: position.x,\n          y: position.y,\n          prevPropsPosition: _objectSpread({}, position)\n        };\n      }\n\n      return null;\n    }\n  }]);\n\n  function Draggable(props\n  /*: DraggableProps*/\n  ) {\n    var _this;\n\n    _classCallCheck(this, Draggable);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragStart\", function (e, coreData) {\n      (0, _log.default)('Draggable: onDragStart: %j', coreData); // Short-circuit if user's callback killed it.\n\n      var shouldStart = _this.props.onStart(e, (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData)); // Kills start event on core as well, so move handlers are never bound.\n\n\n      if (shouldStart === false) return false;\n\n      _this.setState({\n        dragging: true,\n        dragged: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDrag\", function (e, coreData) {\n      if (!_this.state.dragging) return false;\n      (0, _log.default)('Draggable: onDrag: %j', coreData);\n      var uiData = (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData);\n      var newState\n      /*: $Shape<DraggableState>*/\n      = {\n        x: uiData.x,\n        y: uiData.y\n      }; // Keep within bounds.\n\n      if (_this.props.bounds) {\n        // Save original x and y.\n        var x = newState.x,\n            y = newState.y; // Add slack to the values used to calculate bound position. This will ensure that if\n        // we start removing slack, the element won't react to it right away until it's been\n        // completely removed.\n\n        newState.x += _this.state.slackX;\n        newState.y += _this.state.slackY; // Get bound position. This will ceil/floor the x and y within the boundaries.\n\n        var _getBoundPosition = (0, _positionFns.getBoundPosition)(_assertThisInitialized(_this), newState.x, newState.y),\n            _getBoundPosition2 = _slicedToArray(_getBoundPosition, 2),\n            newStateX = _getBoundPosition2[0],\n            newStateY = _getBoundPosition2[1];\n\n        newState.x = newStateX;\n        newState.y = newStateY; // Recalculate slack by noting how much was shaved by the boundPosition handler.\n\n        newState.slackX = _this.state.slackX + (x - newState.x);\n        newState.slackY = _this.state.slackY + (y - newState.y); // Update the event we fire to reflect what really happened after bounds took effect.\n\n        uiData.x = newState.x;\n        uiData.y = newState.y;\n        uiData.deltaX = newState.x - _this.state.x;\n        uiData.deltaY = newState.y - _this.state.y;\n      } // Short-circuit if user's callback killed it.\n\n\n      var shouldUpdate = _this.props.onDrag(e, uiData);\n\n      if (shouldUpdate === false) return false;\n\n      _this.setState(newState);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragStop\", function (e, coreData) {\n      if (!_this.state.dragging) return false; // Short-circuit if user's callback killed it.\n\n      var shouldContinue = _this.props.onStop(e, (0, _positionFns.createDraggableData)(_assertThisInitialized(_this), coreData));\n\n      if (shouldContinue === false) return false;\n      (0, _log.default)('Draggable: onDragStop: %j', coreData);\n      var newState\n      /*: $Shape<DraggableState>*/\n      = {\n        dragging: false,\n        slackX: 0,\n        slackY: 0\n      }; // If this is a controlled component, the result of this operation will be to\n      // revert back to the old position. We expect a handler on `onDragStop`, at the least.\n\n      var controlled = Boolean(_this.props.position);\n\n      if (controlled) {\n        var _this$props$position = _this.props.position,\n            x = _this$props$position.x,\n            y = _this$props$position.y;\n        newState.x = x;\n        newState.y = y;\n      }\n\n      _this.setState(newState);\n    });\n\n    _this.state = {\n      // Whether or not we are currently dragging.\n      dragging: false,\n      // Whether or not we have been dragged before.\n      dragged: false,\n      // Current transform x and y.\n      x: props.position ? props.position.x : props.defaultPosition.x,\n      y: props.position ? props.position.y : props.defaultPosition.y,\n      prevPropsPosition: _objectSpread({}, props.position),\n      // Used for compensating for out-of-bounds drags\n      slackX: 0,\n      slackY: 0,\n      // Can only determine if SVG after mounting\n      isElementSVG: false\n    };\n\n    if (props.position && !(props.onDrag || props.onStop)) {\n      // eslint-disable-next-line no-console\n      console.warn('A `position` was applied to this <Draggable>, without drag handlers. This will make this ' + 'component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the ' + '`position` of this element.');\n    }\n\n    return _this;\n  }\n\n  _createClass(Draggable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Check to see if the element passed is an instanceof SVGElement\n      if (typeof window.SVGElement !== 'undefined' && this.findDOMNode() instanceof window.SVGElement) {\n        this.setState({\n          isElementSVG: true\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.setState({\n        dragging: false\n      }); // prevents invariant if unmounted while dragging\n    } // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find\n    // the underlying DOM node ourselves. See the README for more information.\n\n  }, {\n    key: \"findDOMNode\",\n    value: function findDOMNode()\n    /*: ?HTMLElement*/\n    {\n      return this.props.nodeRef ? this.props.nodeRef.current : _reactDom.default.findDOMNode(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render()\n    /*: ReactElement<any>*/\n    {\n      var _classNames;\n\n      var _this$props = this.props,\n          axis = _this$props.axis,\n          bounds = _this$props.bounds,\n          children = _this$props.children,\n          defaultPosition = _this$props.defaultPosition,\n          defaultClassName = _this$props.defaultClassName,\n          defaultClassNameDragging = _this$props.defaultClassNameDragging,\n          defaultClassNameDragged = _this$props.defaultClassNameDragged,\n          position = _this$props.position,\n          positionOffset = _this$props.positionOffset,\n          scale = _this$props.scale,\n          draggableCoreProps = _objectWithoutProperties(_this$props, [\"axis\", \"bounds\", \"children\", \"defaultPosition\", \"defaultClassName\", \"defaultClassNameDragging\", \"defaultClassNameDragged\", \"position\", \"positionOffset\", \"scale\"]);\n\n      var style = {};\n      var svgTransform = null; // If this is controlled, we don't want to move it - unless it's dragging.\n\n      var controlled = Boolean(position);\n      var draggable = !controlled || this.state.dragging;\n      var validPosition = position || defaultPosition;\n      var transformOpts = {\n        // Set left if horizontal drag is enabled\n        x: (0, _positionFns.canDragX)(this) && draggable ? this.state.x : validPosition.x,\n        // Set top if vertical drag is enabled\n        y: (0, _positionFns.canDragY)(this) && draggable ? this.state.y : validPosition.y\n      }; // If this element was SVG, we use the `transform` attribute.\n\n      if (this.state.isElementSVG) {\n        svgTransform = (0, _domFns.createSVGTransform)(transformOpts, positionOffset);\n      } else {\n        // Add a CSS transform to move the element around. This allows us to move the element around\n        // without worrying about whether or not it is relatively or absolutely positioned.\n        // If the item you are dragging already has a transform set, wrap it in a <span> so <Draggable>\n        // has a clean slate.\n        style = (0, _domFns.createCSSTransform)(transformOpts, positionOffset);\n      } // Mark with class while dragging\n\n\n      var className = (0, _classnames.default)(children.props.className || '', defaultClassName, (_classNames = {}, _defineProperty(_classNames, defaultClassNameDragging, this.state.dragging), _defineProperty(_classNames, defaultClassNameDragged, this.state.dragged), _classNames)); // Reuse the child provided\n      // This makes it flexible to use whatever element is wanted (div, ul, etc)\n\n      return /*#__PURE__*/React.createElement(_DraggableCore.default, _extends({}, draggableCoreProps, {\n        onStart: this.onDragStart,\n        onDrag: this.onDrag,\n        onStop: this.onDragStop\n      }), React.cloneElement(React.Children.only(children), {\n        className: className,\n        style: _objectSpread(_objectSpread({}, children.props.style), style),\n        transform: svgTransform\n      }));\n    }\n  }]);\n\n  return Draggable;\n}(React.Component);\n\nexports.default = Draggable;\n\n_defineProperty(Draggable, \"displayName\", 'Draggable');\n\n_defineProperty(Draggable, \"propTypes\", _objectSpread(_objectSpread({}, _DraggableCore.default.propTypes), {}, {\n  /**\n   * `axis` determines which axis the draggable can move.\n   *\n   *  Note that all callbacks will still return data as normal. This only\n   *  controls flushing to the DOM.\n   *\n   * 'both' allows movement horizontally and vertically.\n   * 'x' limits movement to horizontal axis.\n   * 'y' limits movement to vertical axis.\n   * 'none' limits all movement.\n   *\n   * Defaults to 'both'.\n   */\n  axis: _propTypes.default.oneOf(['both', 'x', 'y', 'none']),\n\n  /**\n   * `bounds` determines the range of movement available to the element.\n   * Available values are:\n   *\n   * 'parent' restricts movement within the Draggable's parent node.\n   *\n   * Alternatively, pass an object with the following properties, all of which are optional:\n   *\n   * {left: LEFT_BOUND, right: RIGHT_BOUND, bottom: BOTTOM_BOUND, top: TOP_BOUND}\n   *\n   * All values are in px.\n   *\n   * Example:\n   *\n   * ```jsx\n   *   let App = React.createClass({\n   *       render: function () {\n   *         return (\n   *            <Draggable bounds={{right: 300, bottom: 300}}>\n   *              <div>Content</div>\n   *           </Draggable>\n   *         );\n   *       }\n   *   });\n   * ```\n   */\n  bounds: _propTypes.default.oneOfType([_propTypes.default.shape({\n    left: _propTypes.default.number,\n    right: _propTypes.default.number,\n    top: _propTypes.default.number,\n    bottom: _propTypes.default.number\n  }), _propTypes.default.string, _propTypes.default.oneOf([false])]),\n  defaultClassName: _propTypes.default.string,\n  defaultClassNameDragging: _propTypes.default.string,\n  defaultClassNameDragged: _propTypes.default.string,\n\n  /**\n   * `defaultPosition` specifies the x and y that the dragged item should start at\n   *\n   * Example:\n   *\n   * ```jsx\n   *      let App = React.createClass({\n   *          render: function () {\n   *              return (\n   *                  <Draggable defaultPosition={{x: 25, y: 25}}>\n   *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n   *                  </Draggable>\n   *              );\n   *          }\n   *      });\n   * ```\n   */\n  defaultPosition: _propTypes.default.shape({\n    x: _propTypes.default.number,\n    y: _propTypes.default.number\n  }),\n  positionOffset: _propTypes.default.shape({\n    x: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),\n    y: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])\n  }),\n\n  /**\n   * `position`, if present, defines the current position of the element.\n   *\n   *  This is similar to how form elements in React work - if no `position` is supplied, the component\n   *  is uncontrolled.\n   *\n   * Example:\n   *\n   * ```jsx\n   *      let App = React.createClass({\n   *          render: function () {\n   *              return (\n   *                  <Draggable position={{x: 25, y: 25}}>\n   *                      <div>I start with transformX: 25px and transformY: 25px;</div>\n   *                  </Draggable>\n   *              );\n   *          }\n   *      });\n   * ```\n   */\n  position: _propTypes.default.shape({\n    x: _propTypes.default.number,\n    y: _propTypes.default.number\n  }),\n\n  /**\n   * These properties should be defined on the child, not here.\n   */\n  className: _shims.dontSetMe,\n  style: _shims.dontSetMe,\n  transform: _shims.dontSetMe\n}));\n\n_defineProperty(Draggable, \"defaultProps\", _objectSpread(_objectSpread({}, _DraggableCore.default.defaultProps), {}, {\n  axis: 'both',\n  bounds: false,\n  defaultClassName: 'react-draggable',\n  defaultClassNameDragging: 'react-draggable-dragging',\n  defaultClassNameDragged: 'react-draggable-dragged',\n  defaultPosition: {\n    x: 0,\n    y: 0\n  },\n  position: null,\n  scale: 1\n}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-draggable/build/cjs/Draggable.js\n");

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/DraggableCore.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/DraggableCore.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\"));\n\nvar _reactDom = _interopRequireDefault(__webpack_require__(/*! react-dom */ \"./node_modules/react-dom/index.js\"));\n\nvar _domFns = __webpack_require__(/*! ./utils/domFns */ \"./node_modules/react-draggable/build/cjs/utils/domFns.js\");\n\nvar _positionFns = __webpack_require__(/*! ./utils/positionFns */ \"./node_modules/react-draggable/build/cjs/utils/positionFns.js\");\n\nvar _shims = __webpack_require__(/*! ./utils/shims */ \"./node_modules/react-draggable/build/cjs/utils/shims.js\");\n\nvar _log = _interopRequireDefault(__webpack_require__(/*! ./utils/log */ \"./node_modules/react-draggable/build/cjs/utils/log.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Simple abstraction for dragging events names.\nvar eventsFor = {\n  touch: {\n    start: 'touchstart',\n    move: 'touchmove',\n    stop: 'touchend'\n  },\n  mouse: {\n    start: 'mousedown',\n    move: 'mousemove',\n    stop: 'mouseup'\n  }\n}; // Default to mouse events.\n\nvar dragEventFor = eventsFor.mouse;\n/*:: type DraggableCoreState = {\n  dragging: boolean,\n  lastX: number,\n  lastY: number,\n  touchIdentifier: ?number\n};*/\n\n/*:: export type DraggableData = {\n  node: HTMLElement,\n  x: number, y: number,\n  deltaX: number, deltaY: number,\n  lastX: number, lastY: number,\n};*/\n\n/*:: export type DraggableEventHandler = (e: MouseEvent, data: DraggableData) => void;*/\n\n/*:: export type ControlPosition = {x: number, y: number};*/\n\n/*:: export type PositionOffsetControlPosition = {x: number|string, y: number|string};*/\n\n/*:: export type DraggableCoreProps = {\n  allowAnyClick: boolean,\n  cancel: string,\n  children: ReactElement<any>,\n  disabled: boolean,\n  enableUserSelectHack: boolean,\n  offsetParent: HTMLElement,\n  grid: [number, number],\n  handle: string,\n  nodeRef?: ?React.ElementRef<any>,\n  onStart: DraggableEventHandler,\n  onDrag: DraggableEventHandler,\n  onStop: DraggableEventHandler,\n  onMouseDown: (e: MouseEvent) => void,\n  scale: number,\n};*/\n\n//\n// Define <DraggableCore>.\n//\n// <DraggableCore> is for advanced usage of <Draggable>. It maintains minimal internal state so it can\n// work well with libraries that require more control over the element.\n//\nvar DraggableCore = /*#__PURE__*/function (_React$Component) {\n  _inherits(DraggableCore, _React$Component);\n\n  var _super = _createSuper(DraggableCore);\n\n  function DraggableCore() {\n    var _this;\n\n    _classCallCheck(this, DraggableCore);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      dragging: false,\n      // Used while dragging to determine deltas.\n      lastX: NaN,\n      lastY: NaN,\n      touchIdentifier: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"mounted\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDragStart\", function (e) {\n      // Make it possible to attach event handlers on top of this one.\n      _this.props.onMouseDown(e); // Only accept left-clicks.\n\n\n      if (!_this.props.allowAnyClick && typeof e.button === 'number' && e.button !== 0) return false; // Get nodes. Be sure to grab relative document (could be iframed)\n\n      var thisNode = _this.findDOMNode();\n\n      if (!thisNode || !thisNode.ownerDocument || !thisNode.ownerDocument.body) {\n        throw new Error('<DraggableCore> not mounted on DragStart!');\n      }\n\n      var ownerDocument = thisNode.ownerDocument; // Short circuit if handle or cancel prop was provided and selector doesn't match.\n\n      if (_this.props.disabled || !(e.target instanceof ownerDocument.defaultView.Node) || _this.props.handle && !(0, _domFns.matchesSelectorAndParentsTo)(e.target, _this.props.handle, thisNode) || _this.props.cancel && (0, _domFns.matchesSelectorAndParentsTo)(e.target, _this.props.cancel, thisNode)) {\n        return;\n      } // Prevent scrolling on mobile devices, like ipad/iphone.\n      // Important that this is after handle/cancel.\n\n\n      if (e.type === 'touchstart') e.preventDefault(); // Set touch identifier in component state if this is a touch event. This allows us to\n      // distinguish between individual touches on multitouch screens by identifying which\n      // touchpoint was set to this element.\n\n      var touchIdentifier = (0, _domFns.getTouchIdentifier)(e);\n\n      _this.setState({\n        touchIdentifier: touchIdentifier\n      }); // Get the current drag point from the event. This is used as the offset.\n\n\n      var position = (0, _positionFns.getControlPosition)(e, touchIdentifier, _assertThisInitialized(_this));\n      if (position == null) return; // not possible but satisfies flow\n\n      var x = position.x,\n          y = position.y; // Create an event object with all the data parents need to make a decision here.\n\n      var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);\n      (0, _log.default)('DraggableCore: handleDragStart: %j', coreEvent); // Call event handler. If it returns explicit false, cancel.\n\n      (0, _log.default)('calling', _this.props.onStart);\n\n      var shouldUpdate = _this.props.onStart(e, coreEvent);\n\n      if (shouldUpdate === false || _this.mounted === false) return; // Add a style to the body to disable user-select. This prevents text from\n      // being selected all over the page.\n\n      if (_this.props.enableUserSelectHack) (0, _domFns.addUserSelectStyles)(ownerDocument); // Initiate dragging. Set the current x and y as offsets\n      // so we know how much we've moved during the drag. This allows us\n      // to drag elements around even if they have been moved, without issue.\n\n      _this.setState({\n        dragging: true,\n        lastX: x,\n        lastY: y\n      }); // Add events to the document directly so we catch when the user's mouse/touch moves outside of\n      // this element. We use different events depending on whether or not we have detected that this\n      // is a touch-capable device.\n\n\n      (0, _domFns.addEvent)(ownerDocument, dragEventFor.move, _this.handleDrag);\n      (0, _domFns.addEvent)(ownerDocument, dragEventFor.stop, _this.handleDragStop);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDrag\", function (e) {\n      // Get the current drag point from the event. This is used as the offset.\n      var position = (0, _positionFns.getControlPosition)(e, _this.state.touchIdentifier, _assertThisInitialized(_this));\n      if (position == null) return;\n      var x = position.x,\n          y = position.y; // Snap to grid if prop has been provided\n\n      if (Array.isArray(_this.props.grid)) {\n        var deltaX = x - _this.state.lastX,\n            deltaY = y - _this.state.lastY;\n\n        var _snapToGrid = (0, _positionFns.snapToGrid)(_this.props.grid, deltaX, deltaY);\n\n        var _snapToGrid2 = _slicedToArray(_snapToGrid, 2);\n\n        deltaX = _snapToGrid2[0];\n        deltaY = _snapToGrid2[1];\n        if (!deltaX && !deltaY) return; // skip useless drag\n\n        x = _this.state.lastX + deltaX, y = _this.state.lastY + deltaY;\n      }\n\n      var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y);\n      (0, _log.default)('DraggableCore: handleDrag: %j', coreEvent); // Call event handler. If it returns explicit false, trigger end.\n\n      var shouldUpdate = _this.props.onDrag(e, coreEvent);\n\n      if (shouldUpdate === false || _this.mounted === false) {\n        try {\n          // $FlowIgnore\n          _this.handleDragStop(new MouseEvent('mouseup'));\n        } catch (err) {\n          // Old browsers\n          var event = ((document.createEvent('MouseEvents')\n          /*: any*/\n          )\n          /*: MouseTouchEvent*/\n          ); // I see why this insanity was deprecated\n          // $FlowIgnore\n\n          event.initMouseEvent('mouseup', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n\n          _this.handleDragStop(event);\n        }\n\n        return;\n      }\n\n      _this.setState({\n        lastX: x,\n        lastY: y\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDragStop\", function (e) {\n      if (!_this.state.dragging) return;\n      var position = (0, _positionFns.getControlPosition)(e, _this.state.touchIdentifier, _assertThisInitialized(_this));\n      if (position == null) return;\n      var x = position.x,\n          y = position.y;\n      var coreEvent = (0, _positionFns.createCoreData)(_assertThisInitialized(_this), x, y); // Call event handler\n\n      var shouldContinue = _this.props.onStop(e, coreEvent);\n\n      if (shouldContinue === false || _this.mounted === false) return false;\n\n      var thisNode = _this.findDOMNode();\n\n      if (thisNode) {\n        // Remove user-select hack\n        if (_this.props.enableUserSelectHack) (0, _domFns.removeUserSelectStyles)(thisNode.ownerDocument);\n      }\n\n      (0, _log.default)('DraggableCore: handleDragStop: %j', coreEvent); // Reset the el.\n\n      _this.setState({\n        dragging: false,\n        lastX: NaN,\n        lastY: NaN\n      });\n\n      if (thisNode) {\n        // Remove event handlers\n        (0, _log.default)('DraggableCore: Removing handlers');\n        (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.move, _this.handleDrag);\n        (0, _domFns.removeEvent)(thisNode.ownerDocument, dragEventFor.stop, _this.handleDragStop);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseDown\", function (e) {\n      dragEventFor = eventsFor.mouse; // on touchscreen laptops we could switch back to mouse\n\n      return _this.handleDragStart(e);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMouseUp\", function (e) {\n      dragEventFor = eventsFor.mouse;\n      return _this.handleDragStop(e);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchStart\", function (e) {\n      // We're on a touch device now, so change the event handlers\n      dragEventFor = eventsFor.touch;\n      return _this.handleDragStart(e);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTouchEnd\", function (e) {\n      // We're on a touch device now, so change the event handlers\n      dragEventFor = eventsFor.touch;\n      return _this.handleDragStop(e);\n    });\n\n    return _this;\n  }\n\n  _createClass(DraggableCore, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.mounted = true; // Touch handlers must be added with {passive: false} to be cancelable.\n      // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n\n      var thisNode = this.findDOMNode();\n\n      if (thisNode) {\n        (0, _domFns.addEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {\n          passive: false\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.mounted = false; // Remove any leftover event handlers. Remove both touch and mouse handlers in case\n      // some browser quirk caused a touch event to fire during a mouse move, or vice versa.\n\n      var thisNode = this.findDOMNode();\n\n      if (thisNode) {\n        var ownerDocument = thisNode.ownerDocument;\n        (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.move, this.handleDrag);\n        (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.move, this.handleDrag);\n        (0, _domFns.removeEvent)(ownerDocument, eventsFor.mouse.stop, this.handleDragStop);\n        (0, _domFns.removeEvent)(ownerDocument, eventsFor.touch.stop, this.handleDragStop);\n        (0, _domFns.removeEvent)(thisNode, eventsFor.touch.start, this.onTouchStart, {\n          passive: false\n        });\n        if (this.props.enableUserSelectHack) (0, _domFns.removeUserSelectStyles)(ownerDocument);\n      }\n    } // React Strict Mode compatibility: if `nodeRef` is passed, we will use it instead of trying to find\n    // the underlying DOM node ourselves. See the README for more information.\n\n  }, {\n    key: \"findDOMNode\",\n    value: function findDOMNode()\n    /*: ?HTMLElement*/\n    {\n      return this.props.nodeRef ? this.props.nodeRef.current : _reactDom.default.findDOMNode(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // Reuse the child provided\n      // This makes it flexible to use whatever element is wanted (div, ul, etc)\n      return React.cloneElement(React.Children.only(this.props.children), {\n        // Note: mouseMove handler is attached to document so it will still function\n        // when the user drags quickly and leaves the bounds of the element.\n        onMouseDown: this.onMouseDown,\n        onMouseUp: this.onMouseUp,\n        // onTouchStart is added on `componentDidMount` so they can be added with\n        // {passive: false}, which allows it to cancel. See \n        // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n        onTouchEnd: this.onTouchEnd\n      });\n    }\n  }]);\n\n  return DraggableCore;\n}(React.Component);\n\nexports.default = DraggableCore;\n\n_defineProperty(DraggableCore, \"displayName\", 'DraggableCore');\n\n_defineProperty(DraggableCore, \"propTypes\", {\n  /**\n   * `allowAnyClick` allows dragging using any mouse button.\n   * By default, we only accept the left button.\n   *\n   * Defaults to `false`.\n   */\n  allowAnyClick: _propTypes.default.bool,\n\n  /**\n   * `disabled`, if true, stops the <Draggable> from dragging. All handlers,\n   * with the exception of `onMouseDown`, will not fire.\n   */\n  disabled: _propTypes.default.bool,\n\n  /**\n   * By default, we add 'user-select:none' attributes to the document body\n   * to prevent ugly text selection during drag. If this is causing problems\n   * for your app, set this to `false`.\n   */\n  enableUserSelectHack: _propTypes.default.bool,\n\n  /**\n   * `offsetParent`, if set, uses the passed DOM node to compute drag offsets\n   * instead of using the parent node.\n   */\n  offsetParent: function offsetParent(props\n  /*: DraggableCoreProps*/\n  , propName\n  /*: $Keys<DraggableCoreProps>*/\n  ) {\n    if (props[propName] && props[propName].nodeType !== 1) {\n      throw new Error('Draggable\\'s offsetParent must be a DOM Node.');\n    }\n  },\n\n  /**\n   * `grid` specifies the x and y that dragging should snap to.\n   */\n  grid: _propTypes.default.arrayOf(_propTypes.default.number),\n\n  /**\n   * `handle` specifies a selector to be used as the handle that initiates drag.\n   *\n   * Example:\n   *\n   * ```jsx\n   *   let App = React.createClass({\n   *       render: function () {\n   *         return (\n   *            <Draggable handle=\".handle\">\n   *              <div>\n   *                  <div className=\"handle\">Click me to drag</div>\n   *                  <div>This is some other content</div>\n   *              </div>\n   *           </Draggable>\n   *         );\n   *       }\n   *   });\n   * ```\n   */\n  handle: _propTypes.default.string,\n\n  /**\n   * `cancel` specifies a selector to be used to prevent drag initialization.\n   *\n   * Example:\n   *\n   * ```jsx\n   *   let App = React.createClass({\n   *       render: function () {\n   *           return(\n   *               <Draggable cancel=\".cancel\">\n   *                   <div>\n   *                     <div className=\"cancel\">You can't drag from here</div>\n   *                     <div>Dragging here works fine</div>\n   *                   </div>\n   *               </Draggable>\n   *           );\n   *       }\n   *   });\n   * ```\n   */\n  cancel: _propTypes.default.string,\n\n  /* If running in React Strict mode, ReactDOM.findDOMNode() is deprecated.\n   * Unfortunately, in order for <Draggable> to work properly, we need raw access\n   * to the underlying DOM node. If you want to avoid the warning, pass a `nodeRef`\n   * as in this example:\n   *\n   * function MyComponent() {\n   *   const nodeRef = React.useRef(null);\n   *   return (\n   *     <Draggable nodeRef={nodeRef}>\n   *       <div ref={nodeRef}>Example Target</div>\n   *     </Draggable>\n   *   );\n   * }\n   *\n   * This can be used for arbitrarily nested components, so long as the ref ends up\n   * pointing to the actual child DOM node and not a custom component.\n   */\n  nodeRef: _propTypes.default.object,\n\n  /**\n   * Called when dragging starts.\n   * If this function returns the boolean false, dragging will be canceled.\n   */\n  onStart: _propTypes.default.func,\n\n  /**\n   * Called while dragging.\n   * If this function returns the boolean false, dragging will be canceled.\n   */\n  onDrag: _propTypes.default.func,\n\n  /**\n   * Called when dragging stops.\n   * If this function returns the boolean false, the drag will remain active.\n   */\n  onStop: _propTypes.default.func,\n\n  /**\n   * A workaround option which can be passed if onMouseDown needs to be accessed,\n   * since it'll always be blocked (as there is internal use of onMouseDown)\n   */\n  onMouseDown: _propTypes.default.func,\n\n  /**\n   * `scale`, if set, applies scaling while dragging an element\n   */\n  scale: _propTypes.default.number,\n\n  /**\n   * These properties should be defined on the child, not here.\n   */\n  className: _shims.dontSetMe,\n  style: _shims.dontSetMe,\n  transform: _shims.dontSetMe\n});\n\n_defineProperty(DraggableCore, \"defaultProps\", {\n  allowAnyClick: false,\n  // by default only accept left click\n  cancel: null,\n  disabled: false,\n  enableUserSelectHack: true,\n  offsetParent: null,\n  handle: null,\n  grid: null,\n  transform: null,\n  onStart: function onStart() {},\n  onDrag: function onDrag() {},\n  onStop: function onStop() {},\n  onMouseDown: function onMouseDown() {},\n  scale: 1\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-draggable/build/cjs/DraggableCore.js\n");

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/cjs.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/cjs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _require = __webpack_require__(/*! ./Draggable */ \"./node_modules/react-draggable/build/cjs/Draggable.js\"),\n    Draggable = _require.default,\n    DraggableCore = _require.DraggableCore; // Previous versions of this lib exported <Draggable> as the root export. As to no-// them, or TypeScript, we export *both* as the root and as 'default'.\n// See https://github.com/mzabriskie/react-draggable/pull/254\n// and https://github.com/mzabriskie/react-draggable/issues/266\n\n\nmodule.exports = Draggable;\nmodule.exports.default = Draggable;\nmodule.exports.DraggableCore = DraggableCore;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRyYWdnYWJsZS9idWlsZC9janMvY2pzLmpzPzc2ODQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLDBFQUFhO0FBQ3BDO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFjdC1kcmFnZ2FibGUvYnVpbGQvY2pzL2Nqcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX3JlcXVpcmUgPSByZXF1aXJlKCcuL0RyYWdnYWJsZScpLFxuICAgIERyYWdnYWJsZSA9IF9yZXF1aXJlLmRlZmF1bHQsXG4gICAgRHJhZ2dhYmxlQ29yZSA9IF9yZXF1aXJlLkRyYWdnYWJsZUNvcmU7IC8vIFByZXZpb3VzIHZlcnNpb25zIG9mIHRoaXMgbGliIGV4cG9ydGVkIDxEcmFnZ2FibGU+IGFzIHRoZSByb290IGV4cG9ydC4gQXMgdG8gbm8tLy8gdGhlbSwgb3IgVHlwZVNjcmlwdCwgd2UgZXhwb3J0ICpib3RoKiBhcyB0aGUgcm9vdCBhbmQgYXMgJ2RlZmF1bHQnLlxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9temFicmlza2llL3JlYWN0LWRyYWdnYWJsZS9wdWxsLzI1NFxuLy8gYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9temFicmlza2llL3JlYWN0LWRyYWdnYWJsZS9pc3N1ZXMvMjY2XG5cblxubW9kdWxlLmV4cG9ydHMgPSBEcmFnZ2FibGU7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gRHJhZ2dhYmxlO1xubW9kdWxlLmV4cG9ydHMuRHJhZ2dhYmxlQ29yZSA9IERyYWdnYWJsZUNvcmU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-draggable/build/cjs/cjs.js\n");

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/utils/domFns.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/domFns.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.matchesSelector = matchesSelector;\nexports.matchesSelectorAndParentsTo = matchesSelectorAndParentsTo;\nexports.addEvent = addEvent;\nexports.removeEvent = removeEvent;\nexports.outerHeight = outerHeight;\nexports.outerWidth = outerWidth;\nexports.innerHeight = innerHeight;\nexports.innerWidth = innerWidth;\nexports.offsetXYFromParent = offsetXYFromParent;\nexports.createCSSTransform = createCSSTransform;\nexports.createSVGTransform = createSVGTransform;\nexports.getTranslation = getTranslation;\nexports.getTouch = getTouch;\nexports.getTouchIdentifier = getTouchIdentifier;\nexports.addUserSelectStyles = addUserSelectStyles;\nexports.removeUserSelectStyles = removeUserSelectStyles;\nexports.addClassName = addClassName;\nexports.removeClassName = removeClassName;\n\nvar _shims = __webpack_require__(/*! ./shims */ \"./node_modules/react-draggable/build/cjs/utils/shims.js\");\n\nvar _getPrefix = _interopRequireWildcard(__webpack_require__(/*! ./getPrefix */ \"./node_modules/react-draggable/build/cjs/utils/getPrefix.js\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar matchesSelectorFunc = '';\n\nfunction matchesSelector(el\n/*: Node*/\n, selector\n/*: string*/\n)\n/*: boolean*/\n{\n  if (!matchesSelectorFunc) {\n    matchesSelectorFunc = (0, _shims.findInArray)(['matches', 'webkitMatchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector'], function (method) {\n      // $FlowIgnore: Doesn't think elements are indexable\n      return (0, _shims.isFunction)(el[method]);\n    });\n  } // Might not be found entirely (not an Element?) - in that case, bail\n  // $FlowIgnore: Doesn't think elements are indexable\n\n\n  if (!(0, _shims.isFunction)(el[matchesSelectorFunc])) return false; // $FlowIgnore: Doesn't think elements are indexable\n\n  return el[matchesSelectorFunc](selector);\n} // Works up the tree to the draggable itself attempting to match selector.\n\n\nfunction matchesSelectorAndParentsTo(el\n/*: Node*/\n, selector\n/*: string*/\n, baseNode\n/*: Node*/\n)\n/*: boolean*/\n{\n  var node = el;\n\n  do {\n    if (matchesSelector(node, selector)) return true;\n    if (node === baseNode) return false;\n    node = node.parentNode;\n  } while (node);\n\n  return false;\n}\n\nfunction addEvent(el\n/*: ?Node*/\n, event\n/*: string*/\n, handler\n/*: Function*/\n, inputOptions\n/*: Object*/\n)\n/*: void*/\n{\n  if (!el) return;\n\n  var options = _objectSpread({\n    capture: true\n  }, inputOptions);\n\n  if (el.addEventListener) {\n    el.addEventListener(event, handler, options);\n  } else if (el.attachEvent) {\n    el.attachEvent('on' + event, handler);\n  } else {\n    // $FlowIgnore: Doesn't think elements are indexable\n    el['on' + event] = handler;\n  }\n}\n\nfunction removeEvent(el\n/*: ?Node*/\n, event\n/*: string*/\n, handler\n/*: Function*/\n, inputOptions\n/*: Object*/\n)\n/*: void*/\n{\n  if (!el) return;\n\n  var options = _objectSpread({\n    capture: true\n  }, inputOptions);\n\n  if (el.removeEventListener) {\n    el.removeEventListener(event, handler, options);\n  } else if (el.detachEvent) {\n    el.detachEvent('on' + event, handler);\n  } else {\n    // $FlowIgnore: Doesn't think elements are indexable\n    el['on' + event] = null;\n  }\n}\n\nfunction outerHeight(node\n/*: HTMLElement*/\n)\n/*: number*/\n{\n  // This is deliberately excluding margin for our calculations, since we are using\n  // offsetTop which is including margin. See getBoundPosition\n  var height = node.clientHeight;\n  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n  height += (0, _shims.int)(computedStyle.borderTopWidth);\n  height += (0, _shims.int)(computedStyle.borderBottomWidth);\n  return height;\n}\n\nfunction outerWidth(node\n/*: HTMLElement*/\n)\n/*: number*/\n{\n  // This is deliberately excluding margin for our calculations, since we are using\n  // offsetLeft which is including margin. See getBoundPosition\n  var width = node.clientWidth;\n  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n  width += (0, _shims.int)(computedStyle.borderLeftWidth);\n  width += (0, _shims.int)(computedStyle.borderRightWidth);\n  return width;\n}\n\nfunction innerHeight(node\n/*: HTMLElement*/\n)\n/*: number*/\n{\n  var height = node.clientHeight;\n  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n  height -= (0, _shims.int)(computedStyle.paddingTop);\n  height -= (0, _shims.int)(computedStyle.paddingBottom);\n  return height;\n}\n\nfunction innerWidth(node\n/*: HTMLElement*/\n)\n/*: number*/\n{\n  var width = node.clientWidth;\n  var computedStyle = node.ownerDocument.defaultView.getComputedStyle(node);\n  width -= (0, _shims.int)(computedStyle.paddingLeft);\n  width -= (0, _shims.int)(computedStyle.paddingRight);\n  return width;\n} // Get from offsetParent\n\n\nfunction offsetXYFromParent(evt\n/*: {clientX: number, clientY: number}*/\n, offsetParent\n/*: HTMLElement*/\n, scale\n/*: number*/\n)\n/*: ControlPosition*/\n{\n  var isBody = offsetParent === offsetParent.ownerDocument.body;\n  var offsetParentRect = isBody ? {\n    left: 0,\n    top: 0\n  } : offsetParent.getBoundingClientRect();\n  var x = (evt.clientX + offsetParent.scrollLeft - offsetParentRect.left) / scale;\n  var y = (evt.clientY + offsetParent.scrollTop - offsetParentRect.top) / scale;\n  return {\n    x: x,\n    y: y\n  };\n}\n\nfunction createCSSTransform(controlPos\n/*: ControlPosition*/\n, positionOffset\n/*: PositionOffsetControlPosition*/\n)\n/*: Object*/\n{\n  var translation = getTranslation(controlPos, positionOffset, 'px');\n  return _defineProperty({}, (0, _getPrefix.browserPrefixToKey)('transform', _getPrefix.default), translation);\n}\n\nfunction createSVGTransform(controlPos\n/*: ControlPosition*/\n, positionOffset\n/*: PositionOffsetControlPosition*/\n)\n/*: string*/\n{\n  var translation = getTranslation(controlPos, positionOffset, '');\n  return translation;\n}\n\nfunction getTranslation(_ref2, positionOffset\n/*: PositionOffsetControlPosition*/\n, unitSuffix\n/*: string*/\n)\n/*: string*/\n{\n  var x = _ref2.x,\n      y = _ref2.y;\n  var translation = \"translate(\".concat(x).concat(unitSuffix, \",\").concat(y).concat(unitSuffix, \")\");\n\n  if (positionOffset) {\n    var defaultX = \"\".concat(typeof positionOffset.x === 'string' ? positionOffset.x : positionOffset.x + unitSuffix);\n    var defaultY = \"\".concat(typeof positionOffset.y === 'string' ? positionOffset.y : positionOffset.y + unitSuffix);\n    translation = \"translate(\".concat(defaultX, \", \").concat(defaultY, \")\") + translation;\n  }\n\n  return translation;\n}\n\nfunction getTouch(e\n/*: MouseTouchEvent*/\n, identifier\n/*: number*/\n)\n/*: ?{clientX: number, clientY: number}*/\n{\n  return e.targetTouches && (0, _shims.findInArray)(e.targetTouches, function (t) {\n    return identifier === t.identifier;\n  }) || e.changedTouches && (0, _shims.findInArray)(e.changedTouches, function (t) {\n    return identifier === t.identifier;\n  });\n}\n\nfunction getTouchIdentifier(e\n/*: MouseTouchEvent*/\n)\n/*: ?number*/\n{\n  if (e.targetTouches && e.targetTouches[0]) return e.targetTouches[0].identifier;\n  if (e.changedTouches && e.changedTouches[0]) return e.changedTouches[0].identifier;\n} // User-select Hacks:\n//\n// Useful for preventing blue highlights all over everything when dragging.\n// Note we're passing `document` b/c we could be iframed\n\n\nfunction addUserSelectStyles(doc\n/*: ?Document*/\n) {\n  if (!doc) return;\n  var styleEl = doc.getElementById('react-draggable-style-el');\n\n  if (!styleEl) {\n    styleEl = doc.createElement('style');\n    styleEl.type = 'text/css';\n    styleEl.id = 'react-draggable-style-el';\n    styleEl.innerHTML = '.react-draggable-transparent-selection *::-moz-selection {all: inherit;}\\n';\n    styleEl.innerHTML += '.react-draggable-transparent-selection *::selection {all: inherit;}\\n';\n    doc.getElementsByTagName('head')[0].appendChild(styleEl);\n  }\n\n  if (doc.body) addClassName(doc.body, 'react-draggable-transparent-selection');\n}\n\nfunction removeUserSelectStyles(doc\n/*: ?Document*/\n) {\n  if (!doc) return;\n\n  try {\n    if (doc.body) removeClassName(doc.body, 'react-draggable-transparent-selection'); // $FlowIgnore: IE\n\n    if (doc.selection) {\n      // $FlowIgnore: IE\n      doc.selection.empty();\n    } else {\n      // Remove selection caused by scroll, unless it's a focused input\n      // (we use doc.defaultView in case we're in an iframe)\n      var selection = (doc.defaultView || window).getSelection();\n\n      if (selection && selection.type !== 'Caret') {\n        selection.removeAllRanges();\n      }\n    }\n  } catch (e) {// probably IE\n  }\n}\n\nfunction addClassName(el\n/*: HTMLElement*/\n, className\n/*: string*/\n) {\n  if (el.classList) {\n    el.classList.add(className);\n  } else {\n    if (!el.className.match(new RegExp(\"(?:^|\\\\s)\".concat(className, \"(?!\\\\S)\")))) {\n      el.className += \" \".concat(className);\n    }\n  }\n}\n\nfunction removeClassName(el\n/*: HTMLElement*/\n, className\n/*: string*/\n) {\n  if (el.classList) {\n    el.classList.remove(className);\n  } else {\n    el.className = el.className.replace(new RegExp(\"(?:^|\\\\s)\".concat(className, \"(?!\\\\S)\"), 'g'), '');\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-draggable/build/cjs/utils/domFns.js\n");

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/utils/getPrefix.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/getPrefix.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getPrefix = getPrefix;\nexports.browserPrefixToKey = browserPrefixToKey;\nexports.browserPrefixToStyle = browserPrefixToStyle;\nexports.default = void 0;\nvar prefixes = ['Moz', 'Webkit', 'O', 'ms'];\n\nfunction getPrefix()\n/*: string*/\n{\n  var prop\n  /*: string*/\n  = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transform';\n  // Checking specifically for 'window.document' is for pseudo-browser server-side\n  // environments that define 'window' as the global context.\n  // E.g. React-rails (see https://github.com/reactjs/react-rails/pull/84)\n  if (typeof window === 'undefined' || typeof window.document === 'undefined') return '';\n  var style = window.document.documentElement.style;\n  if (prop in style) return '';\n\n  for (var i = 0; i < prefixes.length; i++) {\n    if (browserPrefixToKey(prop, prefixes[i]) in style) return prefixes[i];\n  }\n\n  return '';\n}\n\nfunction browserPrefixToKey(prop\n/*: string*/\n, prefix\n/*: string*/\n)\n/*: string*/\n{\n  return prefix ? \"\".concat(prefix).concat(kebabToTitleCase(prop)) : prop;\n}\n\nfunction browserPrefixToStyle(prop\n/*: string*/\n, prefix\n/*: string*/\n)\n/*: string*/\n{\n  return prefix ? \"-\".concat(prefix.toLowerCase(), \"-\").concat(prop) : prop;\n}\n\nfunction kebabToTitleCase(str\n/*: string*/\n)\n/*: string*/\n{\n  var out = '';\n  var shouldCapitalize = true;\n\n  for (var i = 0; i < str.length; i++) {\n    if (shouldCapitalize) {\n      out += str[i].toUpperCase();\n      shouldCapitalize = false;\n    } else if (str[i] === '-') {\n      shouldCapitalize = true;\n    } else {\n      out += str[i];\n    }\n  }\n\n  return out;\n} // Default export is the prefix itself, like 'Moz', 'Webkit', etc\n// Note that you may have to re-test for certain things; for instance, Chrome 50\n// can handle unprefixed `transform`, but not unprefixed `user-select`\n\n\nvar _default = getPrefix();\n\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRyYWdnYWJsZS9idWlsZC9janMvdXRpbHMvZ2V0UHJlZml4LmpzPzE5YWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIscUJBQXFCO0FBQ3RDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQixnQkFBZ0I7QUFDakM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7QUFDRCx3REFBd0Q7QUFDeEQ7OztBQUdBOztBQUVBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LWRyYWdnYWJsZS9idWlsZC9janMvdXRpbHMvZ2V0UHJlZml4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldFByZWZpeCA9IGdldFByZWZpeDtcbmV4cG9ydHMuYnJvd3NlclByZWZpeFRvS2V5ID0gYnJvd3NlclByZWZpeFRvS2V5O1xuZXhwb3J0cy5icm93c2VyUHJlZml4VG9TdHlsZSA9IGJyb3dzZXJQcmVmaXhUb1N0eWxlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIHByZWZpeGVzID0gWydNb3onLCAnV2Via2l0JywgJ08nLCAnbXMnXTtcblxuZnVuY3Rpb24gZ2V0UHJlZml4KClcbi8qOiBzdHJpbmcqL1xue1xuICB2YXIgcHJvcFxuICAvKjogc3RyaW5nKi9cbiAgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICd0cmFuc2Zvcm0nO1xuICAvLyBDaGVja2luZyBzcGVjaWZpY2FsbHkgZm9yICd3aW5kb3cuZG9jdW1lbnQnIGlzIGZvciBwc2V1ZG8tYnJvd3NlciBzZXJ2ZXItc2lkZVxuICAvLyBlbnZpcm9ubWVudHMgdGhhdCBkZWZpbmUgJ3dpbmRvdycgYXMgdGhlIGdsb2JhbCBjb250ZXh0LlxuICAvLyBFLmcuIFJlYWN0LXJhaWxzIChzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtcmFpbHMvcHVsbC84NClcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8IHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gJyc7XG4gIHZhciBzdHlsZSA9IHdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGU7XG4gIGlmIChwcm9wIGluIHN0eWxlKSByZXR1cm4gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXhlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChicm93c2VyUHJlZml4VG9LZXkocHJvcCwgcHJlZml4ZXNbaV0pIGluIHN0eWxlKSByZXR1cm4gcHJlZml4ZXNbaV07XG4gIH1cblxuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIGJyb3dzZXJQcmVmaXhUb0tleShwcm9wXG4vKjogc3RyaW5nKi9cbiwgcHJlZml4XG4vKjogc3RyaW5nKi9cbilcbi8qOiBzdHJpbmcqL1xue1xuICByZXR1cm4gcHJlZml4ID8gXCJcIi5jb25jYXQocHJlZml4KS5jb25jYXQoa2ViYWJUb1RpdGxlQ2FzZShwcm9wKSkgOiBwcm9wO1xufVxuXG5mdW5jdGlvbiBicm93c2VyUHJlZml4VG9TdHlsZShwcm9wXG4vKjogc3RyaW5nKi9cbiwgcHJlZml4XG4vKjogc3RyaW5nKi9cbilcbi8qOiBzdHJpbmcqL1xue1xuICByZXR1cm4gcHJlZml4ID8gXCItXCIuY29uY2F0KHByZWZpeC50b0xvd2VyQ2FzZSgpLCBcIi1cIikuY29uY2F0KHByb3ApIDogcHJvcDtcbn1cblxuZnVuY3Rpb24ga2ViYWJUb1RpdGxlQ2FzZShzdHJcbi8qOiBzdHJpbmcqL1xuKVxuLyo6IHN0cmluZyovXG57XG4gIHZhciBvdXQgPSAnJztcbiAgdmFyIHNob3VsZENhcGl0YWxpemUgPSB0cnVlO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHNob3VsZENhcGl0YWxpemUpIHtcbiAgICAgIG91dCArPSBzdHJbaV0udG9VcHBlckNhc2UoKTtcbiAgICAgIHNob3VsZENhcGl0YWxpemUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHN0cltpXSA9PT0gJy0nKSB7XG4gICAgICBzaG91bGRDYXBpdGFsaXplID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9IHN0cltpXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0O1xufSAvLyBEZWZhdWx0IGV4cG9ydCBpcyB0aGUgcHJlZml4IGl0c2VsZiwgbGlrZSAnTW96JywgJ1dlYmtpdCcsIGV0Y1xuLy8gTm90ZSB0aGF0IHlvdSBtYXkgaGF2ZSB0byByZS10ZXN0IGZvciBjZXJ0YWluIHRoaW5nczsgZm9yIGluc3RhbmNlLCBDaHJvbWUgNTBcbi8vIGNhbiBoYW5kbGUgdW5wcmVmaXhlZCBgdHJhbnNmb3JtYCwgYnV0IG5vdCB1bnByZWZpeGVkIGB1c2VyLXNlbGVjdGBcblxuXG52YXIgX2RlZmF1bHQgPSBnZXRQcmVmaXgoKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-draggable/build/cjs/utils/getPrefix.js\n");

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/utils/log.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/log.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = log;\n\n/*eslint no-console:0*/\nfunction log() {\n  var _console;\n\n  if (undefined) (_console = console).log.apply(_console, arguments);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRyYWdnYWJsZS9idWlsZC9janMvdXRpbHMvbG9nLmpzP2IxMmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9yZWFjdC1kcmFnZ2FibGUvYnVpbGQvY2pzL3V0aWxzL2xvZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gbG9nO1xuXG4vKmVzbGludCBuby1jb25zb2xlOjAqL1xuZnVuY3Rpb24gbG9nKCkge1xuICB2YXIgX2NvbnNvbGU7XG5cbiAgaWYgKHVuZGVmaW5lZCkgKF9jb25zb2xlID0gY29uc29sZSkubG9nLmFwcGx5KF9jb25zb2xlLCBhcmd1bWVudHMpO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-draggable/build/cjs/utils/log.js\n");

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/utils/positionFns.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/positionFns.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getBoundPosition = getBoundPosition;\nexports.snapToGrid = snapToGrid;\nexports.canDragX = canDragX;\nexports.canDragY = canDragY;\nexports.getControlPosition = getControlPosition;\nexports.createCoreData = createCoreData;\nexports.createDraggableData = createDraggableData;\n\nvar _shims = __webpack_require__(/*! ./shims */ \"./node_modules/react-draggable/build/cjs/utils/shims.js\");\n\nvar _domFns = __webpack_require__(/*! ./domFns */ \"./node_modules/react-draggable/build/cjs/utils/domFns.js\");\n\nfunction getBoundPosition(draggable\n/*: Draggable*/\n, x\n/*: number*/\n, y\n/*: number*/\n)\n/*: [number, number]*/\n{\n  // If no bounds, short-circuit and move on\n  if (!draggable.props.bounds) return [x, y]; // Clone new bounds\n\n  var bounds = draggable.props.bounds;\n  bounds = typeof bounds === 'string' ? bounds : cloneBounds(bounds);\n  var node = findDOMNode(draggable);\n\n  if (typeof bounds === 'string') {\n    var ownerDocument = node.ownerDocument;\n    var ownerWindow = ownerDocument.defaultView;\n    var boundNode;\n\n    if (bounds === 'parent') {\n      boundNode = node.parentNode;\n    } else {\n      boundNode = ownerDocument.querySelector(bounds);\n    }\n\n    if (!(boundNode instanceof ownerWindow.HTMLElement)) {\n      throw new Error('Bounds selector \"' + bounds + '\" could not find an element.');\n    }\n\n    var nodeStyle = ownerWindow.getComputedStyle(node);\n    var boundNodeStyle = ownerWindow.getComputedStyle(boundNode); // Compute bounds. This is a pain with padding and offsets but this gets it exactly right.\n\n    bounds = {\n      left: -node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingLeft) + (0, _shims.int)(nodeStyle.marginLeft),\n      top: -node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingTop) + (0, _shims.int)(nodeStyle.marginTop),\n      right: (0, _domFns.innerWidth)(boundNode) - (0, _domFns.outerWidth)(node) - node.offsetLeft + (0, _shims.int)(boundNodeStyle.paddingRight) - (0, _shims.int)(nodeStyle.marginRight),\n      bottom: (0, _domFns.innerHeight)(boundNode) - (0, _domFns.outerHeight)(node) - node.offsetTop + (0, _shims.int)(boundNodeStyle.paddingBottom) - (0, _shims.int)(nodeStyle.marginBottom)\n    };\n  } // Keep x and y below right and bottom limits...\n\n\n  if ((0, _shims.isNum)(bounds.right)) x = Math.min(x, bounds.right);\n  if ((0, _shims.isNum)(bounds.bottom)) y = Math.min(y, bounds.bottom); // But above left and top limits.\n\n  if ((0, _shims.isNum)(bounds.left)) x = Math.max(x, bounds.left);\n  if ((0, _shims.isNum)(bounds.top)) y = Math.max(y, bounds.top);\n  return [x, y];\n}\n\nfunction snapToGrid(grid\n/*: [number, number]*/\n, pendingX\n/*: number*/\n, pendingY\n/*: number*/\n)\n/*: [number, number]*/\n{\n  var x = Math.round(pendingX / grid[0]) * grid[0];\n  var y = Math.round(pendingY / grid[1]) * grid[1];\n  return [x, y];\n}\n\nfunction canDragX(draggable\n/*: Draggable*/\n)\n/*: boolean*/\n{\n  return draggable.props.axis === 'both' || draggable.props.axis === 'x';\n}\n\nfunction canDragY(draggable\n/*: Draggable*/\n)\n/*: boolean*/\n{\n  return draggable.props.axis === 'both' || draggable.props.axis === 'y';\n} // Get {x, y} positions from event.\n\n\nfunction getControlPosition(e\n/*: MouseTouchEvent*/\n, touchIdentifier\n/*: ?number*/\n, draggableCore\n/*: DraggableCore*/\n)\n/*: ?ControlPosition*/\n{\n  var touchObj = typeof touchIdentifier === 'number' ? (0, _domFns.getTouch)(e, touchIdentifier) : null;\n  if (typeof touchIdentifier === 'number' && !touchObj) return null; // not the right touch\n\n  var node = findDOMNode(draggableCore); // User can provide an offsetParent if desired.\n\n  var offsetParent = draggableCore.props.offsetParent || node.offsetParent || node.ownerDocument.body;\n  return (0, _domFns.offsetXYFromParent)(touchObj || e, offsetParent, draggableCore.props.scale);\n} // Create an data object exposed by <DraggableCore>'s events\n\n\nfunction createCoreData(draggable\n/*: DraggableCore*/\n, x\n/*: number*/\n, y\n/*: number*/\n)\n/*: DraggableData*/\n{\n  var state = draggable.state;\n  var isStart = !(0, _shims.isNum)(state.lastX);\n  var node = findDOMNode(draggable);\n\n  if (isStart) {\n    // If this is our first move, use the x and y as last coords.\n    return {\n      node: node,\n      deltaX: 0,\n      deltaY: 0,\n      lastX: x,\n      lastY: y,\n      x: x,\n      y: y\n    };\n  } else {\n    // Otherwise calculate proper values.\n    return {\n      node: node,\n      deltaX: x - state.lastX,\n      deltaY: y - state.lastY,\n      lastX: state.lastX,\n      lastY: state.lastY,\n      x: x,\n      y: y\n    };\n  }\n} // Create an data exposed by <Draggable>'s events\n\n\nfunction createDraggableData(draggable\n/*: Draggable*/\n, coreData\n/*: DraggableData*/\n)\n/*: DraggableData*/\n{\n  var scale = draggable.props.scale;\n  return {\n    node: coreData.node,\n    x: draggable.state.x + coreData.deltaX / scale,\n    y: draggable.state.y + coreData.deltaY / scale,\n    deltaX: coreData.deltaX / scale,\n    deltaY: coreData.deltaY / scale,\n    lastX: draggable.state.x,\n    lastY: draggable.state.y\n  };\n} // A lot faster than stringify/parse\n\n\nfunction cloneBounds(bounds\n/*: Bounds*/\n)\n/*: Bounds*/\n{\n  return {\n    left: bounds.left,\n    top: bounds.top,\n    right: bounds.right,\n    bottom: bounds.bottom\n  };\n}\n\nfunction findDOMNode(draggable\n/*: Draggable | DraggableCore*/\n)\n/*: HTMLElement*/\n{\n  var node = draggable.findDOMNode();\n\n  if (!node) {\n    throw new Error('<DraggableCore>: Unmounted during event!');\n  } // $FlowIgnore we can't assert on HTMLElement due to tests... FIXME\n\n\n  return node;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-draggable/build/cjs/utils/positionFns.js\n");

/***/ }),

/***/ "./node_modules/react-draggable/build/cjs/utils/shims.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-draggable/build/cjs/utils/shims.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findInArray = findInArray;\nexports.isFunction = isFunction;\nexports.isNum = isNum;\nexports.int = int;\nexports.dontSetMe = dontSetMe;\n\n// @credits https://gist.github.com/rogozhnikoff/a43cfed27c41e4e68cdc\nfunction findInArray(array\n/*: Array<any> | TouchList*/\n, callback\n/*: Function*/\n)\n/*: any*/\n{\n  for (var i = 0, length = array.length; i < length; i++) {\n    if (callback.apply(callback, [array[i], i, array])) return array[i];\n  }\n}\n\nfunction isFunction(func\n/*: any*/\n)\n/*: boolean %checks*/\n{\n  return typeof func === 'function' || Object.prototype.toString.call(func) === '[object Function]';\n}\n\nfunction isNum(num\n/*: any*/\n)\n/*: boolean %checks*/\n{\n  return typeof num === 'number' && !isNaN(num);\n}\n\nfunction int(a\n/*: string*/\n)\n/*: number*/\n{\n  return parseInt(a, 10);\n}\n\nfunction dontSetMe(props\n/*: Object*/\n, propName\n/*: string*/\n, componentName\n/*: string*/\n) {\n  if (props[propName]) {\n    return new Error(\"Invalid prop \".concat(propName, \" passed to \").concat(componentName, \" - do not set this, set it on the child.\"));\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRyYWdnYWJsZS9idWlsZC9janMvdXRpbHMvc2hpbXMuanM/ODFiNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxZQUFZO0FBQ3BEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3JlYWN0LWRyYWdnYWJsZS9idWlsZC9janMvdXRpbHMvc2hpbXMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmluZEluQXJyYXkgPSBmaW5kSW5BcnJheTtcbmV4cG9ydHMuaXNGdW5jdGlvbiA9IGlzRnVuY3Rpb247XG5leHBvcnRzLmlzTnVtID0gaXNOdW07XG5leHBvcnRzLmludCA9IGludDtcbmV4cG9ydHMuZG9udFNldE1lID0gZG9udFNldE1lO1xuXG4vLyBAY3JlZGl0cyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9yb2dvemhuaWtvZmYvYTQzY2ZlZDI3YzQxZTRlNjhjZGNcbmZ1bmN0aW9uIGZpbmRJbkFycmF5KGFycmF5XG4vKjogQXJyYXk8YW55PiB8IFRvdWNoTGlzdCovXG4sIGNhbGxiYWNrXG4vKjogRnVuY3Rpb24qL1xuKVxuLyo6IGFueSovXG57XG4gIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChjYWxsYmFjay5hcHBseShjYWxsYmFjaywgW2FycmF5W2ldLCBpLCBhcnJheV0pKSByZXR1cm4gYXJyYXlbaV07XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNGdW5jdGlvbihmdW5jXG4vKjogYW55Ki9cbilcbi8qOiBib29sZWFuICVjaGVja3MqL1xue1xuICByZXR1cm4gdHlwZW9mIGZ1bmMgPT09ICdmdW5jdGlvbicgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGZ1bmMpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xufVxuXG5mdW5jdGlvbiBpc051bShudW1cbi8qOiBhbnkqL1xuKVxuLyo6IGJvb2xlYW4gJWNoZWNrcyovXG57XG4gIHJldHVybiB0eXBlb2YgbnVtID09PSAnbnVtYmVyJyAmJiAhaXNOYU4obnVtKTtcbn1cblxuZnVuY3Rpb24gaW50KGFcbi8qOiBzdHJpbmcqL1xuKVxuLyo6IG51bWJlciovXG57XG4gIHJldHVybiBwYXJzZUludChhLCAxMCk7XG59XG5cbmZ1bmN0aW9uIGRvbnRTZXRNZShwcm9wc1xuLyo6IE9iamVjdCovXG4sIHByb3BOYW1lXG4vKjogc3RyaW5nKi9cbiwgY29tcG9uZW50TmFtZVxuLyo6IHN0cmluZyovXG4pIHtcbiAgaWYgKHByb3BzW3Byb3BOYW1lXSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoXCJJbnZhbGlkIHByb3AgXCIuY29uY2F0KHByb3BOYW1lLCBcIiBwYXNzZWQgdG8gXCIpLmNvbmNhdChjb21wb25lbnROYW1lLCBcIiAtIGRvIG5vdCBzZXQgdGhpcywgc2V0IGl0IG9uIHRoZSBjaGlsZC5cIikpO1xuICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-draggable/build/cjs/utils/shims.js\n");

/***/ }),

/***/ "./schema/protos/banana_pb.js":
/*!************************************!*\
  !*** ./schema/protos/banana_pb.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {// source: banana.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = __webpack_require__(/*! google-protobuf */ \"./node_modules/google-protobuf/google-protobuf.js\");\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar game_pb = __webpack_require__(/*! ./game_pb.js */ \"./schema/protos/game_pb.js\");\n\ngoog.object.extend(proto, game_pb);\ngoog.exportSymbol('proto.BananaGameAction', null, global);\ngoog.exportSymbol('proto.BananaGameState', null, global);\ngoog.exportSymbol('proto.BananaGameState.BananaState', null, global);\ngoog.exportSymbol('proto.BopAction', null, global);\ngoog.exportSymbol('proto.BopBoard', null, global);\ngoog.exportSymbol('proto.Instruction', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.BopBoard = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.BopBoard, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.BopBoard.displayName = 'proto.BopBoard';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.Instruction = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.Instruction, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Instruction.displayName = 'proto.Instruction';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.BananaGameState = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.BananaGameState.repeatedFields_, null);\n};\n\ngoog.inherits(proto.BananaGameState, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.BananaGameState.displayName = 'proto.BananaGameState';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.BananaGameAction = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, null, null);\n};\n\ngoog.inherits(proto.BananaGameAction, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.BananaGameAction.displayName = 'proto.BananaGameAction';\n}\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.BopBoard.prototype.toObject = function (opt_includeInstance) {\n    return proto.BopBoard.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.BopBoard} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.BopBoard.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      ship: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      bop: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n      pull: jspb.Message.getFieldWithDefault(msg, 3, \"\"),\n      spin: jspb.Message.getFieldWithDefault(msg, 4, \"\"),\n      twist: jspb.Message.getFieldWithDefault(msg, 5, \"\"),\n      flick: jspb.Message.getFieldWithDefault(msg, 6, \"\")\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.BopBoard}\n */\n\n\nproto.BopBoard.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.BopBoard();\n  return proto.BopBoard.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.BopBoard} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.BopBoard}\n */\n\n\nproto.BopBoard.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setShip(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setBop(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setPull(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setSpin(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setTwist(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setFlick(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.BopBoard.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.BopBoard.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.BopBoard} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.BopBoard.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getShip();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getBop();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getPull();\n\n  if (f.length > 0) {\n    writer.writeString(3, f);\n  }\n\n  f = message.getSpin();\n\n  if (f.length > 0) {\n    writer.writeString(4, f);\n  }\n\n  f = message.getTwist();\n\n  if (f.length > 0) {\n    writer.writeString(5, f);\n  }\n\n  f = message.getFlick();\n\n  if (f.length > 0) {\n    writer.writeString(6, f);\n  }\n};\n/**\n * optional string ship = 1;\n * @return {string}\n */\n\n\nproto.BopBoard.prototype.getShip = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.BopBoard} returns this\n */\n\n\nproto.BopBoard.prototype.setShip = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string bop = 2;\n * @return {string}\n */\n\n\nproto.BopBoard.prototype.getBop = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.BopBoard} returns this\n */\n\n\nproto.BopBoard.prototype.setBop = function (value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * optional string pull = 3;\n * @return {string}\n */\n\n\nproto.BopBoard.prototype.getPull = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 3, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.BopBoard} returns this\n */\n\n\nproto.BopBoard.prototype.setPull = function (value) {\n  return jspb.Message.setProto3StringField(this, 3, value);\n};\n/**\n * optional string spin = 4;\n * @return {string}\n */\n\n\nproto.BopBoard.prototype.getSpin = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 4, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.BopBoard} returns this\n */\n\n\nproto.BopBoard.prototype.setSpin = function (value) {\n  return jspb.Message.setProto3StringField(this, 4, value);\n};\n/**\n * optional string twist = 5;\n * @return {string}\n */\n\n\nproto.BopBoard.prototype.getTwist = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 5, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.BopBoard} returns this\n */\n\n\nproto.BopBoard.prototype.setTwist = function (value) {\n  return jspb.Message.setProto3StringField(this, 5, value);\n};\n/**\n * optional string flick = 6;\n * @return {string}\n */\n\n\nproto.BopBoard.prototype.getFlick = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 6, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.BopBoard} returns this\n */\n\n\nproto.BopBoard.prototype.setFlick = function (value) {\n  return jspb.Message.setProto3StringField(this, 6, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Instruction.prototype.toObject = function (opt_includeInstance) {\n    return proto.Instruction.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Instruction} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Instruction.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      text: jspb.Message.getFieldWithDefault(msg, 1, \"\"),\n      verb: jspb.Message.getFieldWithDefault(msg, 2, \"\"),\n      value: jspb.Message.getFieldWithDefault(msg, 3, 0),\n      expiryTick: jspb.Message.getFieldWithDefault(msg, 4, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Instruction}\n */\n\n\nproto.Instruction.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Instruction();\n  return proto.Instruction.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Instruction} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Instruction}\n */\n\n\nproto.Instruction.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setText(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {string} */\n        reader.readString();\n        msg.setVerb(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setValue(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setExpiryTick(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Instruction.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Instruction.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Instruction} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Instruction.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getText();\n\n  if (f.length > 0) {\n    writer.writeString(1, f);\n  }\n\n  f = message.getVerb();\n\n  if (f.length > 0) {\n    writer.writeString(2, f);\n  }\n\n  f = message.getValue();\n\n  if (f !== 0) {\n    writer.writeInt32(3, f);\n  }\n\n  f = message.getExpiryTick();\n\n  if (f !== 0) {\n    writer.writeInt32(4, f);\n  }\n};\n/**\n * optional string text = 1;\n * @return {string}\n */\n\n\nproto.Instruction.prototype.getText = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 1, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.Instruction} returns this\n */\n\n\nproto.Instruction.prototype.setText = function (value) {\n  return jspb.Message.setProto3StringField(this, 1, value);\n};\n/**\n * optional string verb = 2;\n * @return {string}\n */\n\n\nproto.Instruction.prototype.getVerb = function () {\n  return (\n    /** @type {string} */\n    jspb.Message.getFieldWithDefault(this, 2, \"\")\n  );\n};\n/**\n * @param {string} value\n * @return {!proto.Instruction} returns this\n */\n\n\nproto.Instruction.prototype.setVerb = function (value) {\n  return jspb.Message.setProto3StringField(this, 2, value);\n};\n/**\n * optional int32 value = 3;\n * @return {number}\n */\n\n\nproto.Instruction.prototype.getValue = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.Instruction} returns this\n */\n\n\nproto.Instruction.prototype.setValue = function (value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n/**\n * optional int32 expiry_tick = 4;\n * @return {number}\n */\n\n\nproto.Instruction.prototype.getExpiryTick = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 4, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.Instruction} returns this\n */\n\n\nproto.Instruction.prototype.setExpiryTick = function (value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.BananaGameState.repeatedFields_ = [3, 4];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.BananaGameState.prototype.toObject = function (opt_includeInstance) {\n    return proto.BananaGameState.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.BananaGameState} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.BananaGameState.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      baseState: (f = msg.getBaseState()) && game_pb.GameState.toObject(includeInstance, f),\n      state: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      boardsList: jspb.Message.toObjectList(msg.getBoardsList(), proto.BopBoard.toObject, includeInstance),\n      instructionsList: jspb.Message.toObjectList(msg.getInstructionsList(), proto.Instruction.toObject, includeInstance),\n      progress: jspb.Message.getFieldWithDefault(msg, 5, 0),\n      health: jspb.Message.getFieldWithDefault(msg, 6, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.BananaGameState}\n */\n\n\nproto.BananaGameState.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.BananaGameState();\n  return proto.BananaGameState.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.BananaGameState} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.BananaGameState}\n */\n\n\nproto.BananaGameState.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new game_pb.GameState();\n        reader.readMessage(value, game_pb.GameState.deserializeBinaryFromReader);\n        msg.setBaseState(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.BananaGameState.BananaState} */\n        reader.readEnum();\n        msg.setState(value);\n        break;\n\n      case 3:\n        var value = new proto.BopBoard();\n        reader.readMessage(value, proto.BopBoard.deserializeBinaryFromReader);\n        msg.addBoards(value);\n        break;\n\n      case 4:\n        var value = new proto.Instruction();\n        reader.readMessage(value, proto.Instruction.deserializeBinaryFromReader);\n        msg.addInstructions(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setProgress(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setHealth(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.BananaGameState.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.BananaGameState.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.BananaGameState} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.BananaGameState.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getBaseState();\n\n  if (f != null) {\n    writer.writeMessage(1, f, game_pb.GameState.serializeBinaryToWriter);\n  }\n\n  f = message.getState();\n\n  if (f !== 0.0) {\n    writer.writeEnum(2, f);\n  }\n\n  f = message.getBoardsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(3, f, proto.BopBoard.serializeBinaryToWriter);\n  }\n\n  f = message.getInstructionsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(4, f, proto.Instruction.serializeBinaryToWriter);\n  }\n\n  f = message.getProgress();\n\n  if (f !== 0) {\n    writer.writeInt32(5, f);\n  }\n\n  f = message.getHealth();\n\n  if (f !== 0) {\n    writer.writeInt32(6, f);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.BananaGameState.BananaState = {\n  WAITING_FOR_START: 0,\n  PLAYING: 1,\n  LEVEL_TRANSITION: 2\n};\n/**\n * optional GameState base_state = 1;\n * @return {?proto.GameState}\n */\n\nproto.BananaGameState.prototype.getBaseState = function () {\n  return (\n    /** @type{?proto.GameState} */\n    jspb.Message.getWrapperField(this, game_pb.GameState, 1)\n  );\n};\n/**\n * @param {?proto.GameState|undefined} value\n * @return {!proto.BananaGameState} returns this\n*/\n\n\nproto.BananaGameState.prototype.setBaseState = function (value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.BananaGameState} returns this\n */\n\n\nproto.BananaGameState.prototype.clearBaseState = function () {\n  return this.setBaseState(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.BananaGameState.prototype.hasBaseState = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional BananaState state = 2;\n * @return {!proto.BananaGameState.BananaState}\n */\n\n\nproto.BananaGameState.prototype.getState = function () {\n  return (\n    /** @type {!proto.BananaGameState.BananaState} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {!proto.BananaGameState.BananaState} value\n * @return {!proto.BananaGameState} returns this\n */\n\n\nproto.BananaGameState.prototype.setState = function (value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n/**\n * repeated BopBoard boards = 3;\n * @return {!Array<!proto.BopBoard>}\n */\n\n\nproto.BananaGameState.prototype.getBoardsList = function () {\n  return (\n    /** @type{!Array<!proto.BopBoard>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.BopBoard, 3)\n  );\n};\n/**\n * @param {!Array<!proto.BopBoard>} value\n * @return {!proto.BananaGameState} returns this\n*/\n\n\nproto.BananaGameState.prototype.setBoardsList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n/**\n * @param {!proto.BopBoard=} opt_value\n * @param {number=} opt_index\n * @return {!proto.BopBoard}\n */\n\n\nproto.BananaGameState.prototype.addBoards = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.BopBoard, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.BananaGameState} returns this\n */\n\n\nproto.BananaGameState.prototype.clearBoardsList = function () {\n  return this.setBoardsList([]);\n};\n/**\n * repeated Instruction instructions = 4;\n * @return {!Array<!proto.Instruction>}\n */\n\n\nproto.BananaGameState.prototype.getInstructionsList = function () {\n  return (\n    /** @type{!Array<!proto.Instruction>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.Instruction, 4)\n  );\n};\n/**\n * @param {!Array<!proto.Instruction>} value\n * @return {!proto.BananaGameState} returns this\n*/\n\n\nproto.BananaGameState.prototype.setInstructionsList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 4, value);\n};\n/**\n * @param {!proto.Instruction=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Instruction}\n */\n\n\nproto.BananaGameState.prototype.addInstructions = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Instruction, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.BananaGameState} returns this\n */\n\n\nproto.BananaGameState.prototype.clearInstructionsList = function () {\n  return this.setInstructionsList([]);\n};\n/**\n * optional int32 progress = 5;\n * @return {number}\n */\n\n\nproto.BananaGameState.prototype.getProgress = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 5, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.BananaGameState} returns this\n */\n\n\nproto.BananaGameState.prototype.setProgress = function (value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n/**\n * optional int32 health = 6;\n * @return {number}\n */\n\n\nproto.BananaGameState.prototype.getHealth = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 6, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.BananaGameState} returns this\n */\n\n\nproto.BananaGameState.prototype.setHealth = function (value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.BananaGameAction.prototype.toObject = function (opt_includeInstance) {\n    return proto.BananaGameAction.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.BananaGameAction} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.BananaGameAction.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      baseAction: (f = msg.getBaseAction()) && game_pb.GameAction.toObject(includeInstance, f),\n      bopAction: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      value: jspb.Message.getFieldWithDefault(msg, 3, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.BananaGameAction}\n */\n\n\nproto.BananaGameAction.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.BananaGameAction();\n  return proto.BananaGameAction.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.BananaGameAction} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.BananaGameAction}\n */\n\n\nproto.BananaGameAction.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new game_pb.GameAction();\n        reader.readMessage(value, game_pb.GameAction.deserializeBinaryFromReader);\n        msg.setBaseAction(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.BopAction} */\n        reader.readEnum();\n        msg.setBopAction(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setValue(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.BananaGameAction.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.BananaGameAction.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.BananaGameAction} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.BananaGameAction.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getBaseAction();\n\n  if (f != null) {\n    writer.writeMessage(1, f, game_pb.GameAction.serializeBinaryToWriter);\n  }\n\n  f = message.getBopAction();\n\n  if (f !== 0.0) {\n    writer.writeEnum(2, f);\n  }\n\n  f = message.getValue();\n\n  if (f !== 0) {\n    writer.writeInt32(3, f);\n  }\n};\n/**\n * optional GameAction base_action = 1;\n * @return {?proto.GameAction}\n */\n\n\nproto.BananaGameAction.prototype.getBaseAction = function () {\n  return (\n    /** @type{?proto.GameAction} */\n    jspb.Message.getWrapperField(this, game_pb.GameAction, 1)\n  );\n};\n/**\n * @param {?proto.GameAction|undefined} value\n * @return {!proto.BananaGameAction} returns this\n*/\n\n\nproto.BananaGameAction.prototype.setBaseAction = function (value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.BananaGameAction} returns this\n */\n\n\nproto.BananaGameAction.prototype.clearBaseAction = function () {\n  return this.setBaseAction(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.BananaGameAction.prototype.hasBaseAction = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional BopAction bop_action = 2;\n * @return {!proto.BopAction}\n */\n\n\nproto.BananaGameAction.prototype.getBopAction = function () {\n  return (\n    /** @type {!proto.BopAction} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {!proto.BopAction} value\n * @return {!proto.BananaGameAction} returns this\n */\n\n\nproto.BananaGameAction.prototype.setBopAction = function (value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n/**\n * optional int32 value = 3;\n * @return {number}\n */\n\n\nproto.BananaGameAction.prototype.getValue = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.BananaGameAction} returns this\n */\n\n\nproto.BananaGameAction.prototype.setValue = function (value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n/**\n * @enum {number}\n */\n\n\nproto.BopAction = {\n  BOP: 0,\n  PULL: 1,\n  SPIN: 2,\n  TWIST: 3,\n  FLICK: 4\n};\ngoog.object.extend(exports, proto);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./schema/protos/banana_pb.js\n");

/***/ }),

/***/ "./utils/animation.ts":
/*!****************************!*\
  !*** ./utils/animation.ts ***!
  \****************************/
/*! exports provided: useAnimationFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useAnimationFrame\", function() { return useAnimationFrame; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\n\n/**\n * Sets up a callback to run every animation frame.\n * Must provide a tick ref which will be passed into the callback.\n */\n\nvar useAnimationFrame = function useAnimationFrame(callback, tickRef, deps) {\n  _s();\n\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  var requestRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n  var previousTimeRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n\n  var animate = function animate(time) {\n    if (previousTimeRef.current !== undefined) {\n      var deltaTime = time - previousTimeRef.current;\n      tickRef.current += deltaTime / 100;\n      callback(tickRef.current);\n    }\n\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n    requestRef.current = requestAnimationFrame(animate);\n    return function () {\n      return cancelAnimationFrame(requestRef.current);\n    };\n  }, [deps]);\n};\n\n_s(useAnimationFrame, \"z8M7fn6QAiYOb97lWpO8m/pmXa0=\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvYW5pbWF0aW9uLnRzP2ExMTUiXSwibmFtZXMiOlsidXNlQW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsInRpY2tSZWYiLCJkZXBzIiwicmVxdWVzdFJlZiIsInVzZVJlZiIsInByZXZpb3VzVGltZVJlZiIsImFuaW1hdGUiLCJ0aW1lIiwiY3VycmVudCIsInVuZGVmaW5lZCIsImRlbHRhVGltZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVzZUVmZmVjdCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUVBOzs7OztBQUlPLElBQU1BLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FDL0JDLFFBRCtCLEVBRS9CQyxPQUYrQixFQUcvQkMsSUFIK0IsRUFJNUI7QUFBQTs7QUFDSDtBQUNBO0FBQ0EsTUFBTUMsVUFBVSxHQUFHQyxvREFBTSxFQUF6QjtBQUNBLE1BQU1DLGVBQWUsR0FBR0Qsb0RBQU0sRUFBOUI7O0FBRUEsTUFBTUUsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBQ0MsSUFBRCxFQUFVO0FBQ3hCLFFBQUlGLGVBQWUsQ0FBQ0csT0FBaEIsS0FBNEJDLFNBQWhDLEVBQTJDO0FBQ3pDLFVBQU1DLFNBQVMsR0FBR0gsSUFBSSxHQUFHRixlQUFlLENBQUNHLE9BQXpDO0FBQ0FQLGFBQU8sQ0FBQ08sT0FBUixJQUFtQkUsU0FBUyxHQUFHLEdBQS9CO0FBQ0FWLGNBQVEsQ0FBQ0MsT0FBTyxDQUFDTyxPQUFULENBQVI7QUFDRDs7QUFDREgsbUJBQWUsQ0FBQ0csT0FBaEIsR0FBMEJELElBQTFCO0FBQ0FKLGNBQVUsQ0FBQ0ssT0FBWCxHQUFxQkcscUJBQXFCLENBQUNMLE9BQUQsQ0FBMUM7QUFDRCxHQVJEOztBQVVBTSx5REFBUyxDQUFDLFlBQU07QUFDZFQsY0FBVSxDQUFDSyxPQUFYLEdBQXFCRyxxQkFBcUIsQ0FBQ0wsT0FBRCxDQUExQztBQUNBLFdBQU87QUFBQSxhQUFNTyxvQkFBb0IsQ0FBQ1YsVUFBVSxDQUFDSyxPQUFaLENBQTFCO0FBQUEsS0FBUDtBQUNELEdBSFEsRUFHTixDQUFDTixJQUFELENBSE0sQ0FBVDtBQUlELENBeEJNOztHQUFNSCxpQiIsImZpbGUiOiIuL3V0aWxzL2FuaW1hdGlvbi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIFNldHMgdXAgYSBjYWxsYmFjayB0byBydW4gZXZlcnkgYW5pbWF0aW9uIGZyYW1lLlxuICogTXVzdCBwcm92aWRlIGEgdGljayByZWYgd2hpY2ggd2lsbCBiZSBwYXNzZWQgaW50byB0aGUgY2FsbGJhY2suXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VBbmltYXRpb25GcmFtZSA9IChcbiAgY2FsbGJhY2s6ICh0aWNrOiBudW1iZXIpID0+IHZvaWQsXG4gIHRpY2tSZWY6IFJlYWN0Lk11dGFibGVSZWZPYmplY3Q8bnVtYmVyPixcbiAgZGVwczogUmVhY3QuRGVwZW5kZW5jeUxpc3RcbikgPT4ge1xuICAvLyBVc2UgdXNlUmVmIGZvciBtdXRhYmxlIHZhcmlhYmxlcyB0aGF0IHdlIHdhbnQgdG8gcGVyc2lzdFxuICAvLyB3aXRob3V0IHRyaWdnZXJpbmcgYSByZS1yZW5kZXIgb24gdGhlaXIgY2hhbmdlXG4gIGNvbnN0IHJlcXVlc3RSZWYgPSB1c2VSZWY8bnVtYmVyIHwgdW5kZWZpbmVkPigpO1xuICBjb25zdCBwcmV2aW91c1RpbWVSZWYgPSB1c2VSZWY8bnVtYmVyIHwgdW5kZWZpbmVkPigpO1xuXG4gIGNvbnN0IGFuaW1hdGUgPSAodGltZSkgPT4ge1xuICAgIGlmIChwcmV2aW91c1RpbWVSZWYuY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBkZWx0YVRpbWUgPSB0aW1lIC0gcHJldmlvdXNUaW1lUmVmLmN1cnJlbnQ7XG4gICAgICB0aWNrUmVmLmN1cnJlbnQgKz0gZGVsdGFUaW1lIC8gMTAwO1xuICAgICAgY2FsbGJhY2sodGlja1JlZi5jdXJyZW50KTtcbiAgICB9XG4gICAgcHJldmlvdXNUaW1lUmVmLmN1cnJlbnQgPSB0aW1lO1xuICAgIHJlcXVlc3RSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlcXVlc3RSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgICByZXR1cm4gKCkgPT4gY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVxdWVzdFJlZi5jdXJyZW50ISk7XG4gIH0sIFtkZXBzXSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./utils/animation.ts\n");

/***/ })

}]);