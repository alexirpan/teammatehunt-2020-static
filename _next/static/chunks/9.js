(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([[9],{

/***/ "./assets/puzzle/papaya/hyperspace_bold.otf":
/*!**************************************************!*\
  !*** ./assets/puzzle/papaya/hyperspace_bold.otf ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__webpack_require__.p + \"static/assets/puzzle/papaya/hyperspace_bold.otf\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXNzZXRzL3B1enpsZS9wYXBheWEvaHlwZXJzcGFjZV9ib2xkLm90Zj82MDI5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQWUsb0ZBQXVCLG9EQUFvRCIsImZpbGUiOiIuL2Fzc2V0cy9wdXp6bGUvcGFwYXlhL2h5cGVyc3BhY2VfYm9sZC5vdGYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwic3RhdGljL2Fzc2V0cy9wdXp6bGUvcGFwYXlhL2h5cGVyc3BhY2VfYm9sZC5vdGZcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./assets/puzzle/papaya/hyperspace_bold.otf\n");

/***/ }),

/***/ "./components/groupsolve/lobby.tsx":
/*!*****************************************!*\
  !*** ./components/groupsolve/lobby.tsx ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ \"./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\nvar _this = undefined,\n    _jsxFileName = \"/vagrant/client/components/groupsolve/lobby.tsx\";\n\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement;\n\nvar MAX_PLAYERS = 6;\n\nvar Lobby = function Lobby(_ref) {\n  var playerStarted = _ref.playerStarted,\n      isConnected = _ref.isConnected,\n      title = _ref.title,\n      players = _ref.players,\n      currentPlayer = _ref.currentPlayer,\n      playerSprite = _ref.playerSprite,\n      startButton = _ref.startButton,\n      confirmButton = _ref.confirmButton,\n      rejoinButton = _ref.rejoinButton,\n      className = _ref.className,\n      _ref$requiredPlayers = _ref.requiredPlayers,\n      requiredPlayers = _ref$requiredPlayers === void 0 ? 1 : _ref$requiredPlayers,\n      props = Object(_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref, [\"playerStarted\", \"isConnected\", \"title\", \"players\", \"currentPlayer\", \"playerSprite\", \"startButton\", \"confirmButton\", \"rejoinButton\", \"className\", \"requiredPlayers\"]);\n\n  var allStarted = isConnected && players.every(function (player) {\n    return player.getReady();\n  }) && players.length >= requiredPlayers;\n  var playersNeeded = Math.max(requiredPlayers - 1, players.filter(function (player) {\n    return !player.getReady();\n  }).length);\n  return __jsx(\"div\", Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props, {\n    className: \"jsx-243751013\" + \" \" + (props && props.className != null && props.className || \"abs-center center \".concat(className !== null && className !== void 0 ? className : '')),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }), title, allStarted ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, confirmButton, __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"Note: Once you begin a session, others won't be able to join until it ends.\")) : playerStarted && players.length >= requiredPlayers ? \"Waiting for \".concat(playersNeeded, \" other player\").concat(playersNeeded === 1 ? '' : 's', \" to join...\") : playerStarted ? \"(Minimum of \".concat(requiredPlayers, \" players required)\") : isConnected ? startButton : __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, rejoinButton, __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, \"Game in session... \", __jsx(\"br\", {\n    className: \"jsx-243751013\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 32\n    }\n  }), \"Please wait for the current session to complete.\")), players.length > 0 && __jsx(\"p\", {\n    className: \"jsx-243751013\" + \" \" + \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"(\", players.length, \" player\", players.length === 1 ? ' ' : 's ', \"in lobby)\"), playerSprite && __jsx(\"div\", {\n    className: \"jsx-243751013\" + \" \" + \"players flex-center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, players.map(function (player, i) {\n    return __jsx(\"div\", {\n      key: i,\n      style: {\n        backgroundPosition: \"\".concat(i * 100 / (MAX_PLAYERS - 1), \"%\"),\n        backgroundImage: \"url(\".concat(playerSprite.url, \")\"),\n        backgroundSize: '600% 100%',\n        transform: \"scale(\".concat(i === currentPlayer ? 1 : 0.7, \")\"),\n        filter: player.getReady() ? 'none' : 'grayscale(1) opacity(80%)',\n        width: playerSprite.width,\n        height: playerSprite.height\n      },\n      className: \"jsx-243751013\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    });\n  })), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"243751013\",\n    __self: _this\n  }, \".small.jsx-243751013{font-size:1.8vmin;line-height:2.2vmin;margin-top:2.8vmin;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlHa0IsQUFHNkIsa0JBQ0Usb0JBQ0QsbUJBQ3JCIiwiZmlsZSI6Ii92YWdyYW50L2NsaWVudC9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9nYW1lX3BiJztcbmltcG9ydCB7IGdldEltYWdlT2Zmc2V0IH0gZnJvbSAndXRpbHMvZ2FtZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHBsYXllclN0YXJ0ZWQ6IGJvb2xlYW47XG4gIGlzQ29ubmVjdGVkOiBib29sZWFuO1xuICB0aXRsZT86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcGxheWVyczogUGxheWVyW107XG4gIGN1cnJlbnRQbGF5ZXI6IG51bWJlcjtcbiAgcGxheWVyU3ByaXRlPzoge1xuICAgIHVybDogc3RyaW5nO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gIH07XG4gIHN0YXJ0QnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGNvbmZpcm1CdXR0b246IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcmVqb2luQnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIHJlcXVpcmVkUGxheWVycz86IG51bWJlcjtcbn1cblxuY29uc3QgTUFYX1BMQVlFUlMgPSA2O1xuXG5jb25zdCBMb2JieTogRnVuY3Rpb25Db21wb25lbnQ8XG4gIFByb3BzICYgT21pdDxSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+LCAndGl0bGUnPlxuPiA9ICh7XG4gIHBsYXllclN0YXJ0ZWQsXG4gIGlzQ29ubmVjdGVkLFxuICB0aXRsZSxcbiAgcGxheWVycyxcbiAgY3VycmVudFBsYXllcixcbiAgcGxheWVyU3ByaXRlLFxuICBzdGFydEJ1dHRvbixcbiAgY29uZmlybUJ1dHRvbixcbiAgcmVqb2luQnV0dG9uLFxuICBjbGFzc05hbWUsXG4gIHJlcXVpcmVkUGxheWVycyA9IDEsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGFsbFN0YXJ0ZWQgPVxuICAgIGlzQ29ubmVjdGVkICYmXG4gICAgcGxheWVycy5ldmVyeSgocGxheWVyKSA9PiBwbGF5ZXIuZ2V0UmVhZHkoKSkgJiZcbiAgICBwbGF5ZXJzLmxlbmd0aCA+PSByZXF1aXJlZFBsYXllcnM7XG5cbiAgY29uc3QgcGxheWVyc05lZWRlZCA9IE1hdGgubWF4KFxuICAgIHJlcXVpcmVkUGxheWVycyAtIDEsXG4gICAgcGxheWVycy5maWx0ZXIoKHBsYXllcikgPT4gIXBsYXllci5nZXRSZWFkeSgpKS5sZW5ndGhcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgYWJzLWNlbnRlciBjZW50ZXIgJHtjbGFzc05hbWUgPz8gJyd9YH0gey4uLnByb3BzfT5cbiAgICAgIHt0aXRsZX1cbiAgICAgIHthbGxTdGFydGVkID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtjb25maXJtQnV0dG9ufVxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgICBOb3RlOiBPbmNlIHlvdSBiZWdpbiBhIHNlc3Npb24sIG90aGVycyB3b24ndCBiZSBhYmxlIHRvIGpvaW4gdW50aWxcbiAgICAgICAgICAgIGl0IGVuZHMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiBwbGF5ZXJTdGFydGVkICYmIHBsYXllcnMubGVuZ3RoID49IHJlcXVpcmVkUGxheWVycyA/IChcbiAgICAgICAgYFdhaXRpbmcgZm9yICR7cGxheWVyc05lZWRlZH0gb3RoZXIgcGxheWVyJHtcbiAgICAgICAgICBwbGF5ZXJzTmVlZGVkID09PSAxID8gJycgOiAncydcbiAgICAgICAgfSB0byBqb2luLi4uYFxuICAgICAgKSA6IHBsYXllclN0YXJ0ZWQgPyAoXG4gICAgICAgIGAoTWluaW11bSBvZiAke3JlcXVpcmVkUGxheWVyc30gcGxheWVycyByZXF1aXJlZClgXG4gICAgICApIDogaXNDb25uZWN0ZWQgPyAoXG4gICAgICAgIHN0YXJ0QnV0dG9uXG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZWpvaW5CdXR0b259XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj5cbiAgICAgICAgICAgIEdhbWUgaW4gc2Vzc2lvbi4uLiA8YnIgLz5cbiAgICAgICAgICAgIFBsZWFzZSB3YWl0IGZvciB0aGUgY3VycmVudCBzZXNzaW9uIHRvIGNvbXBsZXRlLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3BsYXllcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgKHtwbGF5ZXJzLmxlbmd0aH0gcGxheWVye3BsYXllcnMubGVuZ3RoID09PSAxID8gJyAnIDogJ3MgJ31cbiAgICAgICAgICBpbiBsb2JieSlcbiAgICAgICAgPC9wPlxuICAgICAgKX1cbiAgICAgIHtwbGF5ZXJTcHJpdGUgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllcnMgZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICB7cGxheWVycy5tYXAoKHBsYXllciwgaSkgPT4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBgJHsoaSAqIDEwMCkgLyAoTUFYX1BMQVlFUlMgLSAxKX0lYCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwbGF5ZXJTcHJpdGUudXJsfSlgLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjAwJSAxMDAlJyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2kgPT09IGN1cnJlbnRQbGF5ZXIgPyAxIDogMC43fSlgLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogcGxheWVyLmdldFJlYWR5KClcbiAgICAgICAgICAgICAgICAgID8gJ25vbmUnXG4gICAgICAgICAgICAgICAgICA6ICdncmF5c2NhbGUoMSkgb3BhY2l0eSg4MCUpJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogcGxheWVyU3ByaXRlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGxheWVyU3ByaXRlLmhlaWdodCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuc21hbGwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS44dm1pbjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMi4ydm1pbjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAyLjh2bWluO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2JieTtcbiJdfQ== */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/lobby.tsx */\"));\n};\n\n_c = Lobby;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Lobby);\n\nvar _c;\n\n$RefreshReg$(_c, \"Lobby\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vY29tcG9uZW50cy9ncm91cHNvbHZlL2xvYmJ5LnRzeD85NjdiIl0sIm5hbWVzIjpbIk1BWF9QTEFZRVJTIiwiTG9iYnkiLCJwbGF5ZXJTdGFydGVkIiwiaXNDb25uZWN0ZWQiLCJ0aXRsZSIsInBsYXllcnMiLCJjdXJyZW50UGxheWVyIiwicGxheWVyU3ByaXRlIiwic3RhcnRCdXR0b24iLCJjb25maXJtQnV0dG9uIiwicmVqb2luQnV0dG9uIiwiY2xhc3NOYW1lIiwicmVxdWlyZWRQbGF5ZXJzIiwicHJvcHMiLCJhbGxTdGFydGVkIiwiZXZlcnkiLCJwbGF5ZXIiLCJnZXRSZWFkeSIsImxlbmd0aCIsInBsYXllcnNOZWVkZWQiLCJNYXRoIiwibWF4IiwiZmlsdGVyIiwibWFwIiwiaSIsImJhY2tncm91bmRQb3NpdGlvbiIsImJhY2tncm91bmRJbWFnZSIsInVybCIsImJhY2tncm91bmRTaXplIiwidHJhbnNmb3JtIiwid2lkdGgiLCJoZWlnaHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBc0JBLElBQU1BLFdBQVcsR0FBRyxDQUFwQjs7QUFFQSxJQUFNQyxLQUVMLEdBQUcsU0FGRUEsS0FFRixPQWFFO0FBQUEsTUFaSkMsYUFZSSxRQVpKQSxhQVlJO0FBQUEsTUFYSkMsV0FXSSxRQVhKQSxXQVdJO0FBQUEsTUFWSkMsS0FVSSxRQVZKQSxLQVVJO0FBQUEsTUFUSkMsT0FTSSxRQVRKQSxPQVNJO0FBQUEsTUFSSkMsYUFRSSxRQVJKQSxhQVFJO0FBQUEsTUFQSkMsWUFPSSxRQVBKQSxZQU9JO0FBQUEsTUFOSkMsV0FNSSxRQU5KQSxXQU1JO0FBQUEsTUFMSkMsYUFLSSxRQUxKQSxhQUtJO0FBQUEsTUFKSkMsWUFJSSxRQUpKQSxZQUlJO0FBQUEsTUFISkMsU0FHSSxRQUhKQSxTQUdJO0FBQUEsa0NBRkpDLGVBRUk7QUFBQSxNQUZKQSxlQUVJLHFDQUZjLENBRWQ7QUFBQSxNQUREQyxLQUNDOztBQUNKLE1BQU1DLFVBQVUsR0FDZFgsV0FBVyxJQUNYRSxPQUFPLENBQUNVLEtBQVIsQ0FBYyxVQUFDQyxNQUFEO0FBQUEsV0FBWUEsTUFBTSxDQUFDQyxRQUFQLEVBQVo7QUFBQSxHQUFkLENBREEsSUFFQVosT0FBTyxDQUFDYSxNQUFSLElBQWtCTixlQUhwQjtBQUtBLE1BQU1PLGFBQWEsR0FBR0MsSUFBSSxDQUFDQyxHQUFMLENBQ3BCVCxlQUFlLEdBQUcsQ0FERSxFQUVwQlAsT0FBTyxDQUFDaUIsTUFBUixDQUFlLFVBQUNOLE1BQUQ7QUFBQSxXQUFZLENBQUNBLE1BQU0sQ0FBQ0MsUUFBUCxFQUFiO0FBQUEsR0FBZixFQUErQ0MsTUFGM0IsQ0FBdEI7QUFLQSxTQUNFLG9HQUE0REwsS0FBNUQ7QUFBQSwySEFBcUNGLFNBQXJDLGFBQXFDQSxTQUFyQyxjQUFxQ0EsU0FBckMsR0FBa0QsRUFBbEQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxNQUNHUCxLQURILEVBRUdVLFVBQVUsR0FDVCxtRUFDR0wsYUFESCxFQUVFO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLG1GQUZGLENBRFMsR0FRUFAsYUFBYSxJQUFJRyxPQUFPLENBQUNhLE1BQVIsSUFBa0JOLGVBQW5DLHlCQUNhTyxhQURiLDBCQUVBQSxhQUFhLEtBQUssQ0FBbEIsR0FBc0IsRUFBdEIsR0FBMkIsR0FGM0IsbUJBSUFqQixhQUFhLHlCQUNBVSxlQURBLDBCQUViVCxXQUFXLEdBQ2JLLFdBRGEsR0FHYixtRUFDR0UsWUFESCxFQUVFO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLDRCQUNxQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFEckIscURBRkYsQ0FuQkosRUEyQkdMLE9BQU8sQ0FBQ2EsTUFBUixHQUFpQixDQUFqQixJQUNDO0FBQUEsdUNBQWEsT0FBYjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFVBQ0liLE9BQU8sQ0FBQ2EsTUFEWixhQUMyQmIsT0FBTyxDQUFDYSxNQUFSLEtBQW1CLENBQW5CLEdBQXVCLEdBQXZCLEdBQTZCLElBRHhELGNBNUJKLEVBaUNHWCxZQUFZLElBQ1g7QUFBQSx1Q0FBZSxxQkFBZjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEtBQ0dGLE9BQU8sQ0FBQ2tCLEdBQVIsQ0FBWSxVQUFDUCxNQUFELEVBQVNRLENBQVQ7QUFBQSxXQUNYO0FBQ0UsU0FBRyxFQUFFQSxDQURQO0FBRUUsV0FBSyxFQUFFO0FBQ0xDLDBCQUFrQixZQUFNRCxDQUFDLEdBQUcsR0FBTCxJQUFheEIsV0FBVyxHQUFHLENBQTNCLENBQUwsTUFEYjtBQUVMMEIsdUJBQWUsZ0JBQVNuQixZQUFZLENBQUNvQixHQUF0QixNQUZWO0FBR0xDLHNCQUFjLEVBQUUsV0FIWDtBQUlMQyxpQkFBUyxrQkFBV0wsQ0FBQyxLQUFLbEIsYUFBTixHQUFzQixDQUF0QixHQUEwQixHQUFyQyxNQUpKO0FBS0xnQixjQUFNLEVBQUVOLE1BQU0sQ0FBQ0MsUUFBUCxLQUNKLE1BREksR0FFSiwyQkFQQztBQVFMYSxhQUFLLEVBQUV2QixZQUFZLENBQUN1QixLQVJmO0FBU0xDLGNBQU0sRUFBRXhCLFlBQVksQ0FBQ3dCO0FBVGhCLE9BRlQ7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLE1BRFc7QUFBQSxHQUFaLENBREgsQ0FsQ0o7QUFBQTtBQUFBO0FBQUEsMmpKQURGO0FBZ0VELENBMUZEOztLQUFNOUIsSztBQTRGU0Esb0VBQWYiLCJmaWxlIjoiLi9jb21wb25lbnRzL2dyb3Vwc29sdmUvbG9iYnkudHN4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgUGxheWVyIH0gZnJvbSAnc2NoZW1hL3Byb3Rvcy9nYW1lX3BiJztcbmltcG9ydCB7IGdldEltYWdlT2Zmc2V0IH0gZnJvbSAndXRpbHMvZ2FtZSc7XG5cbmludGVyZmFjZSBQcm9wcyB7XG4gIHBsYXllclN0YXJ0ZWQ6IGJvb2xlYW47XG4gIGlzQ29ubmVjdGVkOiBib29sZWFuO1xuICB0aXRsZT86IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcGxheWVyczogUGxheWVyW107XG4gIGN1cnJlbnRQbGF5ZXI6IG51bWJlcjtcbiAgcGxheWVyU3ByaXRlPzoge1xuICAgIHVybDogc3RyaW5nO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gIH07XG4gIHN0YXJ0QnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIGNvbmZpcm1CdXR0b246IFJlYWN0LlJlYWN0RWxlbWVudDtcbiAgcmVqb2luQnV0dG9uOiBSZWFjdC5SZWFjdEVsZW1lbnQ7XG4gIHJlcXVpcmVkUGxheWVycz86IG51bWJlcjtcbn1cblxuY29uc3QgTUFYX1BMQVlFUlMgPSA2O1xuXG5jb25zdCBMb2JieTogRnVuY3Rpb25Db21wb25lbnQ8XG4gIFByb3BzICYgT21pdDxSZWFjdC5IVE1MUHJvcHM8SFRNTERpdkVsZW1lbnQ+LCAndGl0bGUnPlxuPiA9ICh7XG4gIHBsYXllclN0YXJ0ZWQsXG4gIGlzQ29ubmVjdGVkLFxuICB0aXRsZSxcbiAgcGxheWVycyxcbiAgY3VycmVudFBsYXllcixcbiAgcGxheWVyU3ByaXRlLFxuICBzdGFydEJ1dHRvbixcbiAgY29uZmlybUJ1dHRvbixcbiAgcmVqb2luQnV0dG9uLFxuICBjbGFzc05hbWUsXG4gIHJlcXVpcmVkUGxheWVycyA9IDEsXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGFsbFN0YXJ0ZWQgPVxuICAgIGlzQ29ubmVjdGVkICYmXG4gICAgcGxheWVycy5ldmVyeSgocGxheWVyKSA9PiBwbGF5ZXIuZ2V0UmVhZHkoKSkgJiZcbiAgICBwbGF5ZXJzLmxlbmd0aCA+PSByZXF1aXJlZFBsYXllcnM7XG5cbiAgY29uc3QgcGxheWVyc05lZWRlZCA9IE1hdGgubWF4KFxuICAgIHJlcXVpcmVkUGxheWVycyAtIDEsXG4gICAgcGxheWVycy5maWx0ZXIoKHBsYXllcikgPT4gIXBsYXllci5nZXRSZWFkeSgpKS5sZW5ndGhcbiAgKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtgYWJzLWNlbnRlciBjZW50ZXIgJHtjbGFzc05hbWUgPz8gJyd9YH0gey4uLnByb3BzfT5cbiAgICAgIHt0aXRsZX1cbiAgICAgIHthbGxTdGFydGVkID8gKFxuICAgICAgICA8PlxuICAgICAgICAgIHtjb25maXJtQnV0dG9ufVxuICAgICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgICBOb3RlOiBPbmNlIHlvdSBiZWdpbiBhIHNlc3Npb24sIG90aGVycyB3b24ndCBiZSBhYmxlIHRvIGpvaW4gdW50aWxcbiAgICAgICAgICAgIGl0IGVuZHMuXG4gICAgICAgICAgPC9wPlxuICAgICAgICA8Lz5cbiAgICAgICkgOiBwbGF5ZXJTdGFydGVkICYmIHBsYXllcnMubGVuZ3RoID49IHJlcXVpcmVkUGxheWVycyA/IChcbiAgICAgICAgYFdhaXRpbmcgZm9yICR7cGxheWVyc05lZWRlZH0gb3RoZXIgcGxheWVyJHtcbiAgICAgICAgICBwbGF5ZXJzTmVlZGVkID09PSAxID8gJycgOiAncydcbiAgICAgICAgfSB0byBqb2luLi4uYFxuICAgICAgKSA6IHBsYXllclN0YXJ0ZWQgPyAoXG4gICAgICAgIGAoTWluaW11bSBvZiAke3JlcXVpcmVkUGxheWVyc30gcGxheWVycyByZXF1aXJlZClgXG4gICAgICApIDogaXNDb25uZWN0ZWQgPyAoXG4gICAgICAgIHN0YXJ0QnV0dG9uXG4gICAgICApIDogKFxuICAgICAgICA8PlxuICAgICAgICAgIHtyZWpvaW5CdXR0b259XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPVwic21hbGxcIj5cbiAgICAgICAgICAgIEdhbWUgaW4gc2Vzc2lvbi4uLiA8YnIgLz5cbiAgICAgICAgICAgIFBsZWFzZSB3YWl0IGZvciB0aGUgY3VycmVudCBzZXNzaW9uIHRvIGNvbXBsZXRlLlxuICAgICAgICAgIDwvcD5cbiAgICAgICAgPC8+XG4gICAgICApfVxuICAgICAge3BsYXllcnMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cInNtYWxsXCI+XG4gICAgICAgICAgKHtwbGF5ZXJzLmxlbmd0aH0gcGxheWVye3BsYXllcnMubGVuZ3RoID09PSAxID8gJyAnIDogJ3MgJ31cbiAgICAgICAgICBpbiBsb2JieSlcbiAgICAgICAgPC9wPlxuICAgICAgKX1cbiAgICAgIHtwbGF5ZXJTcHJpdGUgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInBsYXllcnMgZmxleC1jZW50ZXJcIj5cbiAgICAgICAgICB7cGxheWVycy5tYXAoKHBsYXllciwgaSkgPT4gKFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICBrZXk9e2l9XG4gICAgICAgICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZFBvc2l0aW9uOiBgJHsoaSAqIDEwMCkgLyAoTUFYX1BMQVlFUlMgLSAxKX0lYCxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kSW1hZ2U6IGB1cmwoJHtwbGF5ZXJTcHJpdGUudXJsfSlgLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRTaXplOiAnNjAwJSAxMDAlJyxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm06IGBzY2FsZSgke2kgPT09IGN1cnJlbnRQbGF5ZXIgPyAxIDogMC43fSlgLFxuICAgICAgICAgICAgICAgIGZpbHRlcjogcGxheWVyLmdldFJlYWR5KClcbiAgICAgICAgICAgICAgICAgID8gJ25vbmUnXG4gICAgICAgICAgICAgICAgICA6ICdncmF5c2NhbGUoMSkgb3BhY2l0eSg4MCUpJyxcbiAgICAgICAgICAgICAgICB3aWR0aDogcGxheWVyU3ByaXRlLndpZHRoLFxuICAgICAgICAgICAgICAgIGhlaWdodDogcGxheWVyU3ByaXRlLmhlaWdodCxcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cblxuICAgICAgPHN0eWxlIGpzeD57YFxuICAgICAgICAuc21hbGwge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMS44dm1pbjtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMi4ydm1pbjtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAyLjh2bWluO1xuICAgICAgICB9XG4gICAgICBgfTwvc3R5bGU+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2JieTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/groupsolve/lobby.tsx\n");

/***/ }),

/***/ "./components/groupsolve/potato.tsx":
/*!******************************************!*\
  !*** ./components/groupsolve/potato.tsx ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony import */ var _babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/toConsumableArray */ \"./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/defineProperty */ \"./node_modules/@babel/runtime/helpers/esm/defineProperty.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! styled-jsx/style */ \"./node_modules/styled-jsx/style.js\");\n/* harmony import */ var styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var components_groupsolve_lobby__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! components/groupsolve/lobby */ \"./components/groupsolve/lobby.tsx\");\n/* harmony import */ var assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! assets/puzzle/papaya/hyperspace_bold.otf */ \"./assets/puzzle/papaya/hyperspace_bold.otf\");\n/* harmony import */ var schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! schema/protos/potato_pb */ \"./schema/protos/potato_pb.js\");\n/* harmony import */ var schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! schema/protos/game_pb */ \"./schema/protos/game_pb.js\");\n/* harmony import */ var schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var utils_timer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! utils/timer */ \"./utils/timer.tsx\");\n/* harmony import */ var utils_game__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! utils/game */ \"./utils/game.ts\");\n/* harmony import */ var utils_animation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! utils/animation */ \"./utils/animation.ts\");\n/* harmony import */ var utils_assets__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! utils/assets */ \"./utils/assets.ts\");\n\n\n\nvar _BodyPartToImageUrl,\n    _this = undefined,\n    _jsxFileName = \"/vagrant/client/components/groupsolve/potato.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = react__WEBPACK_IMPORTED_MODULE_3___default.a.createElement;\n\n\n\n\n\n\n\n\n\n\nvar PotatoState = schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"PotatoGameState\"].PotatoState;\nvar TWO_PI = Math.PI * 2;\nvar GUESS_TIME = 450;\nvar LEVEL_START_TIME = 30;\nvar ASTEROID_SPRITE_SIZE = 314;\nvar ASTEROID_SPRITES = 15;\nvar STAR_COLOR_RANGE = [0, 60, 240];\nvar ANIMATION_SPEED = 10;\nvar OUTER_BODY_PARTS = new Set([schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"BodyPart\"].ARM, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"BodyPart\"].EARS, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"BodyPart\"].LEG]);\nvar BodyPartToImageUrl = (_BodyPartToImageUrl = {}, Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_BodyPartToImageUrl, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"BodyPart\"].ARM, 'arm'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_BodyPartToImageUrl, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"BodyPart\"].LEG, 'leg'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_BodyPartToImageUrl, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"BodyPart\"].EYES, 'eyes'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_BodyPartToImageUrl, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"BodyPart\"].EARS, 'ear'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_BodyPartToImageUrl, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"BodyPart\"].NOSE, 'nose'), Object(_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_BodyPartToImageUrl, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"BodyPart\"].MOUTH, 'mouth'), _BodyPartToImageUrl);\n\nfunction sample(array) {\n  var index = Math.floor(Math.random() * array.length);\n  return array[index];\n}\n\nvar generateRandomStars = function generateRandomStars(stars, numStars, width, height) {\n  for (var i = 0; i < numStars; i++) {\n    var x = Math.random() * width;\n    var y = Math.random() * height;\n    var scale = Math.random() * 1.2;\n    var hue = sample(STAR_COLOR_RANGE);\n    var saturation = Math.floor(Math.random() * 50) + 50;\n    stars.push({\n      position: [x, y],\n      scale: scale,\n      color: \"hsl(\".concat(hue, \", \").concat(saturation, \"%, 88%)\") // blue-ish white color\n\n    });\n  }\n};\n\nvar Card = function Card(_ref) {\n  var bodyPart = _ref.bodyPart,\n      image = _ref.image;\n  return __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"775383019\", [image.src, bodyPart == null ? \"\".concat(ASTEROID_SPRITE_SIZE, \"px \").concat(ASTEROID_SPRITE_SIZE, \"px\") : '75%', bodyPart == null ? '90%' : '100%', bodyPart == null ? '80%' : '100%']]]) + \" \" + \"container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"775383019\", [image.src, bodyPart == null ? \"\".concat(ASTEROID_SPRITE_SIZE, \"px \").concat(ASTEROID_SPRITE_SIZE, \"px\") : '75%', bodyPart == null ? '90%' : '100%', bodyPart == null ? '80%' : '100%']]]) + \" \" + \"sprite\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"775383019\",\n    dynamic: [image.src, bodyPart == null ? \"\".concat(ASTEROID_SPRITE_SIZE, \"px \").concat(ASTEROID_SPRITE_SIZE, \"px\") : '75%', bodyPart == null ? '90%' : '100%', bodyPart == null ? '80%' : '100%'],\n    __self: _this\n  }, \".container.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;border:2px solid white;height:120px;width:80px;}.sprite.__jsx-style-dynamic-selector{background:center no-repeat url(\".concat(image.src, \");background-size:\").concat(bodyPart == null ? \"\".concat(ASTEROID_SPRITE_SIZE, \"px \").concat(ASTEROID_SPRITE_SIZE, \"px\") : '75%', \";color:#fff;font-size:30px;height:\").concat(bodyPart == null ? '90%' : '100%', \";width:\").concat(bodyPart == null ? '80%' : '100%', \";}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/potato.tsx */\")));\n};\n\n_c = Card;\n\nvar renderTitleScreen = function renderTitleScreen(ctx, sprite, screenDimensions) {\n  ctx.clearRect(0, 0, screenDimensions.width, screenDimensions.height);\n  ctx.drawImage(sprite, 0, 0, screenDimensions.width, screenDimensions.height);\n};\n\nvar renderBackground = function renderBackground(ctx, screenDimensions) {\n  ctx.clearRect(0, 0, screenDimensions.width, screenDimensions.height);\n  ctx.fillStyle = '#000';\n  ctx.fillRect(0, 0, screenDimensions.width, screenDimensions.height);\n};\n\nvar renderStars = function renderStars(ctx, stars) {\n  stars.forEach(function (star) {\n    ctx.beginPath();\n    ctx.arc(star.position[0], star.position[1], star.scale, 0, 360);\n    ctx.fillStyle = star.color;\n    ctx.fill();\n  });\n};\n\nvar renderBodyParts = function renderBodyParts(ctx, asteroid, position, images) {\n  asteroid.bodyParts.forEach(function (_ref2) {\n    var bodyPart = _ref2.bodyPart,\n        offset = _ref2.offset,\n        rotation = _ref2.rotation;\n    var image = images[BodyPartToImageUrl[bodyPart]];\n    var width = image.width;\n    var height = image.height;\n    ctx.save();\n    ctx.translate(position[0] + offset[0], position[1] + offset[1]);\n    ctx.rotate(rotation);\n    ctx.drawImage(image, -(width * asteroid.scale) / 2, -(height * asteroid.scale) / 2, width * asteroid.scale, height * asteroid.scale);\n    ctx.restore();\n  });\n};\n\nvar renderAsteroids = function renderAsteroids(ctx, sprite, tick, asteroids, images, screenDimensions) {\n  asteroids.forEach(function (asteroid) {\n    if (tick < asteroid.startTime || tick > asteroid.endTime) {\n      return;\n    }\n\n    var position = Object(utils_game__WEBPACK_IMPORTED_MODULE_9__[\"computePosition\"])(asteroid.startPosition, asteroid.endPosition, asteroid.startTime, asteroid.endTime, tick);\n    var size = Math.round(asteroid.scale * (screenDimensions.width / 3));\n    ctx.drawImage(sprite, asteroid.sprite % 5 * ASTEROID_SPRITE_SIZE, Math.floor(asteroid.sprite / 5) * ASTEROID_SPRITE_SIZE, ASTEROID_SPRITE_SIZE, ASTEROID_SPRITE_SIZE, position[0] - size / 2, position[1] - size / 2, size, size);\n    renderBodyParts(ctx, asteroid, position, images);\n  });\n};\n\nvar PotatoGame = function PotatoGame(_ref3) {\n  _s();\n\n  var _gameStateRef$current, _gameState$getBaseSta2, _gameState$getState, _gameState$getBaseSta3, _gameState$getBaseSta4;\n\n  var canvasRef = _ref3.canvasRef,\n      gameState = _ref3.gameState,\n      isConnected = _ref3.isConnected,\n      setLoading = _ref3.setLoading,\n      currentPlayer = _ref3.currentPlayer,\n      sendMessage = _ref3.sendMessage,\n      restartGame = _ref3.restartGame,\n      screenDimensions = _ref3.screenDimensions;\n\n  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false),\n      playerStarted = _useState[0],\n      setPlayerStarted = _useState[1];\n\n  var _useState2 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(0),\n      level = _useState2[0],\n      setLevel = _useState2[1];\n\n  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(0),\n      score = _useState3[0],\n      setScore = _useState3[1];\n\n  var _useState4 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(0),\n      timeLevelStarted = _useState4[0],\n      setTimeLevelStarted = _useState4[1];\n\n  var _useState5 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])([]),\n      asteroids = _useState5[0],\n      setAsteroids = _useState5[1];\n\n  var _useState6 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])([]),\n      cards = _useState6[0],\n      setCards = _useState6[1];\n\n  var _useState7 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(null),\n      timeGuessStarted = _useState7[0],\n      setTimeGuessStarted = _useState7[1];\n\n  var _useState8 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])([schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"Operation\"].PLUS, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"Operation\"].PLUS, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"Operation\"].PLUS]),\n      operations = _useState8[0],\n      setOperations = _useState8[1];\n\n  var _useState9 = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useState\"])(false),\n      gameOver = _useState9[0],\n      setGameOver = _useState9[1];\n\n  var stars = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])([]);\n\n  var _useImages = Object(utils_assets__WEBPACK_IMPORTED_MODULE_11__[\"useImages\"])('puzzle/papaya/', ['shape', 'title'].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(Object.values(BodyPartToImageUrl)))),\n      isLoading = _useImages.isLoading,\n      images = _useImages.images;\n\n  var _useSounds = Object(utils_assets__WEBPACK_IMPORTED_MODULE_11__[\"useSounds\"])('', [utils_assets__WEBPACK_IMPORTED_MODULE_11__[\"MAIN_SOUND_EFFECTS\"], utils_timer__WEBPACK_IMPORTED_MODULE_8__[\"TICK_SOUND_EFFECTS\"]]),\n      isSoundLoading = _useSounds.isLoading,\n      sounds = _useSounds.sounds;\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    if (!isLoading && !isSoundLoading) {\n      setLoading(false);\n    }\n  }, [isLoading, isSoundLoading]); // Refs for use in animation frames.\n\n  var gameStateRef = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])(null);\n  var tickRef = Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useRef\"])(0);\n  var timer = Object(utils_timer__WEBPACK_IMPORTED_MODULE_8__[\"useTimer\"])(timeGuessStarted !== null ? GUESS_TIME - (tickRef.current - timeGuessStarted) : 0, ANIMATION_SPEED, !isLoading && !isSoundLoading && ((_gameStateRef$current = gameStateRef.current) === null || _gameStateRef$current === void 0 ? void 0 : _gameStateRef$current.getState()) === PotatoState.WAITING_FOR_GUESS, {\n    tickSfx: sounds['public/tick']\n  });\n\n  var cleanup = function cleanup() {\n    setPlayerStarted(false);\n    setAsteroids([]);\n    setCards([]);\n    setOperations([schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"Operation\"].PLUS, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"Operation\"].PLUS, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"Operation\"].PLUS]);\n    setLevel(0);\n    setGameOver(false);\n    gameStateRef.current = null;\n    tickRef.current = 0;\n  };\n\n  var onSelect = function onSelect(input, i) {\n    var newOperations = operations.map(function (operation, j) {\n      return i === j ? input : operation;\n    });\n    setOperations(newOperations);\n  };\n\n  var onSubmitGuess = function onSubmitGuess() {\n    var action = new schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"PotatoGameAction\"]();\n    action.setOperationsList(operations);\n    sendMessage(action);\n    sounds['public/mainsfx'].play('select');\n  };\n\n  var onStartGame = function onStartGame() {\n    var action = new schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"PotatoGameAction\"]();\n    var baseAction = new schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameAction\"]();\n    baseAction.setAction(schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"Action\"].START_GAME);\n    action.setBaseAction(baseAction);\n    sendMessage(action);\n    setPlayerStarted(true);\n    sounds['public/mainsfx'].play('select');\n  };\n\n  var onSelectLevel = function onSelectLevel(level) {\n    var action = new schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"PotatoGameAction\"]();\n    action.setLevel(level);\n    sendMessage(action);\n    sounds['public/mainsfx'].play('select');\n  };\n\n  var onRestart = function onRestart() {\n    if (Object(utils_game__WEBPACK_IMPORTED_MODULE_9__[\"isGameOver\"])(gameStateRef.current)) {\n      sounds['public/mainsfx'].play('select');\n      cleanup();\n      restartGame();\n    }\n  };\n\n  var getCanvasPosition = function getCanvasPosition(position, screenDimensions) {\n    return [position.getX() / 100 * screenDimensions.width, position.getY() / 100 * screenDimensions.height];\n  }; // Update client state on every websocket message.\n\n\n  Object(react__WEBPACK_IMPORTED_MODULE_3__[\"useEffect\"])(function () {\n    var _gameState$getBaseSta;\n\n    gameStateRef.current = gameState;\n    tickRef.current = (_gameState$getBaseSta = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getTick()) !== null && _gameState$getBaseSta !== void 0 ? _gameState$getBaseSta : 0;\n\n    if (!gameState || !isConnected || isLoading || gameOver) {\n      return;\n    }\n\n    if (Object(utils_game__WEBPACK_IMPORTED_MODULE_9__[\"isGameOver\"])(gameState)) {\n      // Game is over\n      if (!gameOver) {\n        var guess = gameState.getGuessList();\n\n        if (guess.length) {\n          setOperations(guess);\n        }\n\n        setScore(gameState.getScore());\n        sounds['public/mainsfx'].play(gameState.getBaseState().getStatus() === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'win' : 'loss');\n        setGameOver(true);\n      }\n\n      return;\n    } // Game is in progress\n\n\n    switch (gameState.getState()) {\n      case PotatoState.WAITING_FOR_START:\n        // Wait for players to start\n        break;\n\n      case PotatoState.LEVEL_SELECT:\n        if (gameState.getBaseState().getLevel() !== level) {\n          setLevel(gameState.getBaseState().getLevel());\n        }\n\n        break;\n\n      case PotatoState.COUNTING:\n        if (gameState.getBaseState().getLevel() !== level) {\n          // Update level and reset everything.\n          setLevel(gameState.getBaseState().getLevel());\n          setTimeLevelStarted(tickRef.current);\n          setTimeGuessStarted(null);\n          setAsteroids([]);\n          setCards([]);\n          setOperations([schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"Operation\"].PLUS, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"Operation\"].PLUS, schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"Operation\"].PLUS]);\n          setScore(gameState.getScore());\n        }\n\n        var newAsteroids = gameState.getAsteroidsList();\n\n        if (newAsteroids.length) {\n          setAsteroids([].concat(Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(asteroids), Object(_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(newAsteroids.map(function (asteroid) {\n            var angle = Math.random() * 360;\n            var radius = 40 + Math.random() * 40;\n            var bodyParts = asteroid.getBodyPartsList();\n            return {\n              startPosition: getCanvasPosition(asteroid.getStartPosition(), screenDimensions),\n              endPosition: getCanvasPosition(asteroid.getEndPosition(), screenDimensions),\n              startTime: asteroid.getStartTime(),\n              endTime: asteroid.getEndTime(),\n              angle: angle,\n              scale: radius / 150,\n              sprite: Math.floor(Math.random() * ASTEROID_SPRITES),\n              bodyParts: bodyParts.map(function (bodyPart, i) {\n                return {\n                  bodyPart: bodyPart,\n                  offset: [Math.cos(TWO_PI * (i / bodyParts.length) + angle) * (OUTER_BODY_PARTS.has(bodyPart) ? radius : radius / 2), Math.sin(TWO_PI * (i / bodyParts.length) + angle) * (OUTER_BODY_PARTS.has(bodyPart) ? radius : radius / 2)],\n                  rotation: OUTER_BODY_PARTS.has(bodyPart) ? TWO_PI * (i / bodyParts.length) : 0\n                };\n              })\n            };\n          }))));\n        }\n\n        break;\n\n      case PotatoState.WAITING_FOR_GUESS:\n        var newCards = gameState.getCardsList();\n\n        if (cards.length !== newCards.length) {\n          setCards(newCards);\n          setTimeGuessStarted(tickRef.current);\n        }\n\n        break;\n\n      default:\n        if (gameState.getScore() !== score) {\n          setScore(gameState.getScore());\n        }\n\n        break;\n    }\n  }, [gameState]); // Paint frames on the canvas.\n\n  var render = function render(tick) {\n    var _gameStateRef$current2, _gameStateRef$current3;\n\n    if (isLoading || isSoundLoading) {\n      return;\n    }\n\n    if (!stars.current.length) {\n      generateRandomStars(stars.current, 300, canvasRef.current.width, canvasRef.current.height);\n    }\n\n    var ctx = canvasRef.current.getContext('2d');\n\n    switch ((_gameStateRef$current2 = (_gameStateRef$current3 = gameStateRef.current) === null || _gameStateRef$current3 === void 0 ? void 0 : _gameStateRef$current3.getState()) !== null && _gameStateRef$current2 !== void 0 ? _gameStateRef$current2 : PotatoState.WAITING_FOR_START) {\n      case PotatoState.WAITING_FOR_START: // fallthrough\n\n      case PotatoState.LEVEL_SELECT:\n        renderTitleScreen(ctx, images['title'], screenDimensions);\n        renderStars(ctx, stars.current);\n        break;\n\n      case PotatoState.COUNTING:\n        renderBackground(ctx, screenDimensions);\n        renderStars(ctx, stars.current);\n        renderAsteroids(ctx, images['shape'], tick, asteroids, images, screenDimensions);\n        break;\n\n      default:\n        renderBackground(ctx, screenDimensions);\n        renderStars(ctx, stars.current);\n        break;\n    }\n  };\n\n  Object(utils_animation__WEBPACK_IMPORTED_MODULE_10__[\"useAnimationFrame\"])(render, tickRef, [asteroids]);\n  var status = (_gameState$getBaseSta2 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getStatus()) !== null && _gameState$getBaseSta2 !== void 0 ? _gameState$getBaseSta2 : schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].WAITING_FOR_START;\n  var state = (_gameState$getState = gameState === null || gameState === void 0 ? void 0 : gameState.getState()) !== null && _gameState$getState !== void 0 ? _gameState$getState : PotatoState.WAITING_FOR_START;\n  var players = (_gameState$getBaseSta3 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getPlayersList()) !== null && _gameState$getBaseSta3 !== void 0 ? _gameState$getBaseSta3 : [];\n  var tick = (_gameState$getBaseSta4 = gameState === null || gameState === void 0 ? void 0 : gameState.getBaseState().getTick()) !== null && _gameState$getBaseSta4 !== void 0 ? _gameState$getBaseSta4 : 0;\n\n  if (isLoading || isSoundLoading) {\n    return __jsx(\"div\", {\n      className: \"message center\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 12\n      }\n    }, \"Loading space junk...\");\n  }\n\n  var _styles$className = {\n    styles: __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n      id: \"4068686391\"\n    }, \"div.jsx-4068686391{color:#fff;font-family:'Hyperspace';top:60%;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/potato.tsx */\"),\n    className: \"jsx-4068686391\"\n  },\n      lobbyClassName = _styles$className.className,\n      lobbyStyles = _styles$className.styles;\n  return __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, state !== PotatoState.WAITING_FOR_START && __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"message score\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 9\n    }\n  }, \"Score: \", score), Object(utils_game__WEBPACK_IMPORTED_MODULE_9__[\"isGameOver\"])(gameState) ? __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"winLose message center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 11\n    }\n  }, __jsx(\"p\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 13\n    }\n  }, \"GAME \", status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'COMPLETE' : 'OVER')), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"message center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 11\n    }\n  }, __jsx(\"button\", {\n    onClick: onRestart,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 13\n    }\n  }, \" - Return to lobby - \"))) : state === PotatoState.WAITING_FOR_START ? __jsx(components_groupsolve_lobby__WEBPACK_IMPORTED_MODULE_4__[\"default\"], {\n    title: __jsx(\"h1\", {\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 18\n      }\n    }, \"TATEROIDS\"),\n    playerStarted: playerStarted,\n    isConnected: isConnected,\n    players: players,\n    currentPlayer: currentPlayer,\n    startButton: __jsx(\"button\", {\n      onClick: onStartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 24\n      }\n    }, \" - Insert coin - \"),\n    confirmButton: __jsx(\"button\", {\n      onClick: onStartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 13\n      }\n    }, \" - Start game - \"),\n    rejoinButton: __jsx(\"button\", {\n      onClick: restartGame,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 13\n      }\n    }, \" - Rejoin lobby - \"),\n    className: lobbyClassName,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 9\n    }\n  }) : state === PotatoState.LEVEL_SELECT ? __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"message center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 9\n    }\n  }, __jsx(\"h3\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 11\n    }\n  }, \"Select wave\"), Array.from(Array(level + 1).keys()).map(function (i) {\n    return __jsx(\"div\", {\n      key: \"level-\".concat(i),\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      onClick: function onClick() {\n        return onSelectLevel(i);\n      },\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 15\n      }\n    }, \"- Wave \", i + 1, \" -\"));\n  })) : state === PotatoState.COUNTING && tick < timeLevelStarted + LEVEL_START_TIME ? __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"message center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 9\n    }\n  }, \"WAVE \", level + 1) : state === PotatoState.WAITING_FOR_GUESS && timeGuessStarted && __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"message timer center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 29\n    }\n  }, timer), cards.length > 0 && __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, null, state === PotatoState.WAITING_FOR_GUESS && !Object(utils_game__WEBPACK_IMPORTED_MODULE_9__[\"isGameOver\"])(gameState) && __jsx(\"button\", {\n    onClick: onSubmitGuess,\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 533,\n      columnNumber: 13\n    }\n  }, \"- Guess -\"), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"cards\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 11\n    }\n  }, cards.map(function (bodyPart, i) {\n    return __jsx(react__WEBPACK_IMPORTED_MODULE_3___default.a.Fragment, {\n      key: \"card-\".concat(level, \"-\").concat(bodyPart),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"card\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 17\n      }\n    }, __jsx(Card, {\n      bodyPart: bodyPart,\n      image: images[BodyPartToImageUrl[bodyPart]],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 19\n      }\n    })), i < cards.length - 1 ? __jsx(\"select\", {\n      onChange: function onChange(e) {\n        return onSelect(parseInt(e.target.value, 10), i);\n      },\n      value: operations[i] || '',\n      disabled: Object(utils_game__WEBPACK_IMPORTED_MODULE_9__[\"isGameOver\"])(gameState),\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 19\n      }\n    }, __jsx(\"option\", {\n      value: schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"Operation\"].PLUS,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 21\n      }\n    }, \"+\"), __jsx(\"option\", {\n      value: schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"Operation\"].MINUS,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 558,\n        columnNumber: 21\n      }\n    }, \"-\"), __jsx(\"option\", {\n      value: schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"Operation\"].TIMES,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 21\n      }\n    }, \"\\xD7\"), __jsx(\"option\", {\n      value: schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"Operation\"].DIVIDE,\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 21\n      }\n    }, \"\\xF7\")) : __jsx(\"input\", {\n      type: \"text\",\n      width: 1,\n      height: 1,\n      disabled: true,\n      readOnly: true,\n      value: \"=\",\n      className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 19\n      }\n    }));\n  }), __jsx(\"div\", {\n    className: styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a.dynamic([[\"428997615\", [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red']]]) + \" \" + \"card\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 13\n    }\n  }, __jsx(Card, {\n    image: images['shape'],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 15\n    }\n  })))), __jsx(styled_jsx_style__WEBPACK_IMPORTED_MODULE_2___default.a, {\n    id: \"428997615\",\n    dynamic: [assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red'],\n    __self: _this\n  }, \"@font-face{font-family:'Hyperspace';src:url(\".concat(assets_puzzle_papaya_hyperspace_bold_otf__WEBPACK_IMPORTED_MODULE_5__[\"default\"], \");font-weight:bold;}h1.__jsx-style-dynamic-selector{-webkit-letter-spacing:8px;-moz-letter-spacing:8px;-ms-letter-spacing:8px;letter-spacing:8px;}h1.__jsx-style-dynamic-selector,button.__jsx-style-dynamic-selector{font-family:'Hyperspace';}.center.__jsx-style-dynamic-selector{position:absolute;left:50%;top:50%;text-align:center;-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);}.message.__jsx-style-dynamic-selector{color:#fff;font-family:'Hyperspace';font-size:25px;position:absolute;}.score.__jsx-style-dynamic-selector{font-size:20px;top:20px;left:20px;}.winLose.message.__jsx-style-dynamic-selector{color:\").concat(status === schema_protos_game_pb__WEBPACK_IMPORTED_MODULE_7__[\"GameStatus\"].COMPLETE_WIN ? 'green' : 'red', \";font-size:50px;top:40%;}.message.timer.__jsx-style-dynamic-selector{font-size:30px;}.bottom.__jsx-style-dynamic-selector{top:80%;}.cards.__jsx-style-dynamic-selector{position:absolute;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:space-evenly;-webkit-justify-content:space-evenly;-ms-flex-pack:space-evenly;justify-content:space-evenly;bottom:15%;left:0;right:0;}.card.__jsx-style-dynamic-selector{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:space-evenly;-webkit-justify-content:space-evenly;-ms-flex-pack:space-evenly;justify-content:space-evenly;-webkit-flex:1;-ms-flex:1;flex:1;}select.__jsx-style-dynamic-selector{width:50px;height:40px;font-size:36px;}input.__jsx-style-dynamic-selector{width:50px;height:15px;padding:15px;font-size:30px;text-align:center;}button.center.__jsx-style-dynamic-selector{top:90%;}button.__jsx-style-dynamic-selector{background:transparent;color:white;font-size:20px;height:40px;padding:0 10px;}button.__jsx-style-dynamic-selector:hover{font-size:22px;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\\n/*@ sourceURL=/vagrant/client/components/groupsolve/potato.tsx */\")), lobbyStyles);\n};\n\n_s(PotatoGame, \"XJkJK+jNj+Ef4iD8J1CGWK3VzFI=\", false, function () {\n  return [utils_assets__WEBPACK_IMPORTED_MODULE_11__[\"useImages\"], utils_assets__WEBPACK_IMPORTED_MODULE_11__[\"useSounds\"], utils_timer__WEBPACK_IMPORTED_MODULE_8__[\"useTimer\"], utils_animation__WEBPACK_IMPORTED_MODULE_10__[\"useAnimationFrame\"]];\n});\n\n_c2 = PotatoGame;\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  Game: PotatoGame,\n  State: schema_protos_potato_pb__WEBPACK_IMPORTED_MODULE_6__[\"PotatoGameState\"]\n});\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"PotatoGame\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/groupsolve/potato.tsx\n");

/***/ }),

/***/ "./schema/protos/potato_pb.js":
/*!************************************!*\
  !*** ./schema/protos/potato_pb.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {// source: potato.proto\n\n/**\n * @fileoverview\n * @enhanceable\n * @suppress {messageConventions} JS Compiler reports an error if a variable or\n *     field starts with 'MSG_' and isn't a translatable message.\n * @public\n */\n// GENERATED CODE -- DO NOT EDIT!\nvar jspb = __webpack_require__(/*! google-protobuf */ \"./node_modules/google-protobuf/google-protobuf.js\");\n\nvar goog = jspb;\nvar global = Function('return this')();\n\nvar game_pb = __webpack_require__(/*! ./game_pb.js */ \"./schema/protos/game_pb.js\");\n\ngoog.object.extend(proto, game_pb);\n\nvar math_pb = __webpack_require__(/*! ./math_pb.js */ \"./schema/protos/math_pb.js\");\n\ngoog.object.extend(proto, math_pb);\ngoog.exportSymbol('proto.Asteroid', null, global);\ngoog.exportSymbol('proto.BodyPart', null, global);\ngoog.exportSymbol('proto.Operation', null, global);\ngoog.exportSymbol('proto.PotatoGameAction', null, global);\ngoog.exportSymbol('proto.PotatoGameState', null, global);\ngoog.exportSymbol('proto.PotatoGameState.PotatoState', null, global);\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\nproto.Asteroid = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.Asteroid.repeatedFields_, null);\n};\n\ngoog.inherits(proto.Asteroid, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.Asteroid.displayName = 'proto.Asteroid';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.PotatoGameState = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.PotatoGameState.repeatedFields_, null);\n};\n\ngoog.inherits(proto.PotatoGameState, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.PotatoGameState.displayName = 'proto.PotatoGameState';\n}\n/**\n * Generated by JsPbCodeGenerator.\n * @param {Array=} opt_data Optional initial data array, typically from a\n * server response, or constructed directly in Javascript. The array is used\n * in place and becomes part of the constructed object. It is not cloned.\n * If no data is provided, the constructed object will be empty, but still\n * valid.\n * @extends {jspb.Message}\n * @constructor\n */\n\n\nproto.PotatoGameAction = function (opt_data) {\n  jspb.Message.initialize(this, opt_data, 0, -1, proto.PotatoGameAction.repeatedFields_, null);\n};\n\ngoog.inherits(proto.PotatoGameAction, jspb.Message);\n\nif (goog.DEBUG && !COMPILED) {\n  /**\n   * @public\n   * @override\n   */\n  proto.PotatoGameAction.displayName = 'proto.PotatoGameAction';\n}\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.Asteroid.repeatedFields_ = [1];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.Asteroid.prototype.toObject = function (opt_includeInstance) {\n    return proto.Asteroid.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.Asteroid} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.Asteroid.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      bodyPartsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,\n      startPosition: (f = msg.getStartPosition()) && math_pb.Coordinate.toObject(includeInstance, f),\n      endPosition: (f = msg.getEndPosition()) && math_pb.Coordinate.toObject(includeInstance, f),\n      startTime: jspb.Message.getFieldWithDefault(msg, 4, 0),\n      endTime: jspb.Message.getFieldWithDefault(msg, 5, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.Asteroid}\n */\n\n\nproto.Asteroid.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.Asteroid();\n  return proto.Asteroid.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.Asteroid} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.Asteroid}\n */\n\n\nproto.Asteroid.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value =\n        /** @type {!Array<!proto.BodyPart>} */\n        reader.readPackedEnum();\n        msg.setBodyPartsList(value);\n        break;\n\n      case 2:\n        var value = new math_pb.Coordinate();\n        reader.readMessage(value, math_pb.Coordinate.deserializeBinaryFromReader);\n        msg.setStartPosition(value);\n        break;\n\n      case 3:\n        var value = new math_pb.Coordinate();\n        reader.readMessage(value, math_pb.Coordinate.deserializeBinaryFromReader);\n        msg.setEndPosition(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setStartTime(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setEndTime(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.Asteroid.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.Asteroid.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.Asteroid} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.Asteroid.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getBodyPartsList();\n\n  if (f.length > 0) {\n    writer.writePackedEnum(1, f);\n  }\n\n  f = message.getStartPosition();\n\n  if (f != null) {\n    writer.writeMessage(2, f, math_pb.Coordinate.serializeBinaryToWriter);\n  }\n\n  f = message.getEndPosition();\n\n  if (f != null) {\n    writer.writeMessage(3, f, math_pb.Coordinate.serializeBinaryToWriter);\n  }\n\n  f = message.getStartTime();\n\n  if (f !== 0) {\n    writer.writeInt32(4, f);\n  }\n\n  f = message.getEndTime();\n\n  if (f !== 0) {\n    writer.writeInt32(5, f);\n  }\n};\n/**\n * repeated BodyPart body_parts = 1;\n * @return {!Array<!proto.BodyPart>}\n */\n\n\nproto.Asteroid.prototype.getBodyPartsList = function () {\n  return (\n    /** @type {!Array<!proto.BodyPart>} */\n    jspb.Message.getRepeatedField(this, 1)\n  );\n};\n/**\n * @param {!Array<!proto.BodyPart>} value\n * @return {!proto.Asteroid} returns this\n */\n\n\nproto.Asteroid.prototype.setBodyPartsList = function (value) {\n  return jspb.Message.setField(this, 1, value || []);\n};\n/**\n * @param {!proto.BodyPart} value\n * @param {number=} opt_index\n * @return {!proto.Asteroid} returns this\n */\n\n\nproto.Asteroid.prototype.addBodyParts = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.Asteroid} returns this\n */\n\n\nproto.Asteroid.prototype.clearBodyPartsList = function () {\n  return this.setBodyPartsList([]);\n};\n/**\n * optional Coordinate start_position = 2;\n * @return {?proto.Coordinate}\n */\n\n\nproto.Asteroid.prototype.getStartPosition = function () {\n  return (\n    /** @type{?proto.Coordinate} */\n    jspb.Message.getWrapperField(this, math_pb.Coordinate, 2)\n  );\n};\n/**\n * @param {?proto.Coordinate|undefined} value\n * @return {!proto.Asteroid} returns this\n*/\n\n\nproto.Asteroid.prototype.setStartPosition = function (value) {\n  return jspb.Message.setWrapperField(this, 2, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.Asteroid} returns this\n */\n\n\nproto.Asteroid.prototype.clearStartPosition = function () {\n  return this.setStartPosition(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.Asteroid.prototype.hasStartPosition = function () {\n  return jspb.Message.getField(this, 2) != null;\n};\n/**\n * optional Coordinate end_position = 3;\n * @return {?proto.Coordinate}\n */\n\n\nproto.Asteroid.prototype.getEndPosition = function () {\n  return (\n    /** @type{?proto.Coordinate} */\n    jspb.Message.getWrapperField(this, math_pb.Coordinate, 3)\n  );\n};\n/**\n * @param {?proto.Coordinate|undefined} value\n * @return {!proto.Asteroid} returns this\n*/\n\n\nproto.Asteroid.prototype.setEndPosition = function (value) {\n  return jspb.Message.setWrapperField(this, 3, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.Asteroid} returns this\n */\n\n\nproto.Asteroid.prototype.clearEndPosition = function () {\n  return this.setEndPosition(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.Asteroid.prototype.hasEndPosition = function () {\n  return jspb.Message.getField(this, 3) != null;\n};\n/**\n * optional int32 start_time = 4;\n * @return {number}\n */\n\n\nproto.Asteroid.prototype.getStartTime = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 4, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.Asteroid} returns this\n */\n\n\nproto.Asteroid.prototype.setStartTime = function (value) {\n  return jspb.Message.setProto3IntField(this, 4, value);\n};\n/**\n * optional int32 end_time = 5;\n * @return {number}\n */\n\n\nproto.Asteroid.prototype.getEndTime = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 5, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.Asteroid} returns this\n */\n\n\nproto.Asteroid.prototype.setEndTime = function (value) {\n  return jspb.Message.setProto3IntField(this, 5, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.PotatoGameState.repeatedFields_ = [3, 4, 5];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.PotatoGameState.prototype.toObject = function (opt_includeInstance) {\n    return proto.PotatoGameState.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.PotatoGameState} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.PotatoGameState.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      baseState: (f = msg.getBaseState()) && game_pb.GameState.toObject(includeInstance, f),\n      state: jspb.Message.getFieldWithDefault(msg, 2, 0),\n      asteroidsList: jspb.Message.toObjectList(msg.getAsteroidsList(), proto.Asteroid.toObject, includeInstance),\n      cardsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,\n      guessList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,\n      score: jspb.Message.getFieldWithDefault(msg, 6, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.PotatoGameState}\n */\n\n\nproto.PotatoGameState.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.PotatoGameState();\n  return proto.PotatoGameState.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.PotatoGameState} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.PotatoGameState}\n */\n\n\nproto.PotatoGameState.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new game_pb.GameState();\n        reader.readMessage(value, game_pb.GameState.deserializeBinaryFromReader);\n        msg.setBaseState(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!proto.PotatoGameState.PotatoState} */\n        reader.readEnum();\n        msg.setState(value);\n        break;\n\n      case 3:\n        var value = new proto.Asteroid();\n        reader.readMessage(value, proto.Asteroid.deserializeBinaryFromReader);\n        msg.addAsteroids(value);\n        break;\n\n      case 4:\n        var value =\n        /** @type {!Array<!proto.BodyPart>} */\n        reader.readPackedEnum();\n        msg.setCardsList(value);\n        break;\n\n      case 5:\n        var value =\n        /** @type {!Array<!proto.Operation>} */\n        reader.readPackedEnum();\n        msg.setGuessList(value);\n        break;\n\n      case 6:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setScore(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.PotatoGameState.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.PotatoGameState.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.PotatoGameState} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.PotatoGameState.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getBaseState();\n\n  if (f != null) {\n    writer.writeMessage(1, f, game_pb.GameState.serializeBinaryToWriter);\n  }\n\n  f = message.getState();\n\n  if (f !== 0.0) {\n    writer.writeEnum(2, f);\n  }\n\n  f = message.getAsteroidsList();\n\n  if (f.length > 0) {\n    writer.writeRepeatedMessage(3, f, proto.Asteroid.serializeBinaryToWriter);\n  }\n\n  f = message.getCardsList();\n\n  if (f.length > 0) {\n    writer.writePackedEnum(4, f);\n  }\n\n  f = message.getGuessList();\n\n  if (f.length > 0) {\n    writer.writePackedEnum(5, f);\n  }\n\n  f = message.getScore();\n\n  if (f !== 0) {\n    writer.writeInt32(6, f);\n  }\n};\n/**\n * @enum {number}\n */\n\n\nproto.PotatoGameState.PotatoState = {\n  WAITING_FOR_START: 0,\n  LEVEL_SELECT: 1,\n  COUNTING: 2,\n  WAITING_FOR_GUESS: 3\n};\n/**\n * optional GameState base_state = 1;\n * @return {?proto.GameState}\n */\n\nproto.PotatoGameState.prototype.getBaseState = function () {\n  return (\n    /** @type{?proto.GameState} */\n    jspb.Message.getWrapperField(this, game_pb.GameState, 1)\n  );\n};\n/**\n * @param {?proto.GameState|undefined} value\n * @return {!proto.PotatoGameState} returns this\n*/\n\n\nproto.PotatoGameState.prototype.setBaseState = function (value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.PotatoGameState} returns this\n */\n\n\nproto.PotatoGameState.prototype.clearBaseState = function () {\n  return this.setBaseState(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.PotatoGameState.prototype.hasBaseState = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * optional PotatoState state = 2;\n * @return {!proto.PotatoGameState.PotatoState}\n */\n\n\nproto.PotatoGameState.prototype.getState = function () {\n  return (\n    /** @type {!proto.PotatoGameState.PotatoState} */\n    jspb.Message.getFieldWithDefault(this, 2, 0)\n  );\n};\n/**\n * @param {!proto.PotatoGameState.PotatoState} value\n * @return {!proto.PotatoGameState} returns this\n */\n\n\nproto.PotatoGameState.prototype.setState = function (value) {\n  return jspb.Message.setProto3EnumField(this, 2, value);\n};\n/**\n * repeated Asteroid asteroids = 3;\n * @return {!Array<!proto.Asteroid>}\n */\n\n\nproto.PotatoGameState.prototype.getAsteroidsList = function () {\n  return (\n    /** @type{!Array<!proto.Asteroid>} */\n    jspb.Message.getRepeatedWrapperField(this, proto.Asteroid, 3)\n  );\n};\n/**\n * @param {!Array<!proto.Asteroid>} value\n * @return {!proto.PotatoGameState} returns this\n*/\n\n\nproto.PotatoGameState.prototype.setAsteroidsList = function (value) {\n  return jspb.Message.setRepeatedWrapperField(this, 3, value);\n};\n/**\n * @param {!proto.Asteroid=} opt_value\n * @param {number=} opt_index\n * @return {!proto.Asteroid}\n */\n\n\nproto.PotatoGameState.prototype.addAsteroids = function (opt_value, opt_index) {\n  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Asteroid, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.PotatoGameState} returns this\n */\n\n\nproto.PotatoGameState.prototype.clearAsteroidsList = function () {\n  return this.setAsteroidsList([]);\n};\n/**\n * repeated BodyPart cards = 4;\n * @return {!Array<!proto.BodyPart>}\n */\n\n\nproto.PotatoGameState.prototype.getCardsList = function () {\n  return (\n    /** @type {!Array<!proto.BodyPart>} */\n    jspb.Message.getRepeatedField(this, 4)\n  );\n};\n/**\n * @param {!Array<!proto.BodyPart>} value\n * @return {!proto.PotatoGameState} returns this\n */\n\n\nproto.PotatoGameState.prototype.setCardsList = function (value) {\n  return jspb.Message.setField(this, 4, value || []);\n};\n/**\n * @param {!proto.BodyPart} value\n * @param {number=} opt_index\n * @return {!proto.PotatoGameState} returns this\n */\n\n\nproto.PotatoGameState.prototype.addCards = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.PotatoGameState} returns this\n */\n\n\nproto.PotatoGameState.prototype.clearCardsList = function () {\n  return this.setCardsList([]);\n};\n/**\n * repeated Operation guess = 5;\n * @return {!Array<!proto.Operation>}\n */\n\n\nproto.PotatoGameState.prototype.getGuessList = function () {\n  return (\n    /** @type {!Array<!proto.Operation>} */\n    jspb.Message.getRepeatedField(this, 5)\n  );\n};\n/**\n * @param {!Array<!proto.Operation>} value\n * @return {!proto.PotatoGameState} returns this\n */\n\n\nproto.PotatoGameState.prototype.setGuessList = function (value) {\n  return jspb.Message.setField(this, 5, value || []);\n};\n/**\n * @param {!proto.Operation} value\n * @param {number=} opt_index\n * @return {!proto.PotatoGameState} returns this\n */\n\n\nproto.PotatoGameState.prototype.addGuess = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.PotatoGameState} returns this\n */\n\n\nproto.PotatoGameState.prototype.clearGuessList = function () {\n  return this.setGuessList([]);\n};\n/**\n * optional int32 score = 6;\n * @return {number}\n */\n\n\nproto.PotatoGameState.prototype.getScore = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 6, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.PotatoGameState} returns this\n */\n\n\nproto.PotatoGameState.prototype.setScore = function (value) {\n  return jspb.Message.setProto3IntField(this, 6, value);\n};\n/**\n * List of repeated fields within this message type.\n * @private {!Array<number>}\n * @const\n */\n\n\nproto.PotatoGameAction.repeatedFields_ = [2];\n\nif (jspb.Message.GENERATE_TO_OBJECT) {\n  /**\n   * Creates an object representation of this proto.\n   * Field names that are reserved in JavaScript and will be renamed to pb_name.\n   * Optional fields that are not set will be set to undefined.\n   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.\n   * For the list of reserved names please see:\n   *     net/proto2/compiler/js/internal/generator.cc#kKeyword.\n   * @param {boolean=} opt_includeInstance Deprecated. whether to include the\n   *     JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @return {!Object}\n   */\n  proto.PotatoGameAction.prototype.toObject = function (opt_includeInstance) {\n    return proto.PotatoGameAction.toObject(opt_includeInstance, this);\n  };\n  /**\n   * Static version of the {@see toObject} method.\n   * @param {boolean|undefined} includeInstance Deprecated. Whether to include\n   *     the JSPB instance for transitional soy proto support:\n   *     http://goto/soy-param-migration\n   * @param {!proto.PotatoGameAction} msg The msg instance to transform.\n   * @return {!Object}\n   * @suppress {unusedLocalVariables} f is only used for nested messages\n   */\n\n\n  proto.PotatoGameAction.toObject = function (includeInstance, msg) {\n    var f,\n        obj = {\n      baseAction: (f = msg.getBaseAction()) && game_pb.GameAction.toObject(includeInstance, f),\n      operationsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,\n      level: jspb.Message.getFieldWithDefault(msg, 3, 0)\n    };\n\n    if (includeInstance) {\n      obj.$jspbMessageInstance = msg;\n    }\n\n    return obj;\n  };\n}\n/**\n * Deserializes binary data (in protobuf wire format).\n * @param {jspb.ByteSource} bytes The bytes to deserialize.\n * @return {!proto.PotatoGameAction}\n */\n\n\nproto.PotatoGameAction.deserializeBinary = function (bytes) {\n  var reader = new jspb.BinaryReader(bytes);\n  var msg = new proto.PotatoGameAction();\n  return proto.PotatoGameAction.deserializeBinaryFromReader(msg, reader);\n};\n/**\n * Deserializes binary data (in protobuf wire format) from the\n * given reader into the given message object.\n * @param {!proto.PotatoGameAction} msg The message object to deserialize into.\n * @param {!jspb.BinaryReader} reader The BinaryReader to use.\n * @return {!proto.PotatoGameAction}\n */\n\n\nproto.PotatoGameAction.deserializeBinaryFromReader = function (msg, reader) {\n  while (reader.nextField()) {\n    if (reader.isEndGroup()) {\n      break;\n    }\n\n    var field = reader.getFieldNumber();\n\n    switch (field) {\n      case 1:\n        var value = new game_pb.GameAction();\n        reader.readMessage(value, game_pb.GameAction.deserializeBinaryFromReader);\n        msg.setBaseAction(value);\n        break;\n\n      case 2:\n        var value =\n        /** @type {!Array<!proto.Operation>} */\n        reader.readPackedEnum();\n        msg.setOperationsList(value);\n        break;\n\n      case 3:\n        var value =\n        /** @type {number} */\n        reader.readInt32();\n        msg.setLevel(value);\n        break;\n\n      default:\n        reader.skipField();\n        break;\n    }\n  }\n\n  return msg;\n};\n/**\n * Serializes the message to binary data (in protobuf wire format).\n * @return {!Uint8Array}\n */\n\n\nproto.PotatoGameAction.prototype.serializeBinary = function () {\n  var writer = new jspb.BinaryWriter();\n  proto.PotatoGameAction.serializeBinaryToWriter(this, writer);\n  return writer.getResultBuffer();\n};\n/**\n * Serializes the given message to binary data (in protobuf wire\n * format), writing to the given BinaryWriter.\n * @param {!proto.PotatoGameAction} message\n * @param {!jspb.BinaryWriter} writer\n * @suppress {unusedLocalVariables} f is only used for nested messages\n */\n\n\nproto.PotatoGameAction.serializeBinaryToWriter = function (message, writer) {\n  var f = undefined;\n  f = message.getBaseAction();\n\n  if (f != null) {\n    writer.writeMessage(1, f, game_pb.GameAction.serializeBinaryToWriter);\n  }\n\n  f = message.getOperationsList();\n\n  if (f.length > 0) {\n    writer.writePackedEnum(2, f);\n  }\n\n  f = message.getLevel();\n\n  if (f !== 0) {\n    writer.writeInt32(3, f);\n  }\n};\n/**\n * optional GameAction base_action = 1;\n * @return {?proto.GameAction}\n */\n\n\nproto.PotatoGameAction.prototype.getBaseAction = function () {\n  return (\n    /** @type{?proto.GameAction} */\n    jspb.Message.getWrapperField(this, game_pb.GameAction, 1)\n  );\n};\n/**\n * @param {?proto.GameAction|undefined} value\n * @return {!proto.PotatoGameAction} returns this\n*/\n\n\nproto.PotatoGameAction.prototype.setBaseAction = function (value) {\n  return jspb.Message.setWrapperField(this, 1, value);\n};\n/**\n * Clears the message field making it undefined.\n * @return {!proto.PotatoGameAction} returns this\n */\n\n\nproto.PotatoGameAction.prototype.clearBaseAction = function () {\n  return this.setBaseAction(undefined);\n};\n/**\n * Returns whether this field is set.\n * @return {boolean}\n */\n\n\nproto.PotatoGameAction.prototype.hasBaseAction = function () {\n  return jspb.Message.getField(this, 1) != null;\n};\n/**\n * repeated Operation operations = 2;\n * @return {!Array<!proto.Operation>}\n */\n\n\nproto.PotatoGameAction.prototype.getOperationsList = function () {\n  return (\n    /** @type {!Array<!proto.Operation>} */\n    jspb.Message.getRepeatedField(this, 2)\n  );\n};\n/**\n * @param {!Array<!proto.Operation>} value\n * @return {!proto.PotatoGameAction} returns this\n */\n\n\nproto.PotatoGameAction.prototype.setOperationsList = function (value) {\n  return jspb.Message.setField(this, 2, value || []);\n};\n/**\n * @param {!proto.Operation} value\n * @param {number=} opt_index\n * @return {!proto.PotatoGameAction} returns this\n */\n\n\nproto.PotatoGameAction.prototype.addOperations = function (value, opt_index) {\n  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);\n};\n/**\n * Clears the list making it empty but non-null.\n * @return {!proto.PotatoGameAction} returns this\n */\n\n\nproto.PotatoGameAction.prototype.clearOperationsList = function () {\n  return this.setOperationsList([]);\n};\n/**\n * optional int32 level = 3;\n * @return {number}\n */\n\n\nproto.PotatoGameAction.prototype.getLevel = function () {\n  return (\n    /** @type {number} */\n    jspb.Message.getFieldWithDefault(this, 3, 0)\n  );\n};\n/**\n * @param {number} value\n * @return {!proto.PotatoGameAction} returns this\n */\n\n\nproto.PotatoGameAction.prototype.setLevel = function (value) {\n  return jspb.Message.setProto3IntField(this, 3, value);\n};\n/**\n * @enum {number}\n */\n\n\nproto.Operation = {\n  PLUS: 0,\n  MINUS: 1,\n  TIMES: 2,\n  DIVIDE: 3\n};\n/**\n * @enum {number}\n */\n\nproto.BodyPart = {\n  ARM: 0,\n  LEG: 1,\n  EYES: 2,\n  EARS: 3,\n  NOSE: 4,\n  MOUTH: 5\n};\ngoog.object.extend(exports, proto);\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./schema/protos/potato_pb.js\n");

/***/ }),

/***/ "./utils/animation.ts":
/*!****************************!*\
  !*** ./utils/animation.ts ***!
  \****************************/
/*! exports provided: useAnimationFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useAnimationFrame\", function() { return useAnimationFrame; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar _s = $RefreshSig$();\n\n\n/**\n * Sets up a callback to run every animation frame.\n * Must provide a tick ref which will be passed into the callback.\n */\n\nvar useAnimationFrame = function useAnimationFrame(callback, tickRef, deps) {\n  _s();\n\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  var requestRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n  var previousTimeRef = Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useRef\"])();\n\n  var animate = function animate(time) {\n    if (previousTimeRef.current !== undefined) {\n      var deltaTime = time - previousTimeRef.current;\n      tickRef.current += deltaTime / 100;\n      callback(tickRef.current);\n    }\n\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  Object(react__WEBPACK_IMPORTED_MODULE_0__[\"useEffect\"])(function () {\n    requestRef.current = requestAnimationFrame(animate);\n    return function () {\n      return cancelAnimationFrame(requestRef.current);\n    };\n  }, [deps]);\n};\n\n_s(useAnimationFrame, \"z8M7fn6QAiYOb97lWpO8m/pmXa0=\");\n\n;\n    var _a, _b;\n    // Legacy CSS implementations will `eval` browser code in a Node.js context\n    // to extract CSS. For backwards compatibility, we need to check we're in a\n    // browser context before continuing.\n    if (typeof self !== 'undefined' &&\n        // AMP / No-JS mode does not inject these helpers:\n        '$RefreshHelpers$' in self) {\n        var currentExports = module.__proto__.exports;\n        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n        // This cannot happen in MainTemplate because the exports mismatch between\n        // templating and execution.\n        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);\n        // A module can be accepted automatically based on its exports, e.g. when\n        // it is a Refresh Boundary.\n        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n            // Save the previous exports on update so we can compare the boundary\n            // signatures.\n            module.hot.dispose(function (data) {\n                data.prevExports = currentExports;\n            });\n            // Unconditionally accept an update to this module, we'll check if it's\n            // still a Refresh Boundary later.\n            module.hot.accept();\n            // This field is set when the previous version of this module was a\n            // Refresh Boundary, letting us know we need to check for invalidation or\n            // enqueue an update.\n            if (prevExports !== null) {\n                // A boundary can become ineligible if its exports are incompatible\n                // with the previous exports.\n                //\n                // For example, if you add/remove/change exports, we'll want to\n                // re-execute the importing modules, and force those components to\n                // re-render. Similarly, if you convert a class component to a\n                // function, we want to invalidate the boundary.\n                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                    module.hot.invalidate();\n                }\n                else {\n                    self.$RefreshHelpers$.scheduleUpdate();\n                }\n            }\n        }\n        else {\n            // Since we just executed the code for the module, it's possible that the\n            // new exports made it ineligible for being a boundary.\n            // We only care about the case when we were _previously_ a boundary,\n            // because we already accepted this update (accidental side effect).\n            var isNoLongerABoundary = prevExports !== null;\n            if (isNoLongerABoundary) {\n                module.hot.invalidate();\n            }\n        }\n    }\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/harmony-module.js */ \"./node_modules/webpack/buildin/harmony-module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vdXRpbHMvYW5pbWF0aW9uLnRzP2ExMTUiXSwibmFtZXMiOlsidXNlQW5pbWF0aW9uRnJhbWUiLCJjYWxsYmFjayIsInRpY2tSZWYiLCJkZXBzIiwicmVxdWVzdFJlZiIsInVzZVJlZiIsInByZXZpb3VzVGltZVJlZiIsImFuaW1hdGUiLCJ0aW1lIiwiY3VycmVudCIsInVuZGVmaW5lZCIsImRlbHRhVGltZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInVzZUVmZmVjdCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUVBOzs7OztBQUlPLElBQU1BLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FDL0JDLFFBRCtCLEVBRS9CQyxPQUYrQixFQUcvQkMsSUFIK0IsRUFJNUI7QUFBQTs7QUFDSDtBQUNBO0FBQ0EsTUFBTUMsVUFBVSxHQUFHQyxvREFBTSxFQUF6QjtBQUNBLE1BQU1DLGVBQWUsR0FBR0Qsb0RBQU0sRUFBOUI7O0FBRUEsTUFBTUUsT0FBTyxHQUFHLFNBQVZBLE9BQVUsQ0FBQ0MsSUFBRCxFQUFVO0FBQ3hCLFFBQUlGLGVBQWUsQ0FBQ0csT0FBaEIsS0FBNEJDLFNBQWhDLEVBQTJDO0FBQ3pDLFVBQU1DLFNBQVMsR0FBR0gsSUFBSSxHQUFHRixlQUFlLENBQUNHLE9BQXpDO0FBQ0FQLGFBQU8sQ0FBQ08sT0FBUixJQUFtQkUsU0FBUyxHQUFHLEdBQS9CO0FBQ0FWLGNBQVEsQ0FBQ0MsT0FBTyxDQUFDTyxPQUFULENBQVI7QUFDRDs7QUFDREgsbUJBQWUsQ0FBQ0csT0FBaEIsR0FBMEJELElBQTFCO0FBQ0FKLGNBQVUsQ0FBQ0ssT0FBWCxHQUFxQkcscUJBQXFCLENBQUNMLE9BQUQsQ0FBMUM7QUFDRCxHQVJEOztBQVVBTSx5REFBUyxDQUFDLFlBQU07QUFDZFQsY0FBVSxDQUFDSyxPQUFYLEdBQXFCRyxxQkFBcUIsQ0FBQ0wsT0FBRCxDQUExQztBQUNBLFdBQU87QUFBQSxhQUFNTyxvQkFBb0IsQ0FBQ1YsVUFBVSxDQUFDSyxPQUFaLENBQTFCO0FBQUEsS0FBUDtBQUNELEdBSFEsRUFHTixDQUFDTixJQUFELENBSE0sQ0FBVDtBQUlELENBeEJNOztHQUFNSCxpQiIsImZpbGUiOiIuL3V0aWxzL2FuaW1hdGlvbi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIFNldHMgdXAgYSBjYWxsYmFjayB0byBydW4gZXZlcnkgYW5pbWF0aW9uIGZyYW1lLlxuICogTXVzdCBwcm92aWRlIGEgdGljayByZWYgd2hpY2ggd2lsbCBiZSBwYXNzZWQgaW50byB0aGUgY2FsbGJhY2suXG4gKi9cbmV4cG9ydCBjb25zdCB1c2VBbmltYXRpb25GcmFtZSA9IChcbiAgY2FsbGJhY2s6ICh0aWNrOiBudW1iZXIpID0+IHZvaWQsXG4gIHRpY2tSZWY6IFJlYWN0Lk11dGFibGVSZWZPYmplY3Q8bnVtYmVyPixcbiAgZGVwczogUmVhY3QuRGVwZW5kZW5jeUxpc3RcbikgPT4ge1xuICAvLyBVc2UgdXNlUmVmIGZvciBtdXRhYmxlIHZhcmlhYmxlcyB0aGF0IHdlIHdhbnQgdG8gcGVyc2lzdFxuICAvLyB3aXRob3V0IHRyaWdnZXJpbmcgYSByZS1yZW5kZXIgb24gdGhlaXIgY2hhbmdlXG4gIGNvbnN0IHJlcXVlc3RSZWYgPSB1c2VSZWY8bnVtYmVyIHwgdW5kZWZpbmVkPigpO1xuICBjb25zdCBwcmV2aW91c1RpbWVSZWYgPSB1c2VSZWY8bnVtYmVyIHwgdW5kZWZpbmVkPigpO1xuXG4gIGNvbnN0IGFuaW1hdGUgPSAodGltZSkgPT4ge1xuICAgIGlmIChwcmV2aW91c1RpbWVSZWYuY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBkZWx0YVRpbWUgPSB0aW1lIC0gcHJldmlvdXNUaW1lUmVmLmN1cnJlbnQ7XG4gICAgICB0aWNrUmVmLmN1cnJlbnQgKz0gZGVsdGFUaW1lIC8gMTAwO1xuICAgICAgY2FsbGJhY2sodGlja1JlZi5jdXJyZW50KTtcbiAgICB9XG4gICAgcHJldmlvdXNUaW1lUmVmLmN1cnJlbnQgPSB0aW1lO1xuICAgIHJlcXVlc3RSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgfTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlcXVlc3RSZWYuY3VycmVudCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgICByZXR1cm4gKCkgPT4gY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVxdWVzdFJlZi5jdXJyZW50ISk7XG4gIH0sIFtkZXBzXSk7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./utils/animation.ts\n");

/***/ })

}]);